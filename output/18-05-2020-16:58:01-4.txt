made train set of size: 6193 , of which positive examples: 3572
out of  6193  sequences 3572  are positive. (percent:  0.5767802357500403 )
examples per length: [0, 3, 9, 27, 52, 84, 148, 276, 532, 1044, 1082, 760, 496, 318, 236, 164, 112, 92, 44, 48, 36, 34, 22, 26, 26, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]
size of train set: 5573
size of test set: 620
The dy.parameter(...) call is now DEPRECATED.
        There is no longer need to explicitly add parameters to the computation graph.
        Any used parameter will be added automatically.
classification loss on last batch was: 0.00048354187054331835
testing on train set, i.e. test set is train set
rnn score against target on test set:                              620 (100.0)
target: F(aUb)
query: true


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.12624430656433105  s
No positive counterexample found
EQ test took  0.03199934959411621  s
new counterexample: c  should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['c']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.1150352954864502  s
EQ test took  0.0014910697937011719  s
new counterexample:   should be accepted by implementation


positive traces---> 
['']


negative traces---> 
['c']



1  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (! x2)
Learning formula with depth 1
learned LTL formula: (~ c)
Learning took:  0.19444894790649414  s
EQ test took  0.025331735610961914  s
new counterexample: cb  should be accepted by implementation


positive traces---> 
['', 'cb']


negative traces---> 
['c']



2  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (x2 U (! x2))
Learning formula with depth 2
learned LTL formula: (c U (~ c))
Learning took:  0.23775768280029297  s
EQ test took  0.08848357200622559  s
new counterexample: a  should be rejected by implementation


positive traces---> 
['', 'cb']


negative traces---> 
['c', 'a']



3  iteration complete



start formula depth: 3
increasing formula depth to  4
increasing formula depth to  5
Before normalization: ((x0 | x2) U (! (x0 | x2)))
Learning formula with depth 3
learned LTL formula: ((a | c) U (~ (a | c)))
Learning took:  0.6801114082336426  s
EQ test took  0.17923498153686523  s


epsilon= 0.1 delta= 0.1 max_trace_length= 50
query: true
final ltl:  ((a | c) U (~ (a | c)))

Time taken to extract ltl: 1.6870388984680176
overall guided extraction time took: 0.12999999999999545
generated counterexamples were: (format: (counterexample, counterexample generation time))
('ba', 0.0)
<IPython.core.display.Image object>

Time taken to extract lstar-dfa: 0.1212625503540039
number of states of the dfa: 4
returned flag: True
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'a'}, 'b': {'a': 'b', 'b': 'b', 'c': 'b'}, 'ba': {'a': 'b', 'b': 'b', 'c': 'b'}, 'a': {'a': 'a', 'b': 'b', 'c': 'a'}}
Explanation matches RNN: 100.0
RNN matches ground truth: 100.0
Explanation matches ground truth: 100.0
Lstar matches RNN: 100.0
Lstar matches ground truth: 100.0
target query              explanation status  test accuracy  rnn score  explanation score  explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states  lstar explanation score  lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  true  ((a | c) U (~ (a | c)))   True          100.0      100.0              100.0                              100.0         1.687039          None            None    [c, , cb, a]          0         0         3            4                    100.0                                    100.0               0.121263         True      0.1    0.1
target: F(aUb)
query: true


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.10670256614685059  s
No positive counterexample found
EQ test took  0.04673123359680176  s
new counterexample: c  should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['c']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.10069775581359863  s
EQ test took  0.0015468597412109375  s
new counterexample:   should be accepted by implementation


positive traces---> 
['']


negative traces---> 
['c']



1  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (! x2)
Learning formula with depth 1
learned LTL formula: (~ c)
Learning took:  0.17850685119628906  s
EQ test took  0.01652979850769043  s
new counterexample: cb  should be accepted by implementation


positive traces---> 
['', 'cb']


negative traces---> 
['c']



2  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (x2 U (! x2))
Learning formula with depth 2
learned LTL formula: (c U (~ c))
Learning took:  0.23824238777160645  s
EQ test took  0.10721683502197266  s
new counterexample: a  should be rejected by implementation


positive traces---> 
['', 'cb']


negative traces---> 
['c', 'a']



3  iteration complete



start formula depth: 3
increasing formula depth to  4
increasing formula depth to  5
Before normalization: ((x0 | x2) U (! (x0 | x2)))
Learning formula with depth 3
learned LTL formula: ((a | c) U (~ (a | c)))
Learning took:  0.6769461631774902  s
EQ test took  0.20076775550842285  s


epsilon= 0.1 delta= 0.05 max_trace_length= 50
query: true
final ltl:  ((a | c) U (~ (a | c)))

Time taken to extract ltl: 1.6805837154388428
overall guided extraction time took: 0.28999999999999204
generated counterexamples were: (format: (counterexample, counterexample generation time))
('ba', 0.01999999999998181)
<IPython.core.display.Image object>

Time taken to extract lstar-dfa: 0.2892954349517822
number of states of the dfa: 4
returned flag: True
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'a'}, 'b': {'a': 'b', 'b': 'b', 'c': 'b'}, 'ba': {'a': 'b', 'b': 'b', 'c': 'b'}, 'a': {'a': 'a', 'b': 'b', 'c': 'a'}}
Explanation matches RNN: 100.0
RNN matches ground truth: 100.0
Explanation matches ground truth: 100.0
Lstar matches RNN: 100.0
Lstar matches ground truth: 100.0
target query              explanation status  test accuracy  rnn score  explanation score  explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states  lstar explanation score  lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  true  ((a | c) U (~ (a | c)))   True          100.0      100.0              100.0                              100.0         1.680584          None            None    [c, , cb, a]          0         0         3            4                    100.0                                    100.0               0.289295         True      0.1   0.05
target: F(aUb)
query: true


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.10962891578674316  s
No positive counterexample found
EQ test took  0.07736420631408691  s
new counterexample: c  should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['c']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.11789798736572266  s
EQ test took  0.0014522075653076172  s
new counterexample:   should be accepted by implementation


positive traces---> 
['']


negative traces---> 
['c']



1  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (! x2)
Learning formula with depth 1
learned LTL formula: (~ c)
Learning took:  0.17110943794250488  s
EQ test took  0.02078700065612793  s
new counterexample: cb  should be accepted by implementation


positive traces---> 
['', 'cb']


negative traces---> 
['c']



2  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (x2 U (! x2))
Learning formula with depth 2
learned LTL formula: (c U (~ c))
Learning took:  0.23626422882080078  s
EQ test took  0.11731910705566406  s
new counterexample: a  should be rejected by implementation


positive traces---> 
['', 'cb']


negative traces---> 
['c', 'a']



3  iteration complete



start formula depth: 3
increasing formula depth to  4
increasing formula depth to  5
Before normalization: ((x0 | x2) U (! (x0 | x2)))
Learning formula with depth 3
learned LTL formula: ((a | c) U (~ (a | c)))
Learning took:  0.6621551513671875  s
EQ test took  0.23978805541992188  s


epsilon= 0.1 delta= 0.01 max_trace_length= 50
query: true
final ltl:  ((a | c) U (~ (a | c)))

Time taken to extract ltl: 1.761223554611206
overall guided extraction time took: 1.9199999999999875
generated counterexamples were: (format: (counterexample, counterexample generation time))
('bc', 0.18000000000000682)
<IPython.core.display.Image object>

Time taken to extract lstar-dfa: 1.9268743991851807
number of states of the dfa: 4
returned flag: True
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'a'}, 'b': {'a': 'b', 'b': 'b', 'c': 'b'}, 'bc': {'a': 'b', 'b': 'b', 'c': 'b'}, 'a': {'a': 'a', 'b': 'b', 'c': 'a'}}
Explanation matches RNN: 100.0
RNN matches ground truth: 100.0
Explanation matches ground truth: 100.0
Lstar matches RNN: 100.0
Lstar matches ground truth: 100.0
target query              explanation status  test accuracy  rnn score  explanation score  explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states  lstar explanation score  lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  true  ((a | c) U (~ (a | c)))   True          100.0      100.0              100.0                              100.0         1.761224          None            None    [c, , cb, a]          0         0         3            4                    100.0                                    100.0               1.926874         True      0.1   0.01
target: F(aUb)
query: true


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.1212160587310791  s
No positive counterexample found
EQ test took  0.09074616432189941  s
new counterexample: c  should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['c']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.11994647979736328  s
EQ test took  0.0014836788177490234  s
new counterexample:   should be accepted by implementation


positive traces---> 
['']


negative traces---> 
['c']



1  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (! x2)
Learning formula with depth 1
learned LTL formula: (~ c)
Learning took:  0.16152215003967285  s
EQ test took  0.015469789505004883  s
new counterexample: cb  should be accepted by implementation


positive traces---> 
['', 'cb']


negative traces---> 
['c']



2  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (x2 U (! x2))
Learning formula with depth 2
learned LTL formula: (c U (~ c))
Learning took:  0.2230374813079834  s
EQ test took  0.1688542366027832  s
new counterexample: a  should be rejected by implementation


positive traces---> 
['', 'cb']


negative traces---> 
['c', 'a']



3  iteration complete



start formula depth: 3
increasing formula depth to  4
increasing formula depth to  5
Before normalization: ((x0 | x2) U (! (x0 | x2)))
Learning formula with depth 3
learned LTL formula: ((a | c) U (~ (a | c)))
Learning took:  0.6716470718383789  s
EQ test took  0.3485419750213623  s


epsilon= 0.05 delta= 0.1 max_trace_length= 50
query: true
final ltl:  ((a | c) U (~ (a | c)))

Time taken to extract ltl: 1.9299976825714111
overall guided extraction time took: 0.12000000000000455
generated counterexamples were: (format: (counterexample, counterexample generation time))
('bc', 0.009999999999990905)
<IPython.core.display.Image object>

Time taken to extract lstar-dfa: 0.12198829650878906
number of states of the dfa: 4
returned flag: True
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'a'}, 'b': {'a': 'b', 'b': 'b', 'c': 'b'}, 'bc': {'a': 'b', 'b': 'b', 'c': 'b'}, 'a': {'a': 'a', 'b': 'b', 'c': 'a'}}
Explanation matches RNN: 100.0
RNN matches ground truth: 100.0
Explanation matches ground truth: 100.0
Lstar matches RNN: 100.0
Lstar matches ground truth: 100.0
target query              explanation status  test accuracy  rnn score  explanation score  explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states  lstar explanation score  lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  true  ((a | c) U (~ (a | c)))   True          100.0      100.0              100.0                              100.0         1.929998          None            None    [c, , cb, a]          0         0         3            4                    100.0                                    100.0               0.121988         True     0.05    0.1
target: F(aUb)
query: true


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.12583684921264648  s
No positive counterexample found
EQ test took  0.09153437614440918  s
new counterexample: a  should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['a']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.11932039260864258  s
EQ test took  0.0015206336975097656  s
new counterexample:   should be accepted by implementation


positive traces---> 
['']


negative traces---> 
['a']



1  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (! x0)
Learning formula with depth 1
learned LTL formula: (~ a)
Learning took:  0.1698296070098877  s
EQ test took  0.04554343223571777  s
new counterexample: ab  should be accepted by implementation


positive traces---> 
['', 'ab']


negative traces---> 
['a']



2  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (x0 U (! x0))
Learning formula with depth 2
learned LTL formula: (a U (~ a))
Learning took:  0.22772765159606934  s
EQ test took  0.19310808181762695  s
new counterexample: c  should be rejected by implementation


positive traces---> 
['', 'ab']


negative traces---> 
['a', 'c']



3  iteration complete



start formula depth: 3
increasing formula depth to  4
increasing formula depth to  5
Before normalization: (! (G (x2 | x0)))
Learning formula with depth 3
learned LTL formula: (~ (G (a | c)))
Learning took:  0.6877050399780273  s
EQ test took  0.40314602851867676  s


epsilon= 0.05 delta= 0.05 max_trace_length= 50
query: true
final ltl:  (~ (G (a | c)))

Time taken to extract ltl: 2.0730953216552734
overall guided extraction time took: 0.28999999999999204
generated counterexamples were: (format: (counterexample, counterexample generation time))
('bc', 0.030000000000001137)
<IPython.core.display.Image object>

Time taken to extract lstar-dfa: 0.2938225269317627
number of states of the dfa: 4
returned flag: True
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'a'}, 'b': {'a': 'b', 'b': 'b', 'c': 'b'}, 'bc': {'a': 'b', 'b': 'b', 'c': 'b'}, 'a': {'a': 'a', 'b': 'b', 'c': 'a'}}
Explanation matches RNN: 100.0
RNN matches ground truth: 100.0
Explanation matches ground truth: 100.0
Lstar matches RNN: 100.0
Lstar matches ground truth: 100.0
target query      explanation status  test accuracy  rnn score  explanation score  explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states  lstar explanation score  lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  true  (~ (G (a | c)))   True          100.0      100.0              100.0                              100.0         2.073095          None            None    [a, , ab, c]          0         0         3            4                    100.0                                    100.0               0.293823         True     0.05   0.05
target: F(aUb)
query: true


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.12007737159729004  s
No positive counterexample found
EQ test took  0.10295963287353516  s
new counterexample: c  should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['c']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.11608409881591797  s
EQ test took  0.001552581787109375  s
new counterexample:   should be accepted by implementation


positive traces---> 
['']


negative traces---> 
['c']



1  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (! x2)
Learning formula with depth 1
learned LTL formula: (~ c)
Learning took:  0.16946911811828613  s
EQ test took  0.024355173110961914  s
new counterexample: cb  should be accepted by implementation


positive traces---> 
['', 'cb']


negative traces---> 
['c']



2  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (x2 U (! x2))
Learning formula with depth 2
learned LTL formula: (c U (~ c))
Learning took:  0.22560954093933105  s
EQ test took  0.2231440544128418  s
new counterexample: a  should be rejected by implementation


positive traces---> 
['', 'cb']


negative traces---> 
['c', 'a']



3  iteration complete



start formula depth: 3
increasing formula depth to  4
increasing formula depth to  5
Before normalization: ((x0 | x2) U (! (x0 | x2)))
Learning formula with depth 3
learned LTL formula: ((a | c) U (~ (a | c)))
Learning took:  0.6748166084289551  s
EQ test took  0.4926936626434326  s


epsilon= 0.05 delta= 0.01 max_trace_length= 50
query: true
final ltl:  ((a | c) U (~ (a | c)))

Time taken to extract ltl: 2.1580522060394287
overall guided extraction time took: 1.920000000000016
generated counterexamples were: (format: (counterexample, counterexample generation time))
('ba', 0.1799999999999784)
<IPython.core.display.Image object>

Time taken to extract lstar-dfa: 1.9180915355682373
number of states of the dfa: 4
returned flag: True
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'a'}, 'b': {'a': 'b', 'b': 'b', 'c': 'b'}, 'ba': {'a': 'b', 'b': 'b', 'c': 'b'}, 'a': {'a': 'a', 'b': 'b', 'c': 'a'}}
Explanation matches RNN: 100.0
RNN matches ground truth: 100.0
Explanation matches ground truth: 100.0
Lstar matches RNN: 100.0
Lstar matches ground truth: 100.0
target query              explanation status  test accuracy  rnn score  explanation score  explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states  lstar explanation score  lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  true  ((a | c) U (~ (a | c)))   True          100.0      100.0              100.0                              100.0         2.158052          None            None    [c, , cb, a]          0         0         3            4                    100.0                                    100.0               1.918092         True     0.05   0.01
target: F(aUb)
query: true


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.11145925521850586  s
No positive counterexample found
EQ test took  0.28377699851989746  s
new counterexample: c  should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['c']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.1117863655090332  s
EQ test took  0.0014874935150146484  s
new counterexample:   should be accepted by implementation


positive traces---> 
['']


negative traces---> 
['c']



1  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (! x2)
Learning formula with depth 1
learned LTL formula: (~ c)
Learning took:  0.16913294792175293  s
EQ test took  0.061307430267333984  s
new counterexample: cb  should be accepted by implementation


positive traces---> 
['', 'cb']


negative traces---> 
['c']



2  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (x2 U (! x2))
Learning formula with depth 2
learned LTL formula: (c U (~ c))
Learning took:  0.21732640266418457  s
EQ test took  0.8437013626098633  s
new counterexample: a  should be rejected by implementation


positive traces---> 
['', 'cb']


negative traces---> 
['c', 'a']



3  iteration complete



start formula depth: 3
increasing formula depth to  4
increasing formula depth to  5
Before normalization: ((x0 | x2) U (! (x0 | x2)))
Learning formula with depth 3
learned LTL formula: ((a | c) U (~ (a | c)))
Learning took:  0.6733191013336182  s
EQ test took  1.681530237197876  s


epsilon= 0.01 delta= 0.1 max_trace_length= 50
query: true
final ltl:  ((a | c) U (~ (a | c)))

Time taken to extract ltl: 4.161118745803833
overall guided extraction time took: 0.12000000000000455
generated counterexamples were: (format: (counterexample, counterexample generation time))
('bc', 0.009999999999990905)
<IPython.core.display.Image object>

Time taken to extract lstar-dfa: 0.1221625804901123
number of states of the dfa: 4
returned flag: True
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'a'}, 'b': {'a': 'b', 'b': 'b', 'c': 'b'}, 'bc': {'a': 'b', 'b': 'b', 'c': 'b'}, 'a': {'a': 'a', 'b': 'b', 'c': 'a'}}
Explanation matches RNN: 100.0
RNN matches ground truth: 100.0
Explanation matches ground truth: 100.0
Lstar matches RNN: 100.0
Lstar matches ground truth: 100.0
target query              explanation status  test accuracy  rnn score  explanation score  explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states  lstar explanation score  lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  true  ((a | c) U (~ (a | c)))   True          100.0      100.0              100.0                              100.0         4.161119          None            None    [c, , cb, a]          0         0         3            4                    100.0                                    100.0               0.122163         True     0.01    0.1
target: F(aUb)
query: true


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.10161733627319336  s
No positive counterexample found
EQ test took  0.4013955593109131  s
new counterexample: c  should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['c']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.11248898506164551  s
EQ test took  0.0015239715576171875  s
new counterexample:   should be accepted by implementation


positive traces---> 
['']


negative traces---> 
['c']



1  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (! x2)
Learning formula with depth 1
learned LTL formula: (~ c)
Learning took:  0.16965174674987793  s
EQ test took  0.06721687316894531  s
new counterexample: cb  should be accepted by implementation


positive traces---> 
['', 'cb']


negative traces---> 
['c']



2  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (x2 U (! x2))
Learning formula with depth 2
learned LTL formula: (c U (~ c))
Learning took:  0.23284435272216797  s
EQ test took  0.8619801998138428  s
new counterexample: a  should be rejected by implementation


positive traces---> 
['', 'cb']


negative traces---> 
['c', 'a']



3  iteration complete



start formula depth: 3
increasing formula depth to  4
increasing formula depth to  5
Before normalization: ((x0 | x2) U (! (x0 | x2)))
Learning formula with depth 3
learned LTL formula: ((a | c) U (~ (a | c)))
Learning took:  0.6777279376983643  s
EQ test took  1.945300579071045  s


epsilon= 0.01 delta= 0.05 max_trace_length= 50
query: true
final ltl:  ((a | c) U (~ (a | c)))

Time taken to extract ltl: 4.57906699180603
overall guided extraction time took: 0.28999999999999204
generated counterexamples were: (format: (counterexample, counterexample generation time))
('bc', 0.030000000000001137)
<IPython.core.display.Image object>

Time taken to extract lstar-dfa: 0.2934606075286865
number of states of the dfa: 4
returned flag: True
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'a'}, 'b': {'a': 'b', 'b': 'b', 'c': 'b'}, 'bc': {'a': 'b', 'b': 'b', 'c': 'b'}, 'a': {'a': 'a', 'b': 'b', 'c': 'a'}}
Explanation matches RNN: 100.0
RNN matches ground truth: 100.0
Explanation matches ground truth: 100.0
Lstar matches RNN: 100.0
Lstar matches ground truth: 100.0
target query              explanation status  test accuracy  rnn score  explanation score  explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states  lstar explanation score  lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  true  ((a | c) U (~ (a | c)))   True          100.0      100.0              100.0                              100.0         4.579067          None            None    [c, , cb, a]          0         0         3            4                    100.0                                    100.0               0.293461         True     0.01   0.05
target: F(aUb)
query: true


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.11867666244506836  s
No positive counterexample found
EQ test took  0.5149202346801758  s
new counterexample: a  should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['a']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.11294341087341309  s
EQ test took  0.0014619827270507812  s
new counterexample:   should be accepted by implementation


positive traces---> 
['']


negative traces---> 
['a']



1  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (! x0)
Learning formula with depth 1
learned LTL formula: (~ a)
Learning took:  0.1671772003173828  s
EQ test took  0.09111976623535156  s
new counterexample: ab  should be accepted by implementation


positive traces---> 
['', 'ab']


negative traces---> 
['a']



2  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (x0 U (! x0))
Learning formula with depth 2
learned LTL formula: (a U (~ a))
Learning took:  0.24738097190856934  s
EQ test took  1.1876306533813477  s
new counterexample: c  should be rejected by implementation


positive traces---> 
['', 'ab']


negative traces---> 
['a', 'c']



3  iteration complete



start formula depth: 3
increasing formula depth to  4
increasing formula depth to  5
Before normalization: (! (G (x2 | x0)))
Learning formula with depth 3
learned LTL formula: (~ (G (a | c)))
Learning took:  0.7000977993011475  s
EQ test took  2.4168617725372314  s


epsilon= 0.01 delta= 0.01 max_trace_length= 50
query: true
final ltl:  (~ (G (a | c)))

Time taken to extract ltl: 5.5643651485443115
overall guided extraction time took: 1.920000000000016
generated counterexamples were: (format: (counterexample, counterexample generation time))
('bc', 0.18000000000000682)
<IPython.core.display.Image object>

Time taken to extract lstar-dfa: 1.9242265224456787
number of states of the dfa: 4
returned flag: True
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'a'}, 'b': {'a': 'b', 'b': 'b', 'c': 'b'}, 'bc': {'a': 'b', 'b': 'b', 'c': 'b'}, 'a': {'a': 'a', 'b': 'b', 'c': 'a'}}
Explanation matches RNN: 100.0
RNN matches ground truth: 100.0
Explanation matches ground truth: 100.0
Lstar matches RNN: 100.0
Lstar matches ground truth: 100.0
target query      explanation status  test accuracy  rnn score  explanation score  explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states  lstar explanation score  lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  true  (~ (G (a | c)))   True          100.0      100.0              100.0                              100.0         5.564365          None            None    [a, , ab, c]          0         0         3            4                    100.0                                    100.0               1.924227         True     0.01   0.01
target: F(aUb)
query: false


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.11612796783447266  s
EQ test took  0.0003349781036376953  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.12392449378967285  s
EQ test took  0.11578106880187988  s


epsilon= 0.1 delta= 0.1 max_trace_length= 50
query: false
final ltl:  false

Time taken to extract ltl: 0.3594021797180176
Interrupted due to time limit
overall guided extraction time took: 401.48
generated counterexamples were: (format: (counterexample, counterexample generation time))
('', 0.0)
('b', 0.009999999999990905)
('bb', 0.009999999999990905)
('ab', 0.020000000000010232)
('ba', 0.009999999999990905)
('bc', 0.020000000000010232)
('bba', 0.020000000000010232)
('cbb', 0.029999999999972715)
('cb', 0.030000000000001137)
('aba', 0.020000000000010232)
('bcc', 0.030000000000001137)
('aab', 0.030000000000001137)
('abb', 0.030000000000001137)
('ccb', 0.03999999999999204)
('bbb', 0.03999999999999204)
('bcb', 0.05000000000001137)
('bca', 0.03999999999999204)
('abc', 0.040000000000020464)
('bbc', 0.04999999999998295)
('cab', 0.060000000000002274)
('acb', 0.05000000000001137)
('bbca', 0.060000000000002274)
('bbba', 0.060000000000002274)
('ccab', 0.060000000000002274)
('aabc', 0.06999999999999318)
('cabc', 0.06999999999999318)
('abab', 0.0700000000000216)
('abcb', 0.0700000000000216)
('aaba', 0.06999999999999318)
('bbcc', 0.06999999999999318)
('bcab', 0.0800000000000125)
('acbb', 0.0800000000000125)
('ccbb', 0.0800000000000125)
('caba', 0.0800000000000125)
('abca', 0.09000000000000341)
('bcca', 0.09000000000000341)
('aaab', 0.07999999999998408)
('abaa', 0.09000000000000341)
('abbb', 0.09999999999999432)
('caab', 0.10000000000002274)
('bbaa', 0.09999999999999432)
('abcc', 0.10000000000002274)
('acbc', 0.09999999999999432)
('bcba', 0.09999999999999432)
('abbc', 0.11000000000001364)
('cabb', 0.11000000000001364)
('acba', 0.12000000000000455)
('aacb', 0.12000000000000455)
('ccbc', 0.12000000000000455)
('bcac', 0.12000000000000455)
('bcbc', 0.12999999999999545)
('bbbc', 0.12000000000000455)
('bcbb', 0.12999999999999545)
('abac', 0.13000000000002387)
('bbbb', 0.14000000000001478)
('bccb', 0.13999999999998636)
('accb', 0.14000000000001478)
('aabb', 0.14000000000001478)
('acab', 0.13999999999998636)
('abba', 0.15000000000000568)
('bccc', 0.15000000000000568)
('bbcb', 0.1599999999999966)
('bbab', 0.1599999999999966)
('cccb', 0.1599999999999966)
('bcaa', 0.17000000000001592)
('bbac', 0.17000000000001592)
('ccba', 0.1699999999999875)
('bcccc', 0.1799999999999784)
('bbbcb', 0.18000000000000682)
('cacb', 0.18000000000000682)
('bbcbb', 0.18000000000000682)
('bbaab', 0.18999999999999773)
('ccabc', 0.18000000000000682)
('acabc', 0.18000000000000682)
('caaba', 0.1799999999999784)
('ccbbb', 0.20000000000001705)
('abbbc', 0.19000000000002615)
('aaabc', 0.20000000000001705)
('abcab', 0.19999999999998863)
('aabcc', 0.21000000000000796)
('abcbb', 0.21000000000000796)
('aaabb', 0.21000000000000796)
('aabba', 0.21999999999999886)
('bcaac', 0.21999999999999886)
('aabaa', 0.21999999999999886)
('caabc', 0.21999999999999886)
('acbcb', 0.22999999999998977)
('bbcaa', 0.21999999999999886)
('cabca', 0.2300000000000182)
('bbcab', 0.23999999999998067)
('aabca', 0.2300000000000182)
('ccaba', 0.25)
('abaab', 0.23999999999998067)
('abaac', 0.25)
('acacb', 0.2599999999999909)
('bbabc', 0.25)
('aaaab', 0.23999999999998067)
('abacc', 0.2599999999999909)
('abbbb', 0.2599999999999909)
('abbca', 0.2599999999999909)
('abbaa', 0.2599999999999909)
('abccc', 0.2699999999999818)
('bbbbc', 0.27000000000001023)
('bcbac', 0.28000000000000114)
('ababa', 0.27000000000001023)
('bcbcb', 0.28999999999999204)
('aacba', 0.2699999999999818)
('bbaca', 0.28000000000000114)
('bcacb', 0.28000000000000114)
('bcbab', 0.28000000000000114)
('cabba', 0.28000000000000114)
('aabac', 0.28999999999999204)
('acabb', 0.28000000000000114)
('cabab', 0.29000000000002046)
('acccb', 0.30000000000001137)
('abccb', 0.29999999999998295)
('bbbcc', 0.30000000000001137)
('bbbba', 0.29999999999998295)
('cabbb', 0.29999999999998295)
('cacab', 0.3100000000000023)
('abbac', 0.3100000000000023)
('ccaab', 0.3199999999999932)
('ccbab', 0.3100000000000023)
('ccccb', 0.3199999999999932)
('bcbca', 0.3199999999999932)
('acbaa', 0.3199999999999932)
('accbc', 0.3299999999999841)
('bbbaa', 0.3199999999999932)
('cccba', 0.3299999999999841)
('abcba', 0.3400000000000034)
('abaaa', 0.3499999999999943)
('abacb', 0.339999999999975)
('bcbbc', 0.36000000000001364)
('cacba', 0.36000000000001364)
('cccab', 0.3599999999999852)
('bcccb', 0.3599999999999852)
('bbbab', 0.3499999999999943)
('cacbb', 0.3499999999999943)
('bbccc', 0.3599999999999852)
('bbaba', 0.37000000000000455)
('acaba', 0.37000000000000455)
('bbccb', 0.37999999999999545)
('bcbaa', 0.3800000000000239)
('abcac', 0.37999999999999545)
('accbb', 0.37999999999999545)
('bcbba', 0.37999999999999545)
('bcaaa', 0.38999999999998636)
('accba', 0.4000000000000057)
('bbcca', 0.37999999999999545)
('bbaac', 0.3900000000000148)
('ccbaa', 0.4000000000000057)
('abbcb', 0.39999999999997726)
('acbba', 0.4000000000000057)
('bccbc', 0.4099999999999966)
('abbba', 0.4199999999999875)
('accab', 0.4000000000000057)
('bccaa', 0.4099999999999966)
('ccbac', 0.4099999999999966)
('abaca', 0.4000000000000057)
('aacbc', 0.4300000000000068)
('aabbc', 0.4399999999999977)
('bccab', 0.44999999999998863)
('abbcc', 0.4299999999999784)
('cabcc', 0.4300000000000068)
('cacbc', 0.4199999999999875)
('aaacb', 0.4300000000000068)
('acbab', 0.4300000000000068)
('abcbc', 0.44000000000002615)
('acaab', 0.4399999999999977)
('aabbb', 0.4399999999999977)
('acbbc', 0.44999999999998863)
('bcacc', 0.4399999999999977)
('cccbb', 0.44999999999998863)
('ccbbc', 0.44999999999998863)
('aaccb', 0.46000000000000796)
('ccabb', 0.46999999999999886)
('bccba', 0.44999999999998863)
('aacab', 0.46999999999999886)
('bbabb', 0.47999999999998977)
('abcca', 0.46999999999999886)
('bcbcc', 0.47999999999998977)
('aaaba', 0.4899999999999807)
('caacb', 0.47999999999998977)
('caabb', 0.5099999999999909)
('bbcba', 0.47999999999998977)
('bbacb', 0.47999999999998977)
('bbacc', 0.4900000000000091)
('bbbca', 0.5299999999999727)
('bcaba', 0.5200000000000102)
('cccbc', 0.5099999999999909)
('cabaa', 0.5300000000000011)
('acbbb', 0.5200000000000102)
('caccb', 0.5100000000000193)
('acbcc', 0.5199999999999818)
('aabcb', 0.5200000000000102)
('abbab', 0.5299999999999727)
('bccca', 0.5399999999999636)
('bcbbb', 0.5199999999999818)
('ccbcb', 0.5400000000000205)
('aabab', 0.5200000000000387)
('bccac', 0.5299999999999727)
('cabac', 0.5399999999999636)
('ccbcc', 0.5300000000000296)
('ababc', 0.5600000000000023)
('bbbac', 0.5400000000000205)
('aacbb', 0.5500000000000114)
('bbcac', 0.5500000000000114)
('acbac', 0.5600000000000023)
('ababb', 0.5600000000000023)
('bcaab', 0.5600000000000023)
('caaab', 0.5600000000000023)
('bbaaa', 0.5800000000000409)
('abcaa', 0.5699999999999932)
('bbcbc', 0.5800000000000409)
('bcaca', 0.5800000000000409)
('bbbbb', 0.5799999999999841)
('cabcb', 0.589999999999975)
('ccbba', 0.5900000000000318)
('ccbca', 0.589999999999975)
('bccbb', 0.589999999999975)
('acbca', 0.6100000000000136)
('bcabb', 0.6099999999999568)
('ccacb', 0.5999999999999659)
('bcabc', 0.6100000000000136)
('cabbc', 0.6100000000000136)
('abccba', 0.6100000000000136)
('bccbab', 0.6099999999999568)
('bbaccc', 0.6100000000000136)
('bbcccc', 0.6200000000000045)
('ccabcb', 0.6299999999999955)
('bbbccb', 0.6200000000000045)
('bcabbc', 0.6299999999999955)
('abbbaa', 0.6499999999999773)
('abcbca', 0.6399999999999864)
('acabaa', 0.6499999999999773)
('abaacb', 0.660000000000025)
('bbcbcc', 0.660000000000025)
('bbbbcc', 0.6699999999999591)
('bbbcab', 0.660000000000025)
('ccbbcb', 0.6499999999999773)
('abacab', 0.660000000000025)
('caabac', 0.660000000000025)
('ccbcac', 0.6800000000000068)
('abbccb', 0.6700000000000159)
('abaacc', 0.6700000000000159)
('ccbccb', 0.6800000000000068)
('caabcc', 0.6700000000000159)
('aababc', 0.6700000000000159)
('bcbcac', 0.6899999999999977)
('abcbab', 0.6899999999999977)
('cccbbb', 0.6899999999999977)
('cabccc', 0.6899999999999977)
('ccaaba', 0.6899999999999977)
('bcbcca', 0.6999999999999886)
('aaaaab', 0.6899999999999977)
('bbaaab', 0.7300000000000182)
('bcbaab', 0.7000000000000455)
('aabaab', 0.6999999999999886)
('ccccbc', 0.7099999999999795)
('cacaab', 0.7100000000000364)
('aaccab', 0.7200000000000273)
('bbabcb', 0.7200000000000273)
('ccbcbc', 0.7299999999999613)
('acbbbb', 0.7400000000000091)
('ccbbbb', 0.7300000000000182)
('bccbbc', 0.7200000000000273)
('bcccac', 0.7199999999999704)
('ccabbb', 0.7199999999999704)
('ccbcba', 0.7200000000000273)
('acaabc', 0.7299999999999613)
('bcaaba', 0.7699999999999818)
('acbaab', 0.7399999999999523)
('bbacaa', 0.7299999999999613)
('bcbaba', 0.7400000000000091)
('bcccbb', 0.75)
('aabcba', 0.7800000000000296)
('acbabb', 0.7800000000000296)
('aaaacb', 0.7599999999999909)
('acbbab', 0.7799999999999727)
('abcaca', 0.7799999999999727)
('aabaca', 0.7700000000000387)
('ccbcbb', 0.7700000000000387)
('ccabbc', 0.7800000000000296)
('bbaacc', 0.7799999999999727)
('bcbabb', 0.7799999999999727)
('aabbbb', 0.7799999999999727)
('cccabb', 0.7799999999999727)
('bbbaab', 0.8000000000000114)
('bbabaa', 0.8099999999999454)
('bbbccc', 0.8000000000000114)
('cccbab', 0.7899999999999636)
('aabcab', 0.8199999999999932)
('cabbcc', 0.8299999999999841)
('acbabc', 0.8400000000000318)
('abbaab', 0.8299999999999841)
('bbbabb', 0.8300000000000409)
('bcbcba', 0.839999999999975)
('acbcab', 0.839999999999975)
('bcacac', 0.839999999999975)
('abcbbb', 0.8400000000000318)
('accaba', 0.8500000000000227)
('bcabac', 0.8500000000000227)
('aabaac', 0.8600000000000136)
('abbcba', 0.8599999999999568)
('ccbcab', 0.8499999999999659)
('acabba', 0.8499999999999659)
('cabcaa', 0.8499999999999659)
('cacacb', 0.8600000000000136)
('cabcbb', 0.8700000000000045)
('aaabca', 0.8799999999999955)
('bbabca', 0.8799999999999955)
('bbaaca', 0.8600000000000136)
('aabbcc', 0.8700000000000045)
('aaabba', 0.8900000000000432)
('aabbab', 0.8700000000000045)
('abcccb', 0.8599999999999568)
('abcbcc', 0.8700000000000045)
('cabaac', 0.8799999999999955)
('bccacc', 0.8700000000000045)
('bcbbcc', 0.8700000000000045)
('caaaab', 0.8700000000000045)
('bbccbb', 0.8799999999999955)
('bcbbba', 0.8799999999999955)
('cabcac', 0.8799999999999955)
('cacaba', 0.8799999999999955)
('bbcaba', 0.8800000000000523)
('bcaaab', 0.8899999999999864)
('ccbbac', 0.8900000000000432)
('aabbba', 0.8899999999999864)
('acaacb', 0.9000000000000341)
('bcbbab', 0.8999999999999773)
('accccb', 0.8999999999999773)
('abacaa', 0.910000000000025)
('acbcaa', 0.910000000000025)
('cccbcc', 0.9200000000000159)
('acaabb', 0.910000000000025)
('accabc', 0.9200000000000159)
('cacabc', 0.9200000000000159)
('aabbaa', 0.9399999999999977)
('bcbaac', 0.9200000000000159)
('caaccb', 0.9300000000000068)
('bcbbcb', 0.9300000000000068)
('cacabb', 0.9399999999999977)
('bccbca', 0.9499999999999886)
('caccbb', 0.9500000000000455)
('cccacb', 0.9300000000000637)
('accbcc', 0.9499999999999318)
('acabcc', 0.9599999999999227)
('cacbaa', 0.9599999999999227)
('bbaaaa', 0.9599999999999227)
('abcccc', 0.9700000000000273)
('bccccb', 0.9700000000000273)
('bbaaac', 0.9599999999999227)
('abcacb', 0.9700000000000273)
('abbccc', 0.9700000000000273)
('aaabbb', 0.9700000000000273)
('abacba', 0.9900000000000091)
('cabcca', 0.9800000000000182)
('bcbcbc', 0.9900000000000091)
('acabac', 0.9900000000000091)
('bcbbbb', 1.0)
('bbaabc', 0.9800000000000182)
('bbaaba', 1.0)
('aacbcc', 0.9900000000000091)
('bcbacb', 1.009999999999991)
('bcacaa', 1.0199999999999818)
('accaab', 1.0199999999999818)
('accbbc', 1.009999999999991)
('cabcab', 1.009999999999991)
('bbabbb', 1.0200000000000955)
('aacabc', 1.0199999999999818)
('accacb', 1.0299999999999727)
('ccbbbc', 1.0299999999999727)
('abbabb', 1.0399999999999636)
('caacbb', 1.0400000000000773)

Time taken to extract lstar-dfa: 401.4536340236664
number of states of the dfa: 417
returned flag: False
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'c'}, 'aaaa': {'a': 'aacca', 'b': 'bcbcbc', 'c': 'caacc'}, 'bcbcbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbabbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaaacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccab': {'a': 'bcbcbc', 'b': 'ccabb', 'c': 'ccabc'}, 'aacb': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'aacbc'}, 'acbcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcca': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bccac'}, 'acabc': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'cca': {'a': 'ccaa', 'b': 'ccab', 'c': 'aacca'}, 'abaacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccc': {'a': 'ccca', 'b': 'cccb', 'c': 'cccc'}, 'aacbc': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'bcbca': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'aacca': {'a': 'aaccaa', 'b': 'bcbcbc', 'c': 'aaccaa'}, 'ccabbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabc': {'a': 'aabca', 'b': 'aabcb', 'c': 'bcbcbc'}, 'aca': {'a': 'acaa', 'b': 'acab', 'c': 'aacca'}, 'abaa': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'abaac'}, 'abab': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'acbbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaba': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'abcc': {'a': 'bcbcbc', 'b': 'abccb', 'c': 'abccc'}, 'abbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accc': {'a': 'aaccaa', 'b': 'bcbcbc', 'c': 'aacca'}, 'ccba': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'ccca': {'a': 'aaccaa', 'b': 'cccab', 'c': 'aacca'}, 'acbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acaba': {'a': 'bcbcbc', 'b': 'ba', 'c': 'bcbcbc'}, 'acba': {'a': 'acbaa', 'b': 'acbab', 'c': 'bcbcbc'}, 'abcba': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'abacb': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'acbca': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'acabb': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'abbab': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bccbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbaa': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'aabbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabbc': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'abacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacaa': {'a': 'aaccaa', 'b': 'bcbcbc', 'c': 'aaccaa'}, 'accbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abac': {'a': 'abaca', 'b': 'abacb', 'c': 'bcbcbc'}, 'caacc': {'a': 'aaccaa', 'b': 'bcbcbc', 'c': 'aaccaa'}, 'bcbb': {'a': 'bcbba', 'b': 'bcbbb', 'c': 'bcbbc'}, 'caab': {'a': 'caaba', 'b': 'bcbcbc', 'c': 'caabc'}, 'bcbbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbbb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'abcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcab': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'acbaa': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'cabba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcccc': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'aaccaa': {'a': 'aaccaa', 'b': 'ba', 'c': 'aaccaa'}, 'abaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabca': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'abcccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcacac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcc': {'a': 'bcbcbc', 'b': 'bbccb', 'c': 'bbccc'}, 'bbcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbab': {'a': 'bbaba', 'b': 'bbabb', 'c': 'bbabc'}, 'aba': {'a': 'abaa', 'b': 'abab', 'c': 'abac'}, 'aabaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accb': {'a': 'bcbcbc', 'b': 'accbb', 'c': 'accbc'}, 'ccb': {'a': 'ccba', 'b': 'ccbb', 'c': 'ccbc'}, 'cacabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aababc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabab': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'abbc': {'a': 'bcbcbc', 'b': 'abbcb', 'c': 'abbcc'}, 'ca': {'a': 'caa', 'b': 'cab', 'c': 'cac'}, 'cacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbcb': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'acbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbba': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'abbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcb': {'a': 'abcba', 'b': 'abcbb', 'c': 'abcbc'}, 'ccbcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabcb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'cbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcbb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'aabbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbabb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bccbb': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'acabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'a': {'a': 'aa', 'b': 'ab', 'c': 'ac'}, 'abbbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccabc': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'abaacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccc': {'a': 'aaccaa', 'b': 'ccccb', 'c': 'aaccaa'}, 'bcbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabca': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bcaaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcac': {'a': 'bcaca', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'ba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcabac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbb': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bbbbc'}, 'bcaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ababa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbca': {'a': 'bcbcbc', 'b': 'bbcab', 'c': 'bcbcbc'}, 'caabac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbc': {'a': 'ccbca', 'b': 'ccbcb', 'c': 'ccbcc'}, 'cacbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabcb': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'ccbcb': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'abbccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccab': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'acbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abccb': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'bbacc': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'aaabba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caccb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'aabbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacc': {'a': 'aaccaa', 'b': 'caccb', 'c': 'aaccaa'}, 'aaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ababc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acaac': {'a': 'aaccaa', 'b': 'bcbcbc', 'c': 'aaccaa'}, 'bcaba': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'caca': {'a': 'aacca', 'b': 'cacab', 'c': 'aacca'}, 'bbbbc': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'bcab': {'a': 'bcaba', 'b': 'bcabb', 'c': 'bcbcbc'}, 'cabbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaa': {'a': 'aacca', 'b': 'bcbcbc', 'c': 'aaccaa'}, 'acbbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcbc': {'a': 'bcbcbc', 'b': 'ba', 'c': 'bcbcbc'}, 'ccbcc': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'cabac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccca': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'ccbcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaba': {'a': 'aabaa', 'b': 'aabab', 'c': 'aabac'}, 'aacc': {'a': 'aacca', 'b': 'bcbcbc', 'c': 'aaccaa'}, 'acccc': {'a': 'aaccaa', 'b': 'bcbcbc', 'c': 'aaccaa'}, 'cccbb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bbbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cab': {'a': 'caba', 'b': 'cabb', 'c': 'cabc'}, 'bbaaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accac': {'a': 'aaccaa', 'b': 'bcbcbc', 'c': 'aaccaa'}, 'aaaaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acca': {'a': 'aacca', 'b': 'accab', 'c': 'aacca'}, 'abcaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcbc': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'aaaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaaa': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bbacaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbc': {'a': 'bbbca', 'b': 'bcbcbc', 'c': 'bbbcc'}, 'bbbabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acab': {'a': 'acaba', 'b': 'acabb', 'c': 'acabc'}, 'bcacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caa': {'a': 'caaa', 'b': 'caab', 'c': 'caac'}, 'aabb': {'a': 'aabba', 'b': 'aabbb', 'c': 'aabbc'}, 'cac': {'a': 'caca', 'b': 'cacb', 'c': 'cacc'}, 'abcbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbaa': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'abcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bc': {'a': 'bca', 'b': 'bcb', 'c': 'bcc'}, 'bcbbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbab': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bccc': {'a': 'bccca', 'b': 'bcccb', 'c': 'bcccc'}, 'bbc': {'a': 'bbca', 'b': 'bbcb', 'c': 'bbcc'}, 'ccabbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acaabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccccbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbbb': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'abccc': {'a': 'ba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'c': {'a': 'ca', 'b': 'cb', 'c': 'cc'}, 'acbaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accaa': {'a': 'aaccaa', 'b': 'bcbcbc', 'c': 'aaccaa'}, 'acabba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbac': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'aacab': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'aaaac': {'a': 'aaccaa', 'b': 'bcbcbc', 'c': 'aaccaa'}, 'aaaaa': {'a': 'aaccaa', 'b': 'bcbcbc', 'c': 'aaccaa'}, 'bcbba': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'ccbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcac': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'acbcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbb': {'a': 'acbba', 'b': 'acbbb', 'c': 'bcbcbc'}, 'aaabc': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'aaac': {'a': 'aaccaa', 'b': 'bcbcbc', 'c': 'aaccaa'}, 'aabac': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'bccbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaa': {'a': 'bcaaa', 'b': 'bcaab', 'c': 'bcbcbc'}, 'bbabc': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'acaabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abaca': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'acaab': {'a': 'ba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'accbb': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'cabcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaab': {'a': 'bcbcbc', 'b': 'ba', 'c': 'bcbcbc'}, 'abc': {'a': 'abca', 'b': 'abcb', 'c': 'abcc'}, 'cabcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabba': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'ccbb': {'a': 'ccbba', 'b': 'ccbbb', 'c': 'ccbbc'}, 'cabaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccabb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bbbccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbaa': {'a': 'ba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'b': {'a': 'ba', 'b': 'bb', 'c': 'bc'}, 'aaccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccbc': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'cccba': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bbabca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbba': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'accacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbb': {'a': 'bbba', 'b': 'bbbb', 'c': 'bbbc'}, 'bca': {'a': 'bcaa', 'b': 'bcab', 'c': 'bcac'}, 'bbbca': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'cccabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabaa': {'a': 'ba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'ccbba': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'abba': {'a': 'abbaa', 'b': 'abbab', 'c': 'bcbcbc'}, 'abbb': {'a': 'abbba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'acac': {'a': 'aaccaa', 'b': 'bcbcbc', 'c': 'aaccaa'}, 'aaabbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccba': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'acabac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbac': {'a': 'bbaca', 'b': 'bcbcbc', 'c': 'bbacc'}, 'abaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ababb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaab': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'bcbc': {'a': 'bcbca', 'b': 'bcbcb', 'c': 'bcbcc'}, 'bcbabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacac': {'a': 'aaccaa', 'b': 'bcbcbc', 'c': 'aaccaa'}, 'abcccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaa': {'a': 'bbaaa', 'b': 'bbaab', 'c': 'bbaac'}, 'ccaab': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'bcccb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bbabcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaca': {'a': 'aaccaa', 'b': 'aacab', 'c': 'aaccaa'}, 'cb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'ac': {'a': 'aca', 'b': 'acb', 'c': 'acc'}, 'ccbcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaaa': {'a': 'aaccaa', 'b': 'bcbcbc', 'c': 'aaccaa'}, 'cccac': {'a': 'aaccaa', 'b': 'bcbcbc', 'c': 'aaccaa'}, 'ccabcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbccc': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'bbcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbbc': {'a': 'ba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'ccbbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abca': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'abcac'}, 'bbcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbab': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'acc': {'a': 'acca', 'b': 'accb', 'c': 'accc'}, 'bcacaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabbb': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'accaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaca': {'a': 'bcbcbc', 'b': 'ba', 'c': 'bcbcbc'}, 'bbaaa': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bba': {'a': 'bbaa', 'b': 'bbab', 'c': 'bbac'}, 'bcba': {'a': 'bcbaa', 'b': 'bcbab', 'c': 'bcbac'}, 'aaa': {'a': 'aaaa', 'b': 'aaab', 'c': 'aacca'}, 'ccccb': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'cc': {'a': 'cca', 'b': 'ccb', 'c': 'ccc'}, 'acaacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acaa': {'a': 'aaccaa', 'b': 'acaab', 'c': 'aacca'}, 'caaba': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'abbcc': {'a': 'ba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bcaaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbba': {'a': 'bbbaa', 'b': 'bbbab', 'c': 'bcbcbc'}, 'ccac': {'a': 'aaccaa', 'b': 'bcbcbc', 'c': 'aaccaa'}, 'aabaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabc': {'a': 'cabca', 'b': 'cabcb', 'c': 'cabcc'}, 'cacb': {'a': 'cacba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'abaac': {'a': 'ba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'aab': {'a': 'aaba', 'b': 'aabb', 'c': 'aabc'}, 'ccbbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcabb': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'accaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbcbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbcb': {'a': 'bcbcbc', 'b': 'ba', 'c': 'bcbcbc'}, 'cccbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccb': {'a': 'bccba', 'b': 'bccbb', 'c': 'bccbc'}, 'cccbc': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'bbcb': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bbcbc'}, 'aaacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ab': {'a': 'aba', 'b': 'abb', 'c': 'abc'}, 'aaab': {'a': 'bcbcbc', 'b': 'aaabb', 'c': 'aaabc'}, 'bccaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbbb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bbccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacab': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bbbaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcccac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccac': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'cabcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaabca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bb': {'a': 'bba', 'b': 'bbb', 'c': 'bbc'}, 'abccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caac': {'a': 'aaccaa', 'b': 'bcbcbc', 'c': 'aacca'}, 'bcb': {'a': 'bcba', 'b': 'bcbb', 'c': 'bcbc'}, 'accabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaabb': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'abacba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbc': {'a': 'acbca', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'caba': {'a': 'cabaa', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bbacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbc': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'aaaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcc': {'a': 'bcca', 'b': 'bccb', 'c': 'bccc'}, 'bcbbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbccb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'acabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accab': {'a': 'bcbcbc', 'b': 'ba', 'c': 'bcbcbc'}, 'cabaa': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'bbcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcabbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaa': {'a': 'aaccaa', 'b': 'ccaab', 'c': 'aaccaa'}, 'ccbbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacba': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'abcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaac': {'a': 'bcbcbc', 'b': 'ba', 'c': 'bcbcbc'}, 'cacacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbab': {'a': 'ba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'ccbccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabb': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'cabbc'}, 'aabaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aac': {'a': 'aaca', 'b': 'aacb', 'c': 'aacc'}, 'abb': {'a': 'abba', 'b': 'abbb', 'c': 'abbc'}, 'accbc': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'bbbcc': {'a': 'ba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bbaca': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'bcbcc': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'aacabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabcc': {'a': 'bcbcbc', 'b': 'ba', 'c': 'bcbcbc'}, 'ccbca': {'a': 'ba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'caabc': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'aa': {'a': 'aaa', 'b': 'aab', 'c': 'aac'}, 'acb': {'a': 'acba', 'b': 'acbb', 'c': 'acbc'}, 'cccb': {'a': 'cccba', 'b': 'cccbb', 'c': 'cccbc'}, 'ccbbc': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}}
target  query explanation status  test accuracy rnn score explanation score explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states lstar explanation score lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  false       false   True          100.0      None              None                              None         0.359402          None            None              []          0         0         0          417                    None                                    None             401.453634        False      0.1    0.1
target: F(aUb)
query: false


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.10837936401367188  s
EQ test took  0.0006444454193115234  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.1208341121673584  s
EQ test took  0.13823723793029785  s


epsilon= 0.1 delta= 0.05 max_trace_length= 50
query: false
final ltl:  false

Time taken to extract ltl: 0.37180304527282715
Interrupted due to time limit
overall guided extraction time took: 402.58000000000004
generated counterexamples were: (format: (counterexample, counterexample generation time))
('', 0.0)
('b', 0.01999999999998181)
('cb', 0.01999999999998181)
('bb', 0.029999999999972715)
('ab', 0.03999999999996362)
('bc', 0.03999999999996362)
('ba', 0.05000000000006821)
('bba', 0.049999999999954525)
('cba', 0.06000000000005912)
('cbb', 0.05999999999994543)
('bcc', 0.07000000000005002)
('abc', 0.08000000000004093)
('bbb', 0.07999999999992724)
('bca', 0.09000000000003183)
('aba', 0.09000000000003183)
('bcb', 0.09999999999990905)
('bbc', 0.09999999999990905)
('abb', 0.11000000000001364)
('cbc', 0.12000000000000455)
('bcbb', 0.12999999999999545)
('ccb', 0.11000000000001364)
('cab', 0.12000000000000455)
('bcac', 0.12999999999999545)
('cbcc', 0.13999999999998636)
('aabb', 0.12999999999999545)
('aab', 0.12999999999999545)
('acb', 0.14000000000010004)
('bcbc', 0.13999999999998636)
('bbab', 0.14999999999997726)
('bccb', 0.16000000000008185)
('cabb', 0.15999999999996817)
('abab', 0.17000000000007276)
('acba', 0.16999999999995907)
('caab', 0.17000000000007276)
('bbbc', 0.19000000000005457)
('abbb', 0.17999999999994998)
('acbc', 0.19000000000005457)
('abcb', 0.18999999999994088)
('cbab', 0.1999999999999318)
('ccbb', 0.21000000000003638)
('acab', 0.20000000000004547)
('abbc', 0.21000000000003638)
('bbac', 0.22000000000002728)
('accb', 0.2300000000000182)
('aacb', 0.2300000000000182)
('abcc', 0.2300000000000182)
('acbb', 0.2400000000000091)
('bbaa', 0.25)
('ccba', 0.2599999999999909)
('cabc', 0.2700000000000955)
('bbcc', 0.2599999999999909)
('abaa', 0.2699999999999818)
('cbbb', 0.2699999999999818)
('bbcb', 0.2699999999999818)
('caba', 0.2800000000000864)
('abca', 0.2999999999999545)
('bbba', 0.3100000000000591)
('bbca', 0.2999999999999545)
('cbba', 0.30999999999994543)
('cbac', 0.3100000000000591)
('bbbb', 0.3300000000000409)
('cbcb', 0.3300000000000409)
('bcaa', 0.3300000000000409)
('ccab', 0.3300000000000409)
('cbaa', 0.35000000000002274)
('abba', 0.35000000000002274)
('bccc', 0.36000000000001364)
('ccbc', 0.37000000000000455)
('abac', 0.36000000000001364)
('bcba', 0.37999999999999545)
('cbca', 0.38999999999998636)
('bcca', 0.39000000000010004)
('cbbc', 0.38999999999998636)
('bcab', 0.40000000000009095)
('bcbbb', 0.39999999999997726)
('cccb', 0.39999999999997726)
('bbcab', 0.4199999999999591)
('cacb', 0.39999999999997726)
('aaab', 0.42000000000007276)
('abcca', 0.44000000000005457)
('abbcb', 0.4499999999999318)
('bcbbc', 0.4500000000000455)
('abbac', 0.4500000000000455)
('abacb', 0.4699999999999136)
('ccbaa', 0.4500000000000455)
('cbbbc', 0.4599999999999227)
('ccbbc', 0.4500000000000455)
('abcba', 0.4800000000000182)
('cabbc', 0.4799999999999045)
('abaaa', 0.5)
('cbbac', 0.4900000000000091)
('bbaba', 0.4900000000000091)
('cabbb', 0.5)
('cbcbc', 0.5)
('cbcba', 0.5199999999999818)
('bcabc', 0.5299999999999727)
('cccab', 0.5399999999999636)
('bbaca', 0.5400000000000773)
('abcab', 0.5399999999999636)
('accba', 0.5400000000000773)
('bbaac', 0.5399999999999636)
('cccbb', 0.5500000000000682)
('bbabb', 0.5499999999999545)
('ccbba', 0.57000000000005)
('caabb', 0.5800000000000409)
('caccb', 0.5800000000000409)
('cbacc', 0.5699999999999363)
('bcbaa', 0.5800000000000409)
('abbbb', 0.6000000000000227)
('ababb', 0.6000000000000227)
('cbcaa', 0.6099999999999)
('cabba', 0.6000000000000227)
('abccb', 0.6100000000000136)
('cabab', 0.6200000000000045)
('aacbb', 0.6299999999999955)
('abbba', 0.6399999999999864)
('caabc', 0.6399999999999864)
('bcbab', 0.6399999999999864)
('bbaab', 0.6499999999999773)
('bcbca', 0.6699999999999591)
('ccccb', 0.6599999999999682)
('bbcaa', 0.67999999999995)
('abaac', 0.67999999999995)
('cbbcb', 0.6800000000000637)
('accbc', 0.6900000000000546)
('ababa', 0.6999999999999318)
('cbaaa', 0.6800000000000637)
('bcaab', 0.6899999999999409)
('abcbc', 0.6899999999999409)
('cbabb', 0.7000000000000455)
('acbcb', 0.6999999999999318)
('bccaa', 0.7200000000000273)
('caaba', 0.7099999999999227)
('bbccb', 0.7300000000000182)
('bccba', 0.7300000000000182)
('bcaac', 0.7400000000000091)
('bccca', 0.75)
('ccbca', 0.7600000000001046)
('cabcc', 0.7700000000000955)
('aacba', 0.75)
('abccc', 0.7699999999999818)
('bbbca', 0.7899999999999636)
('bbabc', 0.8000000000000682)
('acccb', 0.7999999999999545)
('acbaa', 0.8100000000000591)
('abbab', 0.7799999999999727)
('acbcc', 0.7900000000000773)
('cbcac', 0.7899999999999636)
('cbbcc', 0.82000000000005)
('cacab', 0.82000000000005)
('aaacb', 0.82000000000005)
('bbacc', 0.8199999999999363)
('cbaca', 0.8299999999999272)
('caaab', 0.8399999999999181)
('aaabb', 0.8400000000000318)
('ccabc', 0.8600000000000136)
('bccac', 0.8600000000000136)
('bcaaa', 0.8500000000000227)
('bbcac', 0.8500000000000227)
('cbbab', 0.8700000000000045)
('bcacb', 0.8700000000000045)
('abcbb', 0.9100000000000819)
('abbaa', 0.8899999999999864)
('aaccb', 0.9099999999999682)
('aaaba', 0.9099999999999682)
('cbcca', 0.9399999999999409)
('cccba', 0.9500000000000455)
('bbaaa', 0.9399999999999409)
('bcabb', 0.9600000000000364)
('bcbcc', 0.9500000000000455)
('acbbc', 0.9700000000000273)
('ccabb', 0.9699999999999136)
('ccaba', 0.9800000000000182)
('acbbb', 0.9799999999999045)
('cabaa', 0.9900000000000091)
('bcbac', 0.9700000000000273)
('acabb', 0.9900000000000091)
('bbacb', 1.0)
('bcaca', 1.009999999999991)
('acacb', 1.009999999999991)
('abbbc', 1.0200000000000955)
('bbbac', 1.0299999999999727)
('abcac', 1.0299999999999727)
('bbbcb', 1.0299999999999727)
('ccbcb', 1.0400000000000773)
('cacbc', 1.0399999999999636)
('bbbbc', 1.0600000000000591)
('cbccc', 1.0699999999999363)
('bbcba', 1.080000000000041)
('aacab', 1.0799999999999272)
('acaba', 1.0900000000000318)
('bbcca', 1.080000000000041)
('cbaac', 1.0900000000000318)
('acaab', 1.1000000000000227)
('abacc', 1.1100000000000136)
('cabac', 1.0900000000000318)
('ccacb', 1.1299999999999955)
('cabca', 1.1100000000000136)
('accab', 1.1399999999999864)
('cbacb', 1.1499999999999773)
('bcccc', 1.1399999999999864)
('aaabc', 1.1399999999999864)
('cbcab', 1.1499999999999773)
('acbac', 1.1299999999999955)
('ccbcc', 1.1299999999999955)
('cbbaa', 1.1200000000000045)
('ccbab', 1.1399999999999864)
('abaca', 1.1499999999999773)
('accbb', 1.1599999999999682)
('bcbcb', 1.1599999999999682)
('bcaba', 1.169999999999959)
('abaab', 1.1800000000000637)
('cbaab', 1.1700000000000728)
('bbcbb', 1.1899999999999409)
('ccbac', 1.2100000000000364)
('cbaba', 1.2000000000000455)
('bccbc', 1.2199999999999136)
('acbca', 1.2200000000000273)
('cccbc', 1.2200000000000273)
('aaaab', 1.2300000000000182)
('cabcb', 1.240000000000009)
('aacbc', 1.25)
('bbbab', 1.259999999999991)
('bbccc', 1.25)
('bbcbc', 1.2900000000000773)
('acabc', 1.2699999999999818)
('cacba', 1.2699999999999818)
('acbba', 1.2900000000000773)
('ababc', 1.3000000000000682)
('bbbaa', 1.3000000000000682)
('abbca', 1.3100000000000591)
('cbbbb', 1.32000000000005)
('caacb', 1.3099999999999454)
('bbbba', 1.330000000000041)
('bbbbb', 1.3400000000000318)
('bccab', 1.3400000000000318)
('cbabc', 1.330000000000041)
('cacbb', 1.349999999999909)
('acbab', 1.3500000000000227)
('cbbca', 1.3700000000000045)
('abbcc', 1.3700000000000045)
('cbccb', 1.3700000000000045)
('bcacc', 1.3900000000001)
('abcaa', 1.3899999999999864)
('bcccb', 1.3999999999999773)
('ccaab', 1.419999999999959)
('cbbba', 1.4400000000000546)
('bbbcc', 1.4600000000000364)
('cbcbb', 1.4400000000000546)
('ccbbb', 1.4499999999999318)
('bcbba', 1.4599999999999227)
('bccbb', 1.4800000000000182)
('abcacb', 1.4699999999999136)
('bcacac', 1.4400000000000546)
('cbabcc', 1.4600000000000364)
('ccbbcc', 1.4799999999999045)
('bcabcc', 1.4700000000000273)
('cbaacc', 1.4800000000000182)
('cabccb', 1.5)
('ccaabb', 1.5)
('bbabcb', 1.509999999999991)
('cbcbaa', 1.5)
('cabcab', 1.5200000000000955)
('bbbbac', 1.509999999999991)
('cccbac', 1.5299999999999727)
('bbacab', 1.5300000000000864)
('abcaba', 1.5299999999999727)
('bbaabb', 1.5299999999999727)
('cbbabb', 1.5400000000000773)
('bcabaa', 1.5499999999999545)
('aacbac', 1.5499999999999545)
('cbbacb', 1.580000000000041)
('bbcbcc', 1.6000000000000227)
('caacba', 1.5699999999999363)
('abbaba', 1.6000000000000227)
('abbcbb', 1.57000000000005)
('bcaaca', 1.5899999999999181)
('cbacab', 1.6000000000000227)
('caabbc', 1.6000000000000227)
('ababca', 1.6200000000000045)
('acbcca', 1.6099999999999)
('acbaca', 1.6299999999999955)
('bbabab', 1.6200000000000045)
('abaccb', 1.6299999999999955)
('bbaccb', 1.6400000000001)
('cabbcc', 1.650000000000091)
('cbbbbb', 1.6499999999999773)
('aacabb', 1.6499999999999773)
('aacccb', 1.6700000000000728)
('cbcacb', 1.6600000000000819)
('abcbcc', 1.6499999999999773)
('ccaaba', 1.669999999999959)
('cabacb', 1.669999999999959)
('cbccca', 1.6900000000000546)
('abbaab', 1.6800000000000637)
('bcbbab', 1.75)
('bbbbab', 1.75)
('acabab', 1.7300000000000182)
('abbbbc', 1.7000000000000455)
('bcaaac', 1.7200000000000273)
('bbccab', 1.7799999999999727)
('bbbcaa', 1.7399999999998954)
('cbabaa', 1.7899999999999636)
('bcbbac', 1.759999999999991)
('bccabb', 1.759999999999991)
('cbccbb', 1.740000000000009)
('accbaa', 1.759999999999991)
('acccbc', 1.7699999999999818)
('cacacb', 1.7899999999999636)
('bcbcaa', 1.7899999999999636)
('abbbca', 1.7799999999999727)
('bcbacc', 1.8700000000000045)
('abcccb', 1.7999999999999545)

Time taken to extract lstar-dfa: 402.5740158557892
number of states of the dfa: 345
returned flag: False
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'c'}, 'aaaa': {'a': 'aaaaa', 'b': 'cabccb', 'c': 'aaaaa'}, 'ccab': {'a': 'cabccb', 'b': 'cabccb', 'c': 'cabccb'}, 'cbcb': {'a': 'cbcba', 'b': 'cabccb', 'c': 'cabccb'}, 'aacb': {'a': 'aacba', 'b': 'cabccb', 'c': 'cabccb'}, 'cabccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcabc': {'a': 'ba', 'b': 'ba', 'c': 'cabccb'}, 'bcbcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcca': {'a': 'cabccb', 'b': 'bccab', 'c': 'cabccb'}, 'acabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cca': {'a': 'ccaa', 'b': 'ccab', 'c': 'aaaa'}, 'caaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbabc': {'a': 'ba', 'b': 'ba', 'c': 'cabccb'}, 'ccc': {'a': 'aaaa', 'b': 'cccb', 'c': 'aaaa'}, 'aacbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbca': {'a': 'cabccb', 'b': 'ba', 'c': 'ba'}, 'aca': {'a': 'aaaa', 'b': 'acab', 'c': 'aaaa'}, 'abaa': {'a': 'cabccb', 'b': 'cabccb', 'c': 'cabccb'}, 'abab': {'a': 'cabccb', 'b': 'cabccb', 'c': 'ababc'}, 'cbba': {'a': 'cabccb', 'b': 'cbbab', 'c': 'cbbac'}, 'bbaba': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'abcc': {'a': 'cabccb', 'b': 'cabccb', 'c': 'cabccb'}, 'abbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accc': {'a': 'aaaaa', 'b': 'acccb', 'c': 'aaaaa'}, 'ccba': {'a': 'cabccb', 'b': 'cabccb', 'c': 'cabccb'}, 'ccca': {'a': 'aaaaa', 'b': 'cabccb', 'c': 'aaaaa'}, 'acbcc': {'a': 'cabccb', 'b': 'ba', 'c': 'ba'}, 'acaba': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'acba': {'a': 'cabccb', 'b': 'cabccb', 'c': 'acbac'}, 'abcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbab': {'a': 'cabccb', 'b': 'ba', 'c': 'ba'}, 'abbaa': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'cbcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbba': {'a': 'ba', 'b': 'cabccb', 'c': 'cabccb'}, 'cbbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacc': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'abac': {'a': 'cabccb', 'b': 'cabccb', 'c': 'abacc'}, 'cbacab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbb': {'a': 'bcbba', 'b': 'cabccb', 'c': 'cabccb'}, 'caab': {'a': 'cabccb', 'b': 'caabb', 'c': 'cabccb'}, 'ccbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcab': {'a': 'cabccb', 'b': 'ba', 'c': 'ba'}, 'bbcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbac': {'a': 'cbaca', 'b': 'cabccb', 'c': 'cabccb'}, 'cbaca': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'bcccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caabbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ababca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabca': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'ccbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcacac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcc': {'a': 'bbcca', 'b': 'cabccb', 'c': 'cabccb'}, 'bbcca': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'bbab': {'a': 'bbaba', 'b': 'cabccb', 'c': 'bbabc'}, 'aba': {'a': 'abaa', 'b': 'abab', 'c': 'abac'}, 'accbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accb': {'a': 'accba', 'b': 'cabccb', 'c': 'cabccb'}, 'ccb': {'a': 'ccba', 'b': 'ccbb', 'c': 'ccbc'}, 'cbccc': {'a': 'cabccb', 'b': 'ba', 'c': 'ba'}, 'accba': {'a': 'cabccb', 'b': 'ba', 'c': 'ba'}, 'caacba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbc': {'a': 'cabccb', 'b': 'abbcb', 'c': 'cabccb'}, 'ca': {'a': 'caa', 'b': 'cab', 'c': 'cac'}, 'cacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbcb': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'acbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbbb': {'a': 'ba', 'b': 'ba', 'c': 'cabccb'}, 'abcb': {'a': 'cabccb', 'b': 'cabccb', 'c': 'abcbc'}, 'abaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbb': {'a': 'cbba', 'b': 'cbbb', 'c': 'cbbc'}, 'abcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbaa': {'a': 'cabccb', 'b': 'cabccb', 'c': 'cbaac'}, 'cbccb': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'bbaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caacb': {'a': 'cabccb', 'b': 'ba', 'c': 'ba'}, 'bbaabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'a': {'a': 'aa', 'b': 'ab', 'c': 'ac'}, 'cbcba': {'a': 'cabccb', 'b': 'ba', 'c': 'ba'}, 'abbbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccc': {'a': 'aaaaa', 'b': 'cabccb', 'c': 'aaaaa'}, 'bcac': {'a': 'bcaca', 'b': 'cabccb', 'c': 'cabccb'}, 'ba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbb': {'a': 'bbbba', 'b': 'cabccb', 'c': 'cabccb'}, 'ababa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaac': {'a': 'cabccb', 'b': 'ba', 'c': 'ba'}, 'bbca': {'a': 'cabccb', 'b': 'cabccb', 'c': 'cabccb'}, 'ccbc': {'a': 'cabccb', 'b': 'cabccb', 'c': 'cabccb'}, 'cacbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbb': {'a': 'cabccb', 'b': 'cbbbb', 'c': 'cabccb'}, 'ccbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbac': {'a': 'cabccb', 'b': 'ba', 'c': 'ba'}, 'abccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbacc': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'bcacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacc': {'a': 'aaaaa', 'b': 'cabccb', 'c': 'aaaaa'}, 'aaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ababc': {'a': 'cabccb', 'b': 'ba', 'c': 'ba'}, 'bbcbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaba': {'a': 'cabccb', 'b': 'ba', 'c': 'ba'}, 'caca': {'a': 'aaaaa', 'b': 'cabccb', 'c': 'aaaa'}, 'abbbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbbb': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'cbcbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcab': {'a': 'bcaba', 'b': 'cabccb', 'c': 'bcabc'}, 'cabbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaa': {'a': 'aaaaa', 'b': 'cabccb', 'c': 'aaaaa'}, 'abcbc': {'a': 'ba', 'b': 'ba', 'c': 'cabccb'}, 'ccbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabac': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'bccca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacc': {'a': 'aaaaa', 'b': 'cabccb', 'c': 'aaaa'}, 'cba': {'a': 'cbaa', 'b': 'cbab', 'c': 'cbac'}, 'cccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbacab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cab': {'a': 'caba', 'b': 'cabb', 'c': 'cabc'}, 'bcbbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acca': {'a': 'aaaaa', 'b': 'cabccb', 'c': 'aaaaa'}, 'cbbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcbc': {'a': 'ba', 'b': 'ba', 'c': 'cabccb'}, 'cccbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaaa': {'a': 'ba', 'b': 'ba', 'c': 'cabccb'}, 'bcbbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbc': {'a': 'bbbca', 'b': 'cabccb', 'c': 'cabccb'}, 'ccbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acab': {'a': 'acaba', 'b': 'cabccb', 'c': 'cabccb'}, 'bcacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caabb': {'a': 'ba', 'b': 'ba', 'c': 'cabccb'}, 'caa': {'a': 'aaaa', 'b': 'caab', 'c': 'caac'}, 'cbccca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cac': {'a': 'caca', 'b': 'cacb', 'c': 'aaaa'}, 'bbbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bc': {'a': 'bca', 'b': 'bcb', 'c': 'bcc'}, 'bbbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccc': {'a': 'cabccb', 'b': 'cabccb', 'c': 'cabccb'}, 'bcaaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbc': {'a': 'bbca', 'b': 'bbcb', 'c': 'bbcc'}, 'cbcbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'c': {'a': 'ca', 'b': 'cb', 'c': 'cc'}, 'aaccc': {'a': 'aaaaa', 'b': 'cabccb', 'c': 'aaaaa'}, 'cbbac': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'cbbc': {'a': 'cabccb', 'b': 'cabccb', 'c': 'cabccb'}, 'bcbac': {'a': 'ba', 'b': 'ba', 'c': 'cabccb'}, 'aacab': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'cbbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaaaa': {'a': 'aaaaa', 'b': 'ba', 'c': 'aaaaa'}, 'bcbba': {'a': 'ba', 'b': 'cabccb', 'c': 'cabccb'}, 'ccbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcac': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'ccaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbb': {'a': 'cabccb', 'b': 'cabccb', 'c': 'cabccb'}, 'aaac': {'a': 'aaaaa', 'b': 'cabccb', 'c': 'aaaaa'}, 'aaabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaa': {'a': 'bcaaa', 'b': 'cabccb', 'c': 'bcaac'}, 'bbabc': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'cbcc': {'a': 'cabccb', 'b': 'cbccb', 'c': 'cbccc'}, 'acccb': {'a': 'ba', 'b': 'ba', 'c': 'cabccb'}, 'acaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaab': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'abc': {'a': 'abca', 'b': 'abcb', 'c': 'abcc'}, 'cbbabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbb': {'a': 'cabccb', 'b': 'cabccb', 'c': 'ccbbc'}, 'ccabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acccbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'b': {'a': 'ba', 'b': 'bb', 'c': 'bc'}, 'bccbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccba': {'a': 'ba', 'b': 'ba', 'c': 'cabccb'}, 'acbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbb': {'a': 'bbba', 'b': 'bbbb', 'c': 'bbbc'}, 'bca': {'a': 'bcaa', 'b': 'bcab', 'c': 'bcac'}, 'bbbca': {'a': 'cabccb', 'b': 'ba', 'c': 'ba'}, 'cbaba': {'a': 'cabccb', 'b': 'ba', 'c': 'ba'}, 'ccbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abba': {'a': 'abbaa', 'b': 'abbab', 'c': 'cabccb'}, 'abbb': {'a': 'cabccb', 'b': 'abbbb', 'c': 'abbbc'}, 'cbbacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acac': {'a': 'aaaaa', 'b': 'cabccb', 'c': 'aaaaa'}, 'bccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbac': {'a': 'bbaca', 'b': 'cabccb', 'c': 'bbacc'}, 'abaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ababb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbc': {'a': 'bcbca', 'b': 'cabccb', 'c': 'cabccb'}, 'cacac': {'a': 'aaaaa', 'b': 'cabccb', 'c': 'aaaaa'}, 'bbaa': {'a': 'cabccb', 'b': 'bbaab', 'c': 'cabccb'}, 'bbbbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaab': {'a': 'cabccb', 'b': 'cabccb', 'c': 'ba'}, 'bcccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbabcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbaac': {'a': 'ba', 'b': 'ba', 'c': 'cabccb'}, 'cbabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaca': {'a': 'aaaaa', 'b': 'aacab', 'c': 'aaaaa'}, 'cb': {'a': 'cba', 'b': 'cbb', 'c': 'cbc'}, 'cbaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ac': {'a': 'aca', 'b': 'acb', 'c': 'acc'}, 'cbc': {'a': 'cbca', 'b': 'cbcb', 'c': 'cbcc'}, 'bbccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abca': {'a': 'cabccb', 'b': 'abcab', 'c': 'abcac'}, 'bbcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acc': {'a': 'aaaa', 'b': 'accb', 'c': 'accc'}, 'bcaca': {'a': 'ba', 'b': 'ba', 'c': 'cabccb'}, 'bbaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bba': {'a': 'bbaa', 'b': 'bbab', 'c': 'bbac'}, 'cbab': {'a': 'cbaba', 'b': 'cabccb', 'c': 'cbabc'}, 'bcba': {'a': 'cabccb', 'b': 'cabccb', 'c': 'bcbac'}, 'aaa': {'a': 'aaaa', 'b': 'aaab', 'c': 'aaaa'}, 'ccccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cc': {'a': 'cca', 'b': 'ccb', 'c': 'ccc'}, 'acaa': {'a': 'aaaaa', 'b': 'cabccb', 'c': 'aaaaa'}, 'abbaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbba': {'a': 'cabccb', 'b': 'cabccb', 'c': 'cabccb'}, 'ccac': {'a': 'aaaaa', 'b': 'cabccb', 'c': 'aaaaa'}, 'cabc': {'a': 'cabca', 'b': 'cabccb', 'c': 'cabcc'}, 'cacb': {'a': 'cabccb', 'b': 'cabccb', 'c': 'cabccb'}, 'abaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aab': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'aacba': {'a': 'ba', 'b': 'ba', 'c': 'cabccb'}, 'bbcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccb': {'a': 'cabccb', 'b': 'cabccb', 'c': 'cabccb'}, 'cccbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcb': {'a': 'cabccb', 'b': 'cabccb', 'c': 'bbcbc'}, 'aaacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ab': {'a': 'aba', 'b': 'abb', 'c': 'abc'}, 'aaab': {'a': 'cabccb', 'b': 'cabccb', 'c': 'cabccb'}, 'abcaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcac': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'cacab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbbc': {'a': 'cabccb', 'b': 'ba', 'c': 'ba'}, 'cbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bb': {'a': 'bba', 'b': 'bbb', 'c': 'bbc'}, 'cbcacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caac': {'a': 'aaaaa', 'b': 'caacb', 'c': 'aaaaa'}, 'bcb': {'a': 'bcba', 'b': 'bcbb', 'c': 'bcbc'}, 'cbacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caba': {'a': 'cabccb', 'b': 'cabccb', 'c': 'cabac'}, 'acbc': {'a': 'cabccb', 'b': 'cabccb', 'c': 'acbcc'}, 'bbacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbabab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbc': {'a': 'ba', 'b': 'ba', 'c': 'cabccb'}, 'aaaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcc': {'a': 'bcca', 'b': 'bccb', 'c': 'bccc'}, 'bbccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbab': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'aacabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaa': {'a': 'aaaaa', 'b': 'ccaab', 'c': 'aaaaa'}, 'cbabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acabab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabb': {'a': 'cabccb', 'b': 'cabccb', 'c': 'cabbc'}, 'bccabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbca': {'a': 'cabccb', 'b': 'cabccb', 'c': 'cbcac'}, 'cbbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aac': {'a': 'aaca', 'b': 'aacb', 'c': 'aacc'}, 'abb': {'a': 'abba', 'b': 'abbb', 'c': 'abbc'}, 'accbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaca': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'bcbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbaacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccab': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'ccbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabcc': {'a': 'ba', 'b': 'cabccb', 'c': 'ba'}, 'caabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aa': {'a': 'aaa', 'b': 'aab', 'c': 'aac'}, 'acb': {'a': 'acba', 'b': 'acbb', 'c': 'acbc'}, 'cccb': {'a': 'cccba', 'b': 'cabccb', 'c': 'cabccb'}, 'ccbbc': {'a': 'ba', 'b': 'ba', 'c': 'cabccb'}}
target  query explanation status  test accuracy rnn score explanation score explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states lstar explanation score lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  false       false   True          100.0      None              None                              None         0.371803          None            None              []          0         0         0          345                    None                                    None             402.574016        False      0.1   0.05
target: F(aUb)
query: false


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.13424348831176758  s
EQ test took  0.0006368160247802734  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.12828993797302246  s
EQ test took  0.18373489379882812  s


epsilon= 0.1 delta= 0.01 max_trace_length= 50
query: false
final ltl:  false

Time taken to extract ltl: 0.45055294036865234
Interrupted due to time limit
overall guided extraction time took: 400.40999999999997
generated counterexamples were: (format: (counterexample, counterexample generation time))
('', 0.0)
('b', 0.15000000000009095)
('bb', 0.17999999999994998)
('ba', 0.20000000000004547)
('bc', 0.1999999999999318)
('ab', 0.2400000000000091)
('bbb', 0.3000000000000682)
('cb', 0.2799999999999727)
('cbb', 0.34000000000003183)
('acb', 0.32999999999992724)
('bbc', 0.36000000000001364)
('bba', 0.38999999999998636)
('cab', 0.41000000000008185)
('abb', 0.4599999999999227)
('aab', 0.4500000000000455)
('cbc', 0.4700000000000273)
('abc', 0.5)
('bcb', 0.5299999999999727)
('cba', 0.5499999999999545)
('ccb', 0.5800000000000409)
('bcc', 0.6399999999999864)
('bca', 0.6699999999999591)
('aba', 0.6900000000000546)
('abac', 0.7200000000000273)
('cabb', 0.7400000000000091)
('cbcc', 0.7200000000000273)
('bbca', 0.75)
('bbcb', 0.7799999999999727)
('bccc', 0.8000000000000682)
('cacb', 0.8300000000000409)
('bbaa', 0.849999999999909)
('aabb', 0.8899999999999864)
('aacb', 0.8999999999999773)
('abcb', 0.9400000000000546)
('bbbc', 0.9599999999999227)
('abbc', 0.9699999999999136)
('bcba', 1.009999999999991)
('bcac', 1.0299999999999727)
('bbba', 1.0600000000000591)
('bcbb', 1.0899999999999181)
('cbcb', 1.1000000000000227)
('bcaa', 1.1399999999999864)
('bcca', 1.1599999999999682)
('acbc', 1.169999999999959)
('bcab', 1.2200000000000273)
('cbca', 1.240000000000009)
('cbaa', 1.2699999999999818)
('bbbb', 1.2899999999999636)
('abcc', 1.3199999999999363)
('abbb', 1.3500000000000227)
('abca', 1.3799999999999955)
('cbba', 1.3999999999998636)
('aaab', 1.4400000000000546)
('acab', 1.4500000000000455)
('cbac', 1.490000000000009)
('accb', 1.5)
('acbb', 1.5299999999999727)
('ccab', 1.5499999999999545)
('cbbb', 1.650000000000091)
('bbcc', 1.6800000000000637)
('bbac', 1.7300000000000182)
('ccbb', 1.75)
('cbbc', 1.7100000000000364)
('cbab', 1.740000000000009)
('aabc', 1.759999999999991)
('abab', 1.7999999999999545)
('ccbc', 1.8299999999999272)
('caab', 1.8600000000001273)
('abba', 1.8800000000001091)
('aaba', 1.8999999999998636)
('abaa', 1.8999999999998636)
('bccb', 1.9700000000000273)
('cabc', 2.009999999999991)
('caba', 2.0499999999999545)
('acba', 2.0399999999999636)
('bbab', 2.0900000000001455)
('cccb', 2.130000000000109)
('ccba', 2.1400000000001)
('bcbc', 2.1900000000000546)
('accbb', 2.2000000000000455)
('bbbbb', 2.2200000000000273)
('accba', 2.25)
('ccabb', 2.2799999999999727)
('accbc', 2.3199999999999363)
('cabac', 2.3500000000001364)
('aaacb', 2.369999999999891)
('bbacb', 2.410000000000082)
('bcabb', 2.4200000000000728)
('cbbba', 2.4500000000000455)
('bbaaa', 2.480000000000018)
('bcbcb', 2.4700000000000273)
('cbcaa', 2.5700000000001637)
('cccab', 2.5499999999999545)
('bccbb', 2.5699999999999363)
('cbcbc', 2.6399999999998727)
('acbba', 2.6200000000001182)
('cabaa', 2.660000000000082)
('cbccb', 2.660000000000082)
('bbccc', 2.7100000000000364)
('acbab', 2.740000000000009)
('bcbcc', 2.759999999999991)
('cbbca', 2.7899999999999636)
('aacbc', 2.8200000000001637)
('ccbab', 2.8299999999999272)
('ccabc', 2.880000000000109)
('aaaba', 2.9200000000000728)
('acbaa', 2.949999999999818)
('bcbbb', 2.959999999999809)
('cacab', 3.0)
('bbccb', 3.0299999999999727)
('caaab', 3.0599999999999454)
('abcca', 3.099999999999909)
('cbbcb', 3.089999999999918)
('bbbca', 3.1400000000001)
('accab', 3.1699999999998454)
('acabb', 3.1900000000000546)
('bcacc', 3.2200000000000273)
('bcbca', 3.25)
('aabcb', 3.259999999999991)
('cbaaa', 3.3199999999999363)
('aabcc', 3.339999999999918)
('acbbb', 3.4700000000000273)
('acbbc', 3.4500000000000455)
('bbcca', 3.509999999999991)
('bcaaa', 3.5299999999999727)
('ccbaa', 3.5299999999999727)
('aabac', 3.5299999999999727)
('abcab', 3.6099999999999)
('bccba', 3.6700000000000728)
('abcac', 3.6400000000001)
('abbbc', 3.7200000000000273)
('aabba', 3.6800000000000637)
('bbcbb', 3.759999999999991)
('abbab', 3.7899999999999636)
('acacb', 3.8099999999999454)
('ccbbb', 3.7999999999999545)
('aabbc', 3.849999999999909)
('ccaba', 3.9300000000000637)
('bbbcc', 3.9500000000000455)
('ccbbc', 4.0)
('cbacb', 4.039999999999964)
('cccbc', 3.9600000000000364)
('caabc', 4.0499999999999545)
('cccbb', 4.070000000000164)
('cabcc', 4.130000000000109)
('cbbcc', 4.129999999999882)
('bbaab', 4.130000000000109)
('abaac', 4.230000000000018)
('aabbb', 4.230000000000018)
('acabc', 4.269999999999982)
('abcbb', 4.330000000000155)
('cacbb', 4.379999999999882)
('abacc', 4.3599999999999)
('cbccc', 4.440000000000055)
('bcaac', 4.460000000000036)
('bbaac', 4.380000000000109)
('ccbba', 4.4699999999998)
('cbaca', 4.519999999999982)
('abbca', 4.539999999999964)
('abaca', 4.5900000000001455)
('ccccb', 4.6099999999999)
('bcaba', 4.6400000000001)
('ccbcc', 4.669999999999845)
('aacbb', 4.730000000000018)
('bcccc', 4.690000000000055)

Time taken to extract lstar-dfa: 400.4506711959839
number of states of the dfa: 186
returned flag: False
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'c'}, 'cbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccab': {'a': 'cbab', 'b': 'cbab', 'c': 'cbab'}, 'cccc': {'a': 'aaca', 'b': 'cbab', 'c': 'aaca'}, 'cbbc': {'a': 'cbab', 'b': 'cbab', 'c': 'cbab'}, 'cbcb': {'a': 'ba', 'b': 'ba', 'c': 'cbab'}, 'aaa': {'a': 'aaca', 'b': 'aaab', 'c': 'cccc'}, 'ccccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cc': {'a': 'cca', 'b': 'ccb', 'c': 'ccc'}, 'aacb': {'a': 'ba', 'b': 'cbab', 'c': 'cbab'}, 'bcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cca': {'a': 'aaca', 'b': 'ccab', 'c': 'aaca'}, 'acabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccc': {'a': 'cccc', 'b': 'cccb', 'c': 'cccc'}, 'bcac': {'a': 'ba', 'b': 'ba', 'c': 'cbab'}, 'ba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbb': {'a': 'ba', 'b': 'cbab', 'c': 'ba'}, 'aacbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabc': {'a': 'ba', 'b': 'ba', 'c': 'cbab'}, 'cacb': {'a': 'ba', 'b': 'cbab', 'c': 'ba'}, 'bcbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aab': {'a': 'aaba', 'b': 'aabb', 'c': 'aabc'}, 'bcaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabc': {'a': 'ba', 'b': 'cbab', 'c': 'cbab'}, 'aca': {'a': 'aaca', 'b': 'acab', 'c': 'cccc'}, 'abaa': {'a': 'ba', 'b': 'ba', 'c': 'cbab'}, 'ccbc': {'a': 'ba', 'b': 'ba', 'c': 'cbab'}, 'abab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbb': {'a': 'cbab', 'b': 'cbab', 'c': 'cbab'}, 'aaac': {'a': 'aaca', 'b': 'cbab', 'c': 'aaca'}, 'bcabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbb': {'a': 'cbab', 'b': 'ba', 'c': 'ba'}, 'acacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcc': {'a': 'cbab', 'b': 'ba', 'c': 'ba'}, 'aabcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaa': {'a': 'cbab', 'b': 'ba', 'c': 'cbab'}, 'ccba': {'a': 'cbab', 'b': 'cbab', 'c': 'ba'}, 'cccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccca': {'a': 'aaca', 'b': 'cbab', 'c': 'aaca'}, 'bcbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcc': {'a': 'ba', 'b': 'cbab', 'c': 'cbab'}, 'bccb': {'a': 'cbab', 'b': 'cbab', 'c': 'ba'}, 'cccbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acba': {'a': 'cbab', 'b': 'cbab', 'c': 'ba'}, 'bbcb': {'a': 'ba', 'b': 'cbab', 'c': 'ba'}, 'aaacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ab': {'a': 'aba', 'b': 'abb', 'c': 'abc'}, 'aaab': {'a': 'cbab', 'b': 'ba', 'c': 'ba'}, 'accbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abc': {'a': 'abca', 'b': 'abcb', 'c': 'abcc'}, 'acabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbb': {'a': 'cbab', 'b': 'cbab', 'c': 'cbab'}, 'aabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bb': {'a': 'bba', 'b': 'bbb', 'c': 'bbc'}, 'aabbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caca': {'a': 'aaca', 'b': 'cbab', 'c': 'aaca'}, 'bcaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'b': {'a': 'ba', 'b': 'bb', 'c': 'bc'}, 'abacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcab': {'a': 'cbab', 'b': 'cbab', 'c': 'ba'}, 'abac': {'a': 'cbab', 'b': 'ba', 'c': 'cbab'}, 'acbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbb': {'a': 'cbab', 'b': 'bbbb', 'c': 'bbbc'}, 'caaa': {'a': 'aaca', 'b': 'cbab', 'c': 'aaca'}, 'bca': {'a': 'bcaa', 'b': 'bcab', 'c': 'bcac'}, 'bbbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcb': {'a': 'cbab', 'b': 'bcbb', 'c': 'bcbc'}, 'bcbb': {'a': 'ba', 'b': 'cbab', 'c': 'ba'}, 'caab': {'a': 'ba', 'b': 'ba', 'c': 'cbab'}, 'ccbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abba': {'a': 'ba', 'b': 'cbab', 'c': 'ba'}, 'cabac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbb': {'a': 'ba', 'b': 'ba', 'c': 'cbab'}, 'abcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaba': {'a': 'ba', 'b': 'ba', 'c': 'cbab'}, 'acbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caba': {'a': 'cbab', 'b': 'ba', 'c': 'cbab'}, 'cbac': {'a': 'cbab', 'b': 'cbab', 'c': 'ba'}, 'bbacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acac': {'a': 'aaca', 'b': 'cbab', 'c': 'aaca'}, 'cbaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cba': {'a': 'cbaa', 'b': 'cbab', 'c': 'cbac'}, 'bbbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcc': {'a': 'cbab', 'b': 'bccb', 'c': 'cbab'}, 'cab': {'a': 'caba', 'b': 'cbab', 'c': 'cabc'}, 'bbccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbac': {'a': 'ba', 'b': 'cbab', 'c': 'ba'}, 'acca': {'a': 'aaca', 'b': 'cbab', 'c': 'aaca'}, 'cbacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcc': {'a': 'cbab', 'b': 'cbab', 'c': 'cbab'}, 'abcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aba': {'a': 'abaa', 'b': 'cbab', 'c': 'abac'}, 'bbaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accb': {'a': 'cbab', 'b': 'cbab', 'c': 'cbab'}, 'acbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccb': {'a': 'ccba', 'b': 'ccbb', 'c': 'ccbc'}, 'bbbc': {'a': 'cbab', 'b': 'ba', 'c': 'cbab'}, 'cbccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbc': {'a': 'cbab', 'b': 'cbab', 'c': 'cbab'}, 'acab': {'a': 'ba', 'b': 'cbab', 'c': 'cbab'}, 'bcacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbca': {'a': 'cbab', 'b': 'ba', 'c': 'ba'}, 'accba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caa': {'a': 'cccc', 'b': 'caab', 'c': 'aaca'}, 'bbaa': {'a': 'cbab', 'b': 'cbab', 'c': 'cbab'}, 'aac': {'a': 'aaca', 'b': 'aacb', 'c': 'aaca'}, 'abbc': {'a': 'cbab', 'b': 'ba', 'c': 'ba'}, 'aabb': {'a': 'cbab', 'b': 'cbab', 'c': 'cbab'}, 'ca': {'a': 'caa', 'b': 'cab', 'c': 'cac'}, 'abb': {'a': 'abba', 'b': 'abbb', 'c': 'abbc'}, 'cacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cac': {'a': 'cccc', 'b': 'cacb', 'c': 'aaca'}, 'aacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bc': {'a': 'bca', 'b': 'bcb', 'c': 'bcc'}, 'bbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcb': {'a': 'ba', 'b': 'cbab', 'c': 'ba'}, 'ccbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaca': {'a': 'aaca', 'b': 'ba', 'c': 'aaca'}, 'bbc': {'a': 'cbab', 'b': 'bbcb', 'c': 'bbcc'}, 'bcbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cb': {'a': 'cba', 'b': 'cbb', 'c': 'cbc'}, 'cbcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ac': {'a': 'aca', 'b': 'acb', 'c': 'acc'}, 'cbb': {'a': 'cbab', 'b': 'cbbb', 'c': 'cbbc'}, 'cbc': {'a': 'cbca', 'b': 'cbcb', 'c': 'cbcc'}, 'bcbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbaa': {'a': 'cbab', 'b': 'ba', 'c': 'ba'}, 'bbccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'c': {'a': 'ca', 'b': 'cb', 'c': 'cc'}, 'bccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abca': {'a': 'ba', 'b': 'cbab', 'c': 'cbab'}, 'cabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aa': {'a': 'aaa', 'b': 'aab', 'c': 'aac'}, 'acb': {'a': 'acba', 'b': 'acbb', 'c': 'cbab'}, 'acc': {'a': 'cccc', 'b': 'accb', 'c': 'aaca'}, 'aabbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'a': {'a': 'aa', 'b': 'ab', 'c': 'ac'}, 'cccb': {'a': 'ba', 'b': 'cbab', 'c': 'cbab'}, 'bba': {'a': 'bbaa', 'b': 'cbab', 'c': 'bbac'}}
target  query explanation status  test accuracy rnn score explanation score explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states lstar explanation score lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  false       false   True          100.0      None              None                              None         0.450553          None            None              []          0         0         0          186                    None                                    None             400.450671        False      0.1   0.01
target: F(aUb)
query: false


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.11620426177978516  s
EQ test took  0.0006613731384277344  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.1219489574432373  s
EQ test took  0.22503018379211426  s


epsilon= 0.05 delta= 0.1 max_trace_length= 50
query: false
final ltl:  false

Time taken to extract ltl: 0.4677717685699463
Interrupted due to time limit
overall guided extraction time took: 401.28
generated counterexamples were: (format: (counterexample, counterexample generation time))
('', 0.0)
('b', 0.009999999999990905)
('bb', 0.009999999999990905)
('ba', 0.009999999999990905)
('ab', 0.01999999999998181)
('bc', 0.01999999999998181)
('cbb', 0.01999999999998181)
('cb', 0.01999999999998181)
('cab', 0.029999999999972715)
('bbc', 0.029999999999972715)
('aab', 0.029999999999972715)
('aba', 0.029999999999972715)
('bbb', 0.029999999999972715)
('bcc', 0.029999999999972715)
('abc', 0.029999999999972715)
('ccb', 0.040000000000190994)
('bba', 0.049999999999954525)
('bca', 0.049999999999954525)
('bcb', 0.049999999999954525)
('abb', 0.049999999999954525)
('abca', 0.049999999999954525)
('ccbc', 0.05999999999994543)
('aaba', 0.05999999999994543)
('cabb', 0.07000000000016371)
('acb', 0.06999999999993634)
('ccbb', 0.07000000000016371)
('bcbb', 0.06999999999993634)
('bbbb', 0.05999999999994543)
('bbab', 0.07000000000016371)
('caab', 0.07999999999992724)
('bbca', 0.07999999999992724)
('aabc', 0.08000000000015461)
('ccba', 0.07999999999992724)
('bcbc', 0.08000000000015461)
('ccab', 0.08999999999991815)
('bbba', 0.09999999999990905)
('acba', 0.10000000000013642)
('abbc', 0.08999999999991815)
('abba', 0.11000000000012733)
('bccc', 0.09999999999990905)
('acbc', 0.11000000000012733)
('abac', 0.11999999999989086)
('caba', 0.12000000000011823)
('aabb', 0.10999999999989996)
('bcab', 0.11999999999989086)
('bccb', 0.12000000000011823)
('abab', 0.11999999999989086)
('acab', 0.12000000000011823)
('aacb', 0.11999999999989086)
('bbcb', 0.11999999999989086)
('bbcc', 0.13000000000010914)
('abcc', 0.13999999999987267)
('abcb', 0.13000000000010914)
('bcca', 0.13000000000010914)
('bcba', 0.13999999999987267)
('cacb', 0.14000000000010004)
('accb', 0.15000000000009095)
('bcac', 0.15000000000009095)
('aaab', 0.13999999999987267)
('bcaa', 0.15000000000009095)
('cabc', 0.16000000000008185)
('abaa', 0.16000000000008185)
('bbac', 0.15999999999985448)
('bbaa', 0.16000000000008185)
('acbb', 0.16000000000008185)
('bbbc', 0.16000000000008185)
('abbb', 0.17000000000007276)
('cccb', 0.16999999999984539)
('bbbab', 0.1799999999998363)
('acbcb', 0.18000000000006366)
('abccb', 0.17000000000007276)
('bbcaa', 0.19000000000005457)
('ccaba', 0.18000000000006366)
('acbac', 0.19000000000005457)
('caabc', 0.19000000000005457)
('ababc', 0.19000000000005457)
('bcccc', 0.20000000000004547)
('caaab', 0.1999999999998181)
('bbbac', 0.209999999999809)
('ccbba', 0.209999999999809)
('bccbb', 0.21000000000003638)
('aacba', 0.21000000000003638)
('abbbb', 0.209999999999809)
('bbccc', 0.21000000000003638)
('acbca', 0.21000000000003638)
('abaab', 0.22000000000002728)
('bcbca', 0.22000000000002728)
('cacba', 0.2300000000000182)
('bbccb', 0.2400000000000091)
('bbaaa', 0.2300000000000182)
('abacc', 0.2400000000000091)
('abbab', 0.2400000000000091)
('aaabb', 0.25)
('aabac', 0.2400000000000091)
('bcabc', 0.25)
('abbac', 0.2599999999999909)
('bccbc', 0.25)
('bcccb', 0.2599999999999909)
('bbaab', 0.2599999999999909)
('acbaa', 0.2599999999999909)
('abcbc', 0.2699999999999818)
('acacb', 0.2699999999999818)
('bcbaa', 0.2799999999999727)
('aaacb', 0.2700000000002092)
('bbbbb', 0.2799999999999727)
('abaca', 0.2699999999999818)
('accbc', 0.2799999999999727)
('aabbb', 0.2799999999999727)
('aacbc', 0.2999999999999545)
('acbbb', 0.290000000000191)
('cacbc', 0.2899999999999636)
('caccb', 0.2999999999999545)
('abaac', 0.2999999999999545)
('ababb', 0.2999999999999545)
('cabac', 0.2999999999999545)
('abcbb', 0.30999999999994543)
('bbaac', 0.3000000000001819)
('bbbca', 0.30999999999994543)
('aaaab', 0.30999999999994543)
('accbb', 0.33999999999991815)
('aabbc', 0.3300000000001546)
('cabba', 0.31999999999993634)
('accba', 0.33999999999991815)
('abcca', 0.33999999999991815)
('bbaca', 0.34999999999990905)
('bcacb', 0.34999999999990905)
('cabaa', 0.32999999999992724)
('acbbc', 0.3400000000001455)
('bcbbc', 0.3400000000001455)
('ccbcc', 0.3500000000001364)
('acabb', 0.34999999999990905)
('cabcc', 0.34999999999990905)
('aabca', 0.3500000000001364)
('ababa', 0.35999999999989996)
('ccacb', 0.36000000000012733)
('cabbc', 0.35999999999989996)
('abbba', 0.36999999999989086)
('ccbbb', 0.36999999999989086)
('bccca', 0.36999999999989086)
('bcbcc', 0.37999999999988177)
('abbcb', 0.37999999999988177)
('bcbcb', 0.38000000000010914)
('bcaba', 0.38000000000010914)
('ccabc', 0.38999999999987267)
('caabb', 0.38999999999987267)
('bccba', 0.38999999999987267)
('caaba', 0.39000000000010004)
('bcaaa', 0.40000000000009095)
('accab', 0.39000000000010004)
('abbbc', 0.3999999999998636)
('bcaac', 0.38999999999987267)
('abacb', 0.39000000000010004)
('ccbac', 0.40000000000009095)
('bbcbc', 0.40000000000009095)
('aaaba', 0.41000000000008185)
('aabaa', 0.41000000000008185)
('bcbac', 0.4099999999998545)
('caacb', 0.41000000000008185)
('bbcbb', 0.42000000000007276)
('bcbba', 0.4199999999998454)
('abcac', 0.42000000000007276)
('bbcba', 0.42000000000007276)
('abcab', 0.4299999999998363)
('ccbaa', 0.44000000000005457)
('cccab', 0.4199999999998454)
('acaba', 0.4399999999998272)
('aabba', 0.4500000000000455)
('ccbbc', 0.4399999999998272)
('aabab', 0.44000000000005457)
('ccaab', 0.44000000000005457)
('acccb', 0.44000000000005457)
('abcaa', 0.44000000000005457)
('bbabb', 0.4499999999998181)
('ccbca', 0.4600000000000364)
('bcaab', 0.4600000000000364)
('bbbcc', 0.4600000000000364)
('cccba', 0.4699999999997999)
('bcabb', 0.4700000000000273)
('abcba', 0.4700000000000273)
('cabca', 0.4700000000000273)
('acbba', 0.4800000000000182)
('bcacc', 0.4800000000000182)
('abccc', 0.4800000000000182)
('aabcc', 0.4900000000000091)
('ccccb', 0.5099999999999909)
('abaaa', 0.5199999999999818)
('bbacb', 0.5099999999999909)
('cccbc', 0.5100000000002183)
('bbabc', 0.5199999999999818)
('bbbaa', 0.5199999999999818)
('cacab', 0.5299999999999727)
('bcbab', 0.5199999999999818)
('bbcab', 0.5199999999999818)
('bccab', 0.540000000000191)
('acbcc', 0.5299999999999727)
('cabab', 0.5500000000001819)
('aacab', 0.5499999999999545)
('cabcb', 0.5500000000001819)
('acabc', 0.5399999999999636)
('bbbbc', 0.5499999999999545)
('abbaa', 0.5499999999999545)
('cacbb', 0.5499999999999545)
('bccaa', 0.5599999999999454)
('acbab', 0.5600000000001728)
('bbaba', 0.5599999999999454)
('bbcca', 0.5699999999999363)
('bcaca', 0.5700000000001637)
('cccbb', 0.5699999999999363)
('aaabc', 0.5599999999999454)
('cabbb', 0.5699999999999363)
('aabcb', 0.5800000000001546)
('abbca', 0.5800000000001546)
('bbcac', 0.5799999999999272)
('bccac', 0.5899999999999181)
('acaab', 0.599999999999909)
('aaccb', 0.5900000000001455)
('aacbb', 0.5899999999999181)
('ccbab', 0.599999999999909)
('abbcc', 0.6000000000001364)
('bbacc', 0.6100000000001273)
('bbbcb', 0.6199999999998909)
('ccbcb', 0.6100000000001273)
('bcbbb', 0.6200000000001182)
('ccabb', 0.6299999999998818)
('bbbba', 0.6200000000001182)
('ccaccb', 0.6399999999998727)
('abaaca', 0.6399999999998727)
('bcabcb', 0.6400000000001)
('bbaccb', 0.6299999999998818)
('bbbbcc', 0.6400000000001)
('cabaca', 0.6199999999998909)
('bccbaa', 0.6400000000001)
('abcbcb', 0.6499999999998636)
('abacba', 0.650000000000091)
('acccbc', 0.6800000000000637)
('bbbbcb', 0.6799999999998363)
('bcabac', 0.650000000000091)
('bcacac', 0.6599999999998545)
('cacbac', 0.6700000000000728)
('abbcba', 0.6800000000000637)
('ccccbb', 0.6600000000000819)
('aaacbc', 0.650000000000091)
('ccabbc', 0.6599999999998545)
('abcbcc', 0.6800000000000637)
('bcbbaa', 0.6800000000000637)
('acbaba', 0.6899999999998272)
('bcaccb', 0.6900000000000546)
('ccabcc', 0.7000000000000455)
('bcbaca', 0.7000000000000455)
('bcabca', 0.6900000000000546)
('cabaab', 0.6900000000000546)
('cabbca', 0.7100000000000364)
('bbbbac', 0.6900000000000546)
('aacbca', 0.7200000000000273)
('caccab', 0.7100000000000364)
('aaabab', 0.7200000000000273)
('abacab', 0.7300000000000182)
('bbbacc', 0.7200000000000273)
('abaacc', 0.7300000000000182)
('abccca', 0.7100000000000364)
('aacbba', 0.7300000000000182)
('abbaca', 0.7200000000000273)
('aaabaa', 0.7400000000000091)
('bccccb', 0.7400000000000091)
('bbbcca', 0.7400000000000091)
('cccacb', 0.7400000000000091)
('bbbcbc', 0.7400000000000091)
('aabbbc', 0.7400000000000091)
('cabccb', 0.7599999999999909)
('ccaaba', 0.75)
('ccbbab', 0.7800000000002001)
('cacbab', 0.7599999999999909)
('accaab', 0.7799999999999727)
('ccbabc', 0.75)
('ccbbca', 0.7699999999999818)
('abacaa', 0.7799999999999727)
('ccbbbb', 0.7699999999999818)
('cabcba', 0.7799999999999727)
('bccbac', 0.7799999999999727)
('aabcaa', 0.7899999999999636)
('acbbbb', 0.7899999999999636)
('acbcca', 0.7899999999999636)
('aabaca', 0.790000000000191)
('acbaaa', 0.7999999999999545)
('bbbbaa', 0.8099999999999454)
('ababcc', 0.7899999999999636)
('acbbab', 0.8099999999999454)
('bbcbcb', 0.8099999999999454)
('aacbcb', 0.8099999999999454)
('bbccba', 0.8200000000001637)
('ababca', 0.8200000000001637)
('cabcbb', 0.8099999999999454)
('aabcbb', 0.8299999999999272)
('caabab', 0.8199999999999363)
('cabccc', 0.8299999999999272)
('cccabc', 0.8199999999999363)
('acbccb', 0.8299999999999272)
('bcacba', 0.8400000000001455)
('aaabbb', 0.8399999999999181)
('accabc', 0.849999999999909)
('bbabcc', 0.8600000000001273)
('bbabba', 0.849999999999909)
('bbbaac', 0.8500000000001364)
('bcccbb', 0.849999999999909)
('bcccaa', 0.8699999999998909)
('abbacc', 0.8599999999999)
('bcaacb', 0.849999999999909)
('bcacaa', 0.8800000000001091)
('bccaab', 0.8700000000001182)
('bbcacc', 0.8699999999998909)
('cccbbc', 0.8899999999998727)
('bbabac', 0.8800000000001091)
('cccbca', 0.8800000000001091)
('bccacb', 0.8899999999998727)
('aaabcb', 0.8899999999998727)
('bcacab', 0.9100000000000819)
('ababac', 0.8899999999998727)
('caaaab', 0.8900000000001)
('bbabcb', 0.8999999999998636)
('bcccba', 0.8900000000001)
('bbbabb', 0.8999999999998636)
('cabbab', 0.9200000000000728)
('bcbbcb', 0.9199999999998454)
('ccbbaa', 0.9200000000000728)
('bbbbbc', 0.9199999999998454)
('abcacc', 0.9400000000000546)
('cabcac', 0.9199999999998454)
('cabaaa', 0.9400000000000546)
('cacaab', 0.9400000000000546)
('bcabcc', 0.9300000000000637)
('abccbb', 0.9400000000000546)
('ccabcb', 0.9600000000000364)
('bbaacc', 0.9299999999998363)
('abaabb', 0.9399999999998272)
('abbbcb', 0.9500000000000455)
('aabaac', 0.9600000000000364)
('abbcab', 0.9500000000000455)
('abacca', 0.9600000000000364)
('acbbbc', 0.9300000000000637)
('ccbcac', 0.9300000000000637)
('cabacc', 0.9399999999998272)
('cccbcb', 0.9499999999998181)
('caaaba', 0.9400000000000546)
('bbbcaa', 0.9500000000000455)
('abbcbb', 0.9500000000000455)
('bcabaa', 0.9500000000000455)
('abbaac', 0.9500000000000455)
('bbbccc', 0.9600000000000364)
('caaacb', 0.9500000000000455)
('acbccc', 0.9700000000000273)
('cababc', 0.9699999999997999)
('cacabb', 0.9600000000000364)
('bcacca', 0.9600000000000364)
('ccbaaa', 0.9800000000000182)
('accbab', 0.9700000000000273)
('aacaba', 0.9800000000000182)
('bbabca', 0.9800000000000182)
('acbaca', 0.9900000000000091)
('ccbbba', 0.9800000000000182)
('accacb', 0.9800000000000182)
('bcbcbc', 1.0)
('ccbcba', 1.0)
('ababaa', 1.0)
('cacccb', 0.9900000000000091)
('bbcbbb', 1.009999999999991)
('aaabba', 1.0199999999999818)
('ababbb', 1.0399999999999636)
('abbccc', 1.0199999999999818)
('cabacb', 1.0399999999999636)
('ccaacb', 1.0299999999999727)
('abcbca', 1.0399999999999636)
('abcabc', 1.0399999999999636)
('acbcaa', 1.0299999999999727)

Time taken to extract lstar-dfa: 401.2595043182373
number of states of the dfa: 413
returned flag: False
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'c'}, 'aaaa': {'a': 'aaaaa', 'b': 'bcbcbc', 'c': 'aaaaa'}, 'bcbcbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccab': {'a': 'bcbcbc', 'b': 'ccabb', 'c': 'ccabc'}, 'aacb': {'a': 'bcbcbc', 'b': 'aacbb', 'c': 'aacbc'}, 'cabccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcabc': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bcca': {'a': 'bccaa', 'b': 'bcbcbc', 'c': 'bccac'}, 'acabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cca': {'a': 'ccaa', 'b': 'ccab', 'c': 'ccac'}, 'abaacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaab': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'bccccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccc': {'a': 'ccca', 'b': 'cccb', 'c': 'cccc'}, 'aacbc': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'bcbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccabbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbcbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabc': {'a': 'aabca', 'b': 'aabcb', 'c': 'bcbcbc'}, 'aca': {'a': 'aaaa', 'b': 'acab', 'c': 'caccc'}, 'abaa': {'a': 'bcbcbc', 'b': 'abaab', 'c': 'abaac'}, 'abab': {'a': 'ababa', 'b': 'ababb', 'c': 'ababc'}, 'caccc': {'a': 'aaaaa', 'b': 'bcbcbc', 'c': 'aaaaa'}, 'acbbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaba': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'acbccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcc': {'a': 'bcbcbc', 'b': 'abccb', 'c': 'abccc'}, 'abbac': {'a': 'bcbcbc', 'b': 'ba', 'c': 'bcbcbc'}, 'accc': {'a': 'aaaaa', 'b': 'acccb', 'c': 'aaaaa'}, 'ccba': {'a': 'ccbaa', 'b': 'ccbab', 'c': 'bcbcbc'}, 'abbacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccca': {'a': 'aaaaa', 'b': 'cccab', 'c': 'aaaa'}, 'acbcc': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'acaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acba': {'a': 'acbaa', 'b': 'acbab', 'c': 'acbac'}, 'abcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacb': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'acbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbaa': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'caccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbba': {'a': 'bcbcbc', 'b': 'ba', 'c': 'bcbcbc'}, 'aabbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacc': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'cacaa': {'a': 'aaaaa', 'b': 'bcbcbc', 'c': 'aaaaa'}, 'abcacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abac': {'a': 'abaca', 'b': 'abacb', 'c': 'abacc'}, 'cacca': {'a': 'aaaaa', 'b': 'bcbcbc', 'c': 'aaaaa'}, 'bcbb': {'a': 'bcbba', 'b': 'bcbcbc', 'c': 'bcbbc'}, 'caab': {'a': 'caaba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'abbcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbbb': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'abcab': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'bbcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbaa': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'cabba': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'abbaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcccc': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'abaab': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'ababca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabca': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'ccbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcacac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcc': {'a': 'bcbcbc', 'b': 'bbccb', 'c': 'bcbcbc'}, 'ccaacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbab': {'a': 'bbaba', 'b': 'bbabb', 'c': 'bbabc'}, 'aba': {'a': 'abaa', 'b': 'abab', 'c': 'abac'}, 'accb': {'a': 'accba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'ccb': {'a': 'ccba', 'b': 'ccbb', 'c': 'ccbc'}, 'cacccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaac': {'a': 'aaaaa', 'b': 'bcbcbc', 'c': 'aaaaa'}, 'bbaacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accba': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'aabab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abaaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbc': {'a': 'abbca', 'b': 'abbcb', 'c': 'abbcc'}, 'ca': {'a': 'caa', 'b': 'cab', 'c': 'cac'}, 'bbabba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbcb': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'aacbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ababbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcb': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'abcbc'}, 'abcbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabcb': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'cabaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaac': {'a': 'aaaaa', 'b': 'bcbcbc', 'c': 'aaaaa'}, 'abcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbabb': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'aabcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'a': {'a': 'aa', 'b': 'ab', 'c': 'ac'}, 'aaabcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccabc': {'a': 'ba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'cccc': {'a': 'aaaaa', 'b': 'ccccb', 'c': 'aaaaa'}, 'aabca': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'cccbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcac': {'a': 'bcaca', 'b': 'bcacb', 'c': 'bcacc'}, 'ba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcabac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbb': {'a': 'bbbba', 'b': 'bbbbb', 'c': 'bbbbc'}, 'ababa': {'a': 'bcbcbc', 'b': 'ba', 'c': 'bcbcbc'}, 'bcaac': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bbca': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bbcac'}, 'ccbc': {'a': 'ccbca', 'b': 'ccbcb', 'c': 'bcbcbc'}, 'cacbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcabca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabcb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bcacca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbcb': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'cccab': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'acbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbac': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'abccb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bbacc': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'aaabba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcacb': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'caccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacc': {'a': 'aaaa', 'b': 'bcbcbc', 'c': 'aaaa'}, 'ababc': {'a': 'bcbcbc', 'b': 'ba', 'c': 'bcbcbc'}, 'aaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaba': {'a': 'bcbcbc', 'b': 'ba', 'c': 'bcbcbc'}, 'caca': {'a': 'aaaa', 'b': 'cacab', 'c': 'aaaaa'}, 'bbbbc': {'a': 'ba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bcab': {'a': 'bcaba', 'b': 'bcbcbc', 'c': 'bcabc'}, 'caaa': {'a': 'aaaa', 'b': 'caaab', 'c': 'aaaa'}, 'acbbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcbc': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bbabac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabac': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bccca': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'ccbcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaba': {'a': 'aabaa', 'b': 'bcbcbc', 'c': 'aabac'}, 'aaacbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacc': {'a': 'aaaaa', 'b': 'bcbcbc', 'c': 'aaaaa'}, 'bbbbb': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'cccbb': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'abbccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cab': {'a': 'caba', 'b': 'cabb', 'c': 'cabc'}, 'accac': {'a': 'aaaaa', 'b': 'bcbcbc', 'c': 'aaaaa'}, 'bcaacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acca': {'a': 'aaaa', 'b': 'accab', 'c': 'aaaa'}, 'aacbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabab': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'bbcbc': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'aaaba': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'bcaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcacab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbc': {'a': 'bbbca', 'b': 'bbbcb', 'c': 'bbbcc'}, 'bbbabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbaa': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'bcbaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcccaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acab': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bcacc': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'caabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caa': {'a': 'caaa', 'b': 'caab', 'c': 'aaaa'}, 'ccbabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabb': {'a': 'bcbcbc', 'b': 'aabbb', 'c': 'bcbcbc'}, 'aacbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cac': {'a': 'caca', 'b': 'cacb', 'c': 'cacc'}, 'abcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbaa': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'aacbb': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'caabab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bc': {'a': 'bca', 'b': 'bcb', 'c': 'bcc'}, 'bcacba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbab': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bccc': {'a': 'bccca', 'b': 'bcccb', 'c': 'bcccc'}, 'bbc': {'a': 'bbca', 'b': 'bbcb', 'c': 'bbcc'}, 'ccacc': {'a': 'aaaaa', 'b': 'bcbcbc', 'c': 'aaaaa'}, 'cabcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abccc': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'bbcbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'c': {'a': 'ca', 'b': 'cb', 'c': 'cc'}, 'bbccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accaa': {'a': 'aaaaa', 'b': 'bcbcbc', 'c': 'aaaaa'}, 'bcbac': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'bcccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacab': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'ccbbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaaaa': {'a': 'aaaaa', 'b': 'ba', 'c': 'aaaaa'}, 'bcbba': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'ccbab': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'ccabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcac': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'ccaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbb': {'a': 'acbba', 'b': 'acbbb', 'c': 'bcbcbc'}, 'aaac': {'a': 'aaaaa', 'b': 'aaacb', 'c': 'aaaaa'}, 'aaabc': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'aabac': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'acacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcabcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaa': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bcaac'}, 'bbabc': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'acccb': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'abaca': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'acaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abc': {'a': 'abca', 'b': 'abcb', 'c': 'abcc'}, 'cabcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbb': {'a': 'ccbba', 'b': 'ccbbb', 'c': 'ccbbc'}, 'ccabb': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'bcbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acccbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'b': {'a': 'ba', 'b': 'bb', 'c': 'bc'}, 'bccbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbabca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbba': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bccacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbcb': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'bbb': {'a': 'bbba', 'b': 'bbbb', 'c': 'bbbc'}, 'bca': {'a': 'bcaa', 'b': 'bcab', 'c': 'bcac'}, 'bbbca': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'aabaa': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'ccbba': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'abba': {'a': 'abbaa', 'b': 'bcbcbc', 'c': 'abbac'}, 'abbb': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'abbbc'}, 'abbaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acac': {'a': 'aaaaa', 'b': 'bcbcbc', 'c': 'aaaaa'}, 'bccbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaabbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccba': {'a': 'bcbcbc', 'b': 'ba', 'c': 'bcbcbc'}, 'cababc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbac': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bbacc'}, 'abaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbca': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'ababb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'abcbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbc': {'a': 'bcbcbc', 'b': 'bcbcb', 'c': 'bcbcbc'}, 'cacbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaa': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bbaac'}, 'ccaab': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'bcccb': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'bbabcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaca': {'a': 'aaaaa', 'b': 'aacab', 'c': 'aaaaa'}, 'cb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'ac': {'a': 'aca', 'b': 'acb', 'c': 'acc'}, 'abccca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaaa': {'a': 'aaaaa', 'b': 'bcbcbc', 'c': 'aaaaa'}, 'cccac': {'a': 'aaaaa', 'b': 'bcbcbc', 'c': 'aaaaa'}, 'ccabcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbbc': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bbcbb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bbcacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abca': {'a': 'bcbcbc', 'b': 'abcab', 'c': 'abcac'}, 'bbcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acc': {'a': 'acca', 'b': 'accb', 'c': 'accc'}, 'bcacaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabbb': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'accaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaca': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bbbaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bba': {'a': 'bbaa', 'b': 'bbab', 'c': 'bbac'}, 'bcba': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'bcbac'}, 'ababaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaa': {'a': 'aaaa', 'b': 'aaab', 'c': 'aaac'}, 'ccccb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'cc': {'a': 'cca', 'b': 'ccb', 'c': 'ccc'}, 'acaa': {'a': 'aaaaa', 'b': 'bcbcbc', 'c': 'aaaaa'}, 'caaba': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'abbcc': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'bbba': {'a': 'bbbaa', 'b': 'bbbab', 'c': 'bbbac'}, 'ccac': {'a': 'aaaaa', 'b': 'bcbcbc', 'c': 'aaaa'}, 'cabc': {'a': 'cabca', 'b': 'cabcb', 'c': 'cabcc'}, 'cacb': {'a': 'cacba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'abaac': {'a': 'bcbcbc', 'b': 'ba', 'c': 'bcbcbc'}, 'aab': {'a': 'aaba', 'b': 'aabb', 'c': 'aabc'}, 'aabcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcac': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'bcabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abaabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbcb': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'bccb': {'a': 'bccba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'cccbc': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'bbcb': {'a': 'bcbcbc', 'b': 'bbcbb', 'c': 'bbcbc'}, 'aaacb': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'ab': {'a': 'aba', 'b': 'abb', 'c': 'abc'}, 'aaab': {'a': 'aaaba', 'b': 'aaabb', 'c': 'aaabc'}, 'bccaa': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'acbbb': {'a': 'ba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'cacab': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bccac': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'cabcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbbc': {'a': 'ba', 'b': 'bcbcbc', 'c': 'ba'}, 'bb': {'a': 'bba', 'b': 'bbb', 'c': 'bbc'}, 'bcabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caac': {'a': 'aaaaa', 'b': 'bcbcbc', 'c': 'aaaaa'}, 'bcb': {'a': 'bcba', 'b': 'bcbb', 'c': 'bcbc'}, 'accabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaabb': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'abacba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caba': {'a': 'cabaa', 'b': 'cabab', 'c': 'cabac'}, 'acbc': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'acbcc'}, 'bbacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbac': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'ccaaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbc': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'aaaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcc': {'a': 'bcca', 'b': 'bccb', 'c': 'bccc'}, 'bbccb': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'bbbbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accab': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'cabaa': {'a': 'bcbcbc', 'b': 'bcbcbc', 'c': 'ba'}, 'cacbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaa': {'a': 'aaaaa', 'b': 'ccaab', 'c': 'aaaa'}, 'ccbbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ababac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ababcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacba': {'a': 'ba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'abcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaac': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'acbab': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}, 'cacabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabb': {'a': 'cabba', 'b': 'bcbcbc', 'c': 'cabbc'}, 'aabaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaabab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aac': {'a': 'aaca', 'b': 'aacb', 'c': 'aaaa'}, 'cabacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abb': {'a': 'abba', 'b': 'abbb', 'c': 'abbc'}, 'accbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbcc': {'a': 'bcbcbc', 'b': 'ba', 'c': 'bcbcbc'}, 'bbbbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabcc': {'a': 'ba', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'ccbca': {'a': 'ba', 'b': 'ba', 'c': 'bcbcbc'}, 'caabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aa': {'a': 'aaa', 'b': 'aab', 'c': 'aac'}, 'acb': {'a': 'acba', 'b': 'acbb', 'c': 'acbc'}, 'aabbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccb': {'a': 'bcbcbc', 'b': 'cccbb', 'c': 'cccbc'}, 'ccbbc': {'a': 'bcbcbc', 'b': 'ba', 'c': 'ba'}}
target  query explanation status  test accuracy rnn score explanation score explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states lstar explanation score lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  false       false   True          100.0      None              None                              None         0.467772          None            None              []          0         0         0          413                    None                                    None             401.259504        False     0.05    0.1
target: F(aUb)
query: false


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.1183617115020752  s
EQ test took  0.0006754398345947266  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.12238764762878418  s
EQ test took  0.2675771713256836  s


epsilon= 0.05 delta= 0.05 max_trace_length= 50
query: false
final ltl:  false

Time taken to extract ltl: 0.5126128196716309
Interrupted due to time limit
overall guided extraction time took: 403.42999999999984
generated counterexamples were: (format: (counterexample, counterexample generation time))
('', 0.0)
('b', 0.01999999999998181)
('cb', 0.029999999999972715)
('bc', 0.03999999999996362)
('ab', 0.03999999999996362)
('bb', 0.049999999999954525)
('ba', 0.0500000000001819)
('bba', 0.049999999999954525)
('abb', 0.05999999999994543)
('aba', 0.06999999999993634)
('ccb', 0.060000000000172804)
('bcb', 0.07999999999992724)
('acb', 0.06999999999993634)
('aab', 0.08000000000015461)
('bbc', 0.07999999999992724)
('bca', 0.08999999999991815)
('cbb', 0.09000000000014552)
('bbb', 0.09999999999990905)
('bcc', 0.11000000000012733)
('cba', 0.10999999999989996)
('cab', 0.11000000000012733)
('abc', 0.12999999999988177)
('cbc', 0.14000000000010004)
('abac', 0.12999999999988177)
('ccba', 0.14000000000010004)
('bbcb', 0.15000000000009095)
('cbbc', 0.14999999999986358)
('cbba', 0.15000000000009095)
('ccbb', 0.14999999999986358)
('acab', 0.15999999999985448)
('cbcc', 0.16999999999984539)
('bbaa', 0.17000000000007276)
('cbac', 0.18000000000006366)
('bcbc', 0.19000000000005457)
('bbbc', 0.1899999999998272)
('bcba', 0.1899999999998272)
('aaab', 0.19000000000005457)
('bcca', 0.20000000000004547)
('bbbb', 0.20000000000004547)
('aabb', 0.22000000000002728)
('bcbb', 0.22000000000002728)
('cacb', 0.2300000000000182)
('bccb', 0.2300000000000182)
('accb', 0.2300000000000182)
('abbc', 0.25)
('abcc', 0.2400000000000091)
('cbcb', 0.2599999999999909)
('ccbc', 0.2599999999999909)
('caba', 0.2599999999999909)
('cabb', 0.2700000000002092)
('cbab', 0.2599999999999909)
('bbba', 0.2799999999999727)
('bcac', 0.2799999999999727)
('bccc', 0.2999999999999545)
('abcb', 0.3000000000001819)
('abca', 0.2999999999999545)
('bbac', 0.30999999999994543)
('abbb', 0.3100000000001728)
('cbaa', 0.31999999999993634)
('acbc', 0.31999999999993634)
('aaba', 0.32999999999992724)
('bcab', 0.32999999999992724)
('caab', 0.3300000000001546)
('abba', 0.33999999999991815)
('acbb', 0.34999999999990905)
('aacb', 0.34999999999990905)
('acba', 0.36999999999989086)
('bcaa', 0.37000000000011823)
('cbca', 0.37999999999988177)
('abaa', 0.37999999999988177)
('aabc', 0.38000000000010914)
('abab', 0.38999999999987267)
('cabc', 0.38999999999987267)
('cccb', 0.40000000000009095)
('bbca', 0.41000000000008185)
('ccab', 0.42000000000007276)
('bbcc', 0.42000000000007276)
('bbab', 0.44000000000005457)
('cbbb', 0.44000000000005457)
('bbcaa', 0.4500000000000455)
('cbbba', 0.4500000000000455)
('bbbcb', 0.4500000000000455)
('cccbb', 0.4600000000000364)
('acbba', 0.4600000000000364)
('aabab', 0.4600000000000364)
('aabac', 0.4700000000000273)
('cacbc', 0.4800000000000182)
('ccabc', 0.4900000000000091)
('acaba', 0.4800000000000182)
('bbaca', 0.5)
('abbbc', 0.5)
('bbcab', 0.5099999999999909)
('acbbc', 0.5099999999999909)
('ccbbb', 0.5199999999999818)
('bcacb', 0.5199999999999818)
('ababa', 0.540000000000191)
('ccbba', 0.5299999999999727)
('cbbaa', 0.5399999999999636)
('bcaac', 0.5599999999999454)
('bbaac', 0.5599999999999454)
('abaca', 0.5599999999999454)
('cbbbc', 0.5699999999999363)
('abaab', 0.5599999999999454)
('bbcbc', 0.5699999999999363)
('abcac', 0.5799999999999272)
('cbcbb', 0.5799999999999272)
('cbcab', 0.6000000000001364)
('cbcaa', 0.6000000000001364)
('acccb', 0.6000000000001364)
('bcaaa', 0.6100000000001273)
('bccab', 0.6200000000001182)
('bbbcc', 0.6200000000001182)
('cbabc', 0.6200000000001182)
('aaacb', 0.6300000000001091)
('bbcbb', 0.6299999999998818)
('bccbc', 0.6499999999998636)
('aabaa', 0.6499999999998636)
('acbbb', 0.6499999999998636)
('cabab', 0.6599999999998545)
('bbcba', 0.6600000000000819)
('ccbab', 0.6600000000000819)
('bbccb', 0.6800000000000637)
('bbbba', 0.6900000000000546)
('cabcc', 0.6700000000000728)
('cabac', 0.6900000000000546)
('bcbbc', 0.7100000000000364)
('ccbcc', 0.6899999999998272)
('bcbaa', 0.7100000000000364)
('ccabb', 0.7100000000000364)
('ccbca', 0.7300000000000182)
('cbbcc', 0.7300000000000182)
('cbaab', 0.7300000000000182)
('aaaab', 0.7400000000000091)
('bcaba', 0.7699999999999818)
('abcbb', 0.7699999999999818)
('cccab', 0.7599999999999909)
('abbac', 0.7599999999999909)
('abcbc', 0.7799999999999727)
('cbccb', 0.7899999999999636)
('bccca', 0.7799999999999727)
('bcbbb', 0.7799999999999727)
('cbaac', 0.7899999999999636)
('bcbac', 0.8099999999999454)
('acbca', 0.8099999999999454)
('abcca', 0.8099999999999454)
('acbaa', 0.8199999999999363)
('acbcb', 0.8199999999999363)
('acbab', 0.8399999999999181)
('cabbb', 0.8199999999999363)
('bcabb', 0.8399999999999181)
('bcbcc', 0.849999999999909)
('bbacb', 0.8500000000001364)
('cbbac', 0.8500000000001364)
('abccb', 0.8700000000001182)
('bcbab', 0.8800000000001091)
('acabc', 0.8600000000001273)
('abccc', 0.900000000000091)
('abcba', 0.8899999999998727)
('caaab', 0.8899999999998727)
('abcaa', 0.8899999999998727)
('abbaa', 0.9100000000000819)
('aabba', 0.900000000000091)
('abaaa', 0.9300000000000637)
('cbaca', 0.9299999999998363)
('bbaab', 0.9299999999998363)
('abbab', 0.9300000000000637)
('aacbb', 0.9300000000000637)
('bbbbc', 0.9500000000000455)
('cabba', 0.9500000000000455)
('aabcc', 0.9400000000000546)
('ccbaa', 0.9800000000000182)
('bccac', 0.9700000000000273)
('caabb', 0.9800000000000182)
('cabca', 0.9699999999997999)
('abbba', 1.0)
('bbbac', 0.9900000000000091)
('caaba', 0.9900000000000091)
('bcabc', 1.009999999999991)
('ccaab', 1.0199999999999818)
('acaab', 1.0199999999999818)
('cbaaa', 1.0199999999999818)
('acbcc', 1.0399999999999636)
('aaaba', 1.0299999999999727)
('cbbbb', 1.0399999999999636)
('cbbab', 1.0399999999999636)
('bcaab', 1.0399999999999636)
('ccccb', 1.0700000000001637)
('bcccb', 1.0599999999999454)
('cbacc', 1.0600000000001728)
('aacab', 1.0799999999999272)
('bbcca', 1.0899999999999181)
('bbbab', 1.0800000000001546)
('bccbb', 1.1099999999999)
('abbca', 1.1099999999999)
('bbacc', 1.1099999999999)
('bcacc', 1.1199999999998909)
('aacbc', 1.1299999999998818)
('accbb', 1.1400000000001)
('bbabb', 1.1299999999998818)
('acacb', 1.1400000000001)
('abbbb', 1.150000000000091)
('abacb', 1.1700000000000728)
('bbccc', 1.1699999999998454)
('bbaba', 1.1599999999998545)
('cbccc', 1.1800000000000637)
('aabbb', 1.1700000000000728)
('aaabb', 1.2000000000000455)
('aacba', 1.1800000000000637)
('cbcca', 1.2000000000000455)
('bccaa', 1.2000000000000455)
('cabbc', 1.2100000000000364)
('aaabc', 1.2200000000000273)
('bbbbb', 1.2199999999998)
('accba', 1.240000000000009)
('bbaaa', 1.25)
('abcab', 1.259999999999991)
('bcccc', 1.240000000000009)
('cbbca', 1.2799999999999727)
('acabb', 1.2799999999999727)
('cbcbc', 1.2399999999997817)
('abbcb', 1.2899999999999636)
('cbbcb', 1.2799999999999727)
('accbc', 1.2899999999999636)
('caabc', 1.3099999999999454)
('bbbca', 1.3199999999999363)
('cbaba', 1.3199999999999363)
('bccba', 1.3200000000001637)
('cacab', 1.3400000000001455)
('bbabc', 1.3299999999999272)
('acbac', 1.349999999999909)
('abacc', 1.3399999999999181)
('aabbc', 1.3500000000001364)
('ccaba', 1.3800000000001091)
('cabcb', 1.3699999999998909)
('aabca', 1.3799999999998818)
('cacbb', 1.3800000000001091)
('ababb', 1.400000000000091)
('ccbcb', 1.3899999999998727)
('bbcac', 1.400000000000091)
('cbcba', 1.4100000000000819)
('cccba', 1.400000000000091)
('cabaa', 1.4200000000000728)
('aaccb', 1.4200000000000728)
('ccbac', 1.4300000000000637)
('aabcb', 1.4300000000000637)
('bcbba', 1.4500000000000455)
('ababc', 1.4600000000000364)
('caacb', 1.4700000000000273)
('caccb', 1.4600000000000364)
('ccacb', 1.4700000000000273)
('accab', 1.490000000000009)
('cbabb', 1.5)
('cbcac', 1.509999999999991)
('abbcc', 1.5)
('cbacb', 1.5)
('cccbc', 1.509999999999991)
('bcbcb', 1.5199999999999818)
('bbbaa', 1.5399999999999636)
('bcaca', 1.5399999999999636)
('bcbca', 1.5299999999999727)
('cacba', 1.5499999999999545)
('ccbbc', 1.5699999999999363)
('abaac', 1.5700000000001637)
('cababc', 1.5799999999999272)
('acacbb', 1.5700000000001637)
('abcbac', 1.599999999999909)
('abbacb', 1.6100000000001273)
('cbaaca', 1.599999999999909)
('acbacc', 1.599999999999909)
('bcbbbc', 1.6199999999998909)
('cccbcb', 1.6199999999998909)
('cbcccc', 1.6199999999998909)
('cbcbab', 1.6300000000001091)
('caccab', 1.6400000000003274)
('cbabcc', 1.6300000000001091)
('abaacc', 1.6399999999998727)
('ccaccb', 1.650000000000091)
('cabcba', 1.650000000000091)
('bcbccc', 1.6700000000000728)
('accabc', 1.6700000000000728)
('caabca', 1.669999999999618)
('acbbcc', 1.6900000000000546)
('aababa', 1.699999999999818)
('aaabbc', 1.7100000000000364)
('bbbaaa', 1.7100000000000364)
('cbbcac', 1.7100000000000364)
('bcbbac', 1.7199999999998)
('abaabb', 1.7300000000000182)
('bcbbcc', 1.7300000000000182)
('ababaa', 1.7300000000000182)
('cbabca', 1.7399999999997817)
('bcbabc', 1.7399999999997817)
('caccbb', 1.7300000000000182)
('ababca', 1.75)
('cccaab', 1.7600000000002183)
('bbaaaa', 1.7699999999999818)
('bbcacb', 1.7800000000002)
('cbcaba', 1.7799999999997453)
('cabbab', 1.7800000000002)
('bbbcba', 1.7799999999997453)
('bcccbb', 1.7899999999999636)
('ababac', 1.7999999999997272)
('cbabbb', 1.8200000000001637)
('acaaab', 1.8099999999999454)
('acaacb', 1.8299999999999272)
('abacbc', 1.8299999999999272)
('bccbcc', 1.8299999999999272)
('bcaccb', 1.849999999999909)
('aaccab', 1.849999999999909)
('aaacbb', 1.8599999999996726)
('ababbc', 1.8600000000001273)

Time taken to extract lstar-dfa: 403.3909418582916
number of states of the dfa: 347
returned flag: False
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'c'}, 'aaaa': {'a': 'aaaaa', 'b': 'bcabc', 'c': 'aaaaa'}, 'ccab': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'cbcb': {'a': 'cbcba', 'b': 'bcabc', 'c': 'bcabc'}, 'aacb': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'bcabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcca': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'acabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cca': {'a': 'aaaa', 'b': 'ccab', 'c': 'ccac'}, 'abaacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbabc': {'a': 'bcabc', 'b': 'ba', 'c': 'bcabc'}, 'caaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccc': {'a': 'ccca', 'b': 'cccb', 'c': 'aaaa'}, 'aacbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacca': {'a': 'aaaaa', 'b': 'bcabc', 'c': 'aaaaa'}, 'aabc': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'aca': {'a': 'acaa', 'b': 'acab', 'c': 'acac'}, 'abaa': {'a': 'bcabc', 'b': 'abaab', 'c': 'abaac'}, 'abab': {'a': 'ababa', 'b': 'bcabc', 'c': 'ababc'}, 'cbba': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'bbaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcc': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'abbac': {'a': 'ba', 'b': 'bcabc', 'c': 'ba'}, 'accc': {'a': 'aaaaa', 'b': 'bcabc', 'c': 'aaaaa'}, 'ccba': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'ccca': {'a': 'aaaa', 'b': 'bcabc', 'c': 'aaaaa'}, 'acbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acba': {'a': 'bcabc', 'b': 'bcabc', 'c': 'acbac'}, 'cbaaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcba': {'a': 'ba', 'b': 'ba', 'c': 'bcabc'}, 'abacb': {'a': 'ba', 'b': 'ba', 'c': 'bcabc'}, 'acbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbca': {'a': 'ba', 'b': 'ba', 'c': 'bcabc'}, 'aabbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abac': {'a': 'bcabc', 'b': 'abacb', 'c': 'bcabc'}, 'cacca': {'a': 'aaaaa', 'b': 'bcabc', 'c': 'aaaaa'}, 'bcbb': {'a': 'bcbba', 'b': 'bcbbb', 'c': 'bcbbc'}, 'caab': {'a': 'bcabc', 'b': 'bcabc', 'c': 'caabc'}, 'acacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabba': {'a': 'ba', 'b': 'bcabc', 'c': 'ba'}, 'cbac': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'bcbccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abaab': {'a': 'ba', 'b': 'bcabc', 'c': 'ba'}, 'cbbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ababca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcc': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'bbcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbab': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'aba': {'a': 'abaa', 'b': 'abab', 'c': 'abac'}, 'accb': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'ccb': {'a': 'ccba', 'b': 'ccbb', 'c': 'ccbc'}, 'cbccc': {'a': 'ba', 'b': 'ba', 'c': 'bcabc'}, 'accba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabab': {'a': 'bcabc', 'b': 'ba', 'c': 'ba'}, 'bcbbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbc': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'ca': {'a': 'caa', 'b': 'cab', 'c': 'cac'}, 'cacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcb': {'a': 'abcba', 'b': 'bcabc', 'c': 'bcabc'}, 'cabcb': {'a': 'bcabc', 'b': 'ba', 'c': 'ba'}, 'cbb': {'a': 'cbba', 'b': 'cbbb', 'c': 'cbbc'}, 'cccaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbaa': {'a': 'bcabc', 'b': 'bcabc', 'c': 'cbaac'}, 'cbccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'a': {'a': 'aa', 'b': 'ab', 'c': 'ac'}, 'cbcba': {'a': 'ba', 'b': 'bcabc', 'c': 'ba'}, 'aaacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccc': {'a': 'aaaaa', 'b': 'bcabc', 'c': 'aaaaa'}, 'bcbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcac': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcacc'}, 'ba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbb': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'ababa': {'a': 'bcabc', 'b': 'ba', 'c': 'bcabc'}, 'bcaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbca': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bbcac'}, 'ccbc': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'cacbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbb': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'aabcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbbc': {'a': 'ba', 'b': 'ba', 'c': 'bcabc'}, 'cabbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbac': {'a': 'ba', 'b': 'ba', 'c': 'bcabc'}, 'abccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caccb': {'a': 'ba', 'b': 'bcabc', 'c': 'ba'}, 'aabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacc': {'a': 'aaaa', 'b': 'caccb', 'c': 'aaaaa'}, 'aaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ababc': {'a': 'bcabc', 'b': 'ba', 'c': 'ba'}, 'acaac': {'a': 'aaaaa', 'b': 'bcabc', 'c': 'aaaaa'}, 'bcaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caca': {'a': 'aaaaa', 'b': 'bcabc', 'c': 'aaaaa'}, 'cbbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcab': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'caccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaa': {'a': 'aaaaa', 'b': 'bcabc', 'c': 'aaaaa'}, 'abcbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccaa': {'a': 'aaaaa', 'b': 'bcabc', 'c': 'aaaaa'}, 'aaba': {'a': 'bcabc', 'b': 'aabab', 'c': 'bcabc'}, 'bccbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacc': {'a': 'aaaa', 'b': 'bcabc', 'c': 'aaaaa'}, 'cba': {'a': 'cbaa', 'b': 'cbab', 'c': 'cbac'}, 'cccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cab': {'a': 'caba', 'b': 'cabb', 'c': 'cabc'}, 'bcbbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acaaa': {'a': 'aaaaa', 'b': 'bcabc', 'c': 'aaaaa'}, 'acca': {'a': 'aaaaa', 'b': 'accab', 'c': 'aaaaa'}, 'cbbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabab': {'a': 'ba', 'b': 'ba', 'c': 'bcabc'}, 'bbcbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbc': {'a': 'bcabc', 'b': 'bbbcb', 'c': 'bcabc'}, 'ccbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acab': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'acbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcacc': {'a': 'ba', 'b': 'bcabc', 'c': 'ba'}, 'caabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caa': {'a': 'aaaa', 'b': 'caab', 'c': 'aaaa'}, 'aababa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabb': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'cac': {'a': 'aaaa', 'b': 'cacb', 'c': 'cacc'}, 'abcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbaa': {'a': 'bcabc', 'b': 'ba', 'c': 'ba'}, 'aacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bc': {'a': 'bca', 'b': 'bcb', 'c': 'bcc'}, 'bbbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccc': {'a': 'bcabc', 'b': 'bcccb', 'c': 'bcabc'}, 'bbc': {'a': 'bbca', 'b': 'bbcb', 'c': 'bbcc'}, 'ccacc': {'a': 'aaaaa', 'b': 'bcabc', 'c': 'aaaaa'}, 'cabcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbbb': {'a': 'ba', 'b': 'ba', 'c': 'bcabc'}, 'abccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'c': {'a': 'ca', 'b': 'cb', 'c': 'cc'}, 'bbbcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbc': {'a': 'cbbca', 'b': 'bcabc', 'c': 'bcabc'}, 'bcbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaaaa': {'a': 'aaaaa', 'b': 'ba', 'c': 'aaaaa'}, 'bcbba': {'a': 'ba', 'b': 'ba', 'c': 'bcabc'}, 'acbacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbb': {'a': 'bcabc', 'b': 'bcabc', 'c': 'acbbc'}, 'aaac': {'a': 'aaaaa', 'b': 'aaacb', 'c': 'aaaaa'}, 'aaabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acacb': {'a': 'ba', 'b': 'bcabc', 'c': 'ba'}, 'bcaa': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'bbabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcc': {'a': 'bcabc', 'b': 'bcabc', 'c': 'cbccc'}, 'acccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abc': {'a': 'abca', 'b': 'abcb', 'c': 'abcc'}, 'ccacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbb': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'ccabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'b': {'a': 'ba', 'b': 'bb', 'c': 'bc'}, 'aaccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccbc': {'a': 'ba', 'b': 'ba', 'c': 'bcabc'}, 'cccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbcb': {'a': 'bcabc', 'b': 'ba', 'c': 'ba'}, 'bbb': {'a': 'bbba', 'b': 'bbbb', 'c': 'bbbc'}, 'bca': {'a': 'bcaa', 'b': 'bcab', 'c': 'bcac'}, 'bbbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abba': {'a': 'bcabc', 'b': 'bcabc', 'c': 'abbac'}, 'abbb': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'acac': {'a': 'aaaaa', 'b': 'acacb', 'c': 'aaaaa'}, 'aaabbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cababc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbac': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'abaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcab': {'a': 'bcabc', 'b': 'ba', 'c': 'ba'}, 'abbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ababb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbc': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcbcc'}, 'bbaa': {'a': 'bbaaa', 'b': 'bcabc', 'c': 'bcabc'}, 'ccaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcccb': {'a': 'ba', 'b': 'bcabc', 'c': 'ba'}, 'cbaac': {'a': 'bcabc', 'b': 'ba', 'c': 'ba'}, 'cbabb': {'a': 'ba', 'b': 'bcabc', 'c': 'ba'}, 'cbabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caabca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaca': {'a': 'aaaaa', 'b': 'bcabc', 'c': 'aaaaa'}, 'cb': {'a': 'cba', 'b': 'cbb', 'c': 'cbc'}, 'cbaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ac': {'a': 'aca', 'b': 'acb', 'c': 'acc'}, 'cbc': {'a': 'cbca', 'b': 'cbcb', 'c': 'cbcc'}, 'bbccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbbc': {'a': 'ba', 'b': 'ba', 'c': 'bcabc'}, 'cbabbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abca': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'bbcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbab': {'a': 'ba', 'b': 'ba', 'c': 'bcabc'}, 'acc': {'a': 'acca', 'b': 'accb', 'c': 'aacca'}, 'aabbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaaa': {'a': 'bcabc', 'b': 'ba', 'c': 'ba'}, 'bba': {'a': 'bbaa', 'b': 'bbab', 'c': 'bbac'}, 'cbab': {'a': 'bcabc', 'b': 'cbabb', 'c': 'cbabc'}, 'bcba': {'a': 'bcabc', 'b': 'bcbab', 'c': 'bcabc'}, 'ababaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaa': {'a': 'aaaa', 'b': 'aaab', 'c': 'aaac'}, 'ccccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cc': {'a': 'cca', 'b': 'ccb', 'c': 'ccc'}, 'acaacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acaa': {'a': 'aaaa', 'b': 'bcabc', 'c': 'aaaa'}, 'caaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbba': {'a': 'bbbaa', 'b': 'bcabc', 'c': 'bcabc'}, 'ccac': {'a': 'aaaaa', 'b': 'bcabc', 'c': 'aaaa'}, 'cabc': {'a': 'bcabc', 'b': 'cabcb', 'c': 'bcabc'}, 'cacb': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'abaac': {'a': 'ba', 'b': 'ba', 'c': 'bcabc'}, 'aab': {'a': 'aaba', 'b': 'aabb', 'c': 'aabc'}, 'aacba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcac': {'a': 'ba', 'b': 'bcabc', 'c': 'ba'}, 'bcabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acaaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abaabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccb': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bccbc'}, 'cccbc': {'a': 'ba', 'b': 'bcabc', 'c': 'ba'}, 'cbabca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcb': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'aaacb': {'a': 'ba', 'b': 'bcabc', 'c': 'ba'}, 'ab': {'a': 'aba', 'b': 'abb', 'c': 'abc'}, 'aaab': {'a': 'bcabc', 'b': 'aaabb', 'c': 'bcabc'}, 'bccaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bb': {'a': 'bba', 'b': 'bbb', 'c': 'bbc'}, 'cabbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caac': {'a': 'aaaaa', 'b': 'bcabc', 'c': 'aaaaa'}, 'bcb': {'a': 'bcba', 'b': 'bcbb', 'c': 'bcbc'}, 'accabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaabb': {'a': 'ba', 'b': 'ba', 'c': 'bcabc'}, 'acbc': {'a': 'bcabc', 'b': 'bcabc', 'c': 'bcabc'}, 'caba': {'a': 'bcabc', 'b': 'cabab', 'c': 'bcabc'}, 'bbacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcc': {'a': 'bcca', 'b': 'bccb', 'c': 'bccc'}, 'bbccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accab': {'a': 'ba', 'b': 'ba', 'c': 'bcabc'}, 'cabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaa': {'a': 'aaaaa', 'b': 'bcabc', 'c': 'aaaaa'}, 'ababac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabb': {'a': 'cabba', 'b': 'bcabc', 'c': 'bcabc'}, 'cbca': {'a': 'bcabc', 'b': 'cbcab', 'c': 'bcabc'}, 'cbbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aac': {'a': 'aaaa', 'b': 'aacb', 'c': 'aacc'}, 'abb': {'a': 'abba', 'b': 'abbb', 'c': 'abbc'}, 'accbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbcc': {'a': 'ba', 'b': 'ba', 'c': 'bcabc'}, 'cbcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caabc': {'a': 'bcabc', 'b': 'ba', 'c': 'ba'}, 'aa': {'a': 'aaa', 'b': 'aab', 'c': 'aac'}, 'acb': {'a': 'acba', 'b': 'acbb', 'c': 'acbc'}, 'cccb': {'a': 'bcabc', 'b': 'bcabc', 'c': 'cccbc'}, 'ccbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}}
target  query explanation status  test accuracy rnn score explanation score explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states lstar explanation score lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  false       false   True          100.0      None              None                              None         0.512613          None            None              []          0         0         0          347                    None                                    None             403.390942        False     0.05   0.05
target: F(aUb)
query: false


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.11687612533569336  s
EQ test took  0.0006654262542724609  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.1334400177001953  s
EQ test took  0.36785197257995605  s


epsilon= 0.05 delta= 0.01 max_trace_length= 50
query: false
final ltl:  false

Time taken to extract ltl: 0.6225695610046387
Interrupted due to time limit
overall guided extraction time took: 400.02
generated counterexamples were: (format: (counterexample, counterexample generation time))
('', 0.0)
('b', 0.15000000000009095)
('bc', 0.1799999999998363)
('ba', 0.20000000000027285)
('cb', 0.2199999999997999)
('bb', 0.25)
('ab', 0.2699999999999818)
('abb', 0.31999999999970896)
('abc', 0.3200000000001637)
('acb', 0.33999999999969077)
('bca', 0.3700000000003456)
('ccb', 0.38999999999987267)
('aba', 0.4099999999998545)
('bba', 0.43000000000029104)
('cbc', 0.4600000000000364)
('aab', 0.49000000000023647)
('cab', 0.5199999999999818)
('cbb', 0.569999999999709)
('bcb', 0.599999999999909)
('bbc', 0.6300000000001091)
('cba', 0.6599999999998545)
('bcc', 0.6700000000000728)
('bbb', 0.7000000000002728)
('bbba', 0.7300000000000182)
('bbca', 0.7699999999999818)
('bbbb', 0.7800000000002001)
('abca', 0.8200000000001637)
('bbab', 0.8399999999996908)
('cabc', 0.8099999999999454)
('acbc', 0.849999999999909)
('bbbc', 0.8900000000003274)
('abcb', 0.9099999999998545)
('cbaa', 0.9200000000000728)
('bbcb', 0.9499999999998181)
('abac', 0.9899999999997817)
('aabc', 1.0100000000002183)
('cbbc', 1.0399999999999636)
('bbac', 1.0599999999999454)
('aacb', 1.0700000000001637)
('bcaa', 1.0900000000001455)
('aaba', 1.1199999999998909)
('bcca', 1.1600000000003092)
('bbcc', 1.199999999999818)
('caab', 1.199999999999818)
('abbc', 1.2300000000000182)
('cbca', 1.2800000000002)
('ccbc', 1.2799999999997453)
('cbab', 1.3299999999999272)
('abab', 1.3600000000001273)
('abcc', 1.3699999999998909)
('cacb', 1.400000000000091)
('caba', 1.4200000000000728)
('abaa', 1.4699999999998)
('bccc', 1.4900000000002365)
('acba', 1.5099999999997635)
('cbcb', 1.5599999999999454)
('bbaa', 1.5700000000001637)
('abbb', 1.5799999999999272)
('cbcc', 1.6200000000003456)
('ccba', 1.6799999999998363)
('accb', 1.6899999999995998)
('ccab', 1.7199999999998)
('bcbb', 1.8099999999999454)
('bcab', 1.7799999999997453)
('bcac', 1.8200000000001637)
('cabb', 1.819999999999709)
('aaab', 1.8600000000001273)
('acbb', 1.900000000000091)
('ccbb', 1.9399999999995998)
('bccb', 1.9599999999995816)
('abba', 1.9800000000000182)
('cccb', 2.019999999999982)
('cbba', 2.0399999999999636)
('acab', 2.0700000000001637)
('cbac', 2.119999999999891)
('bcba', 2.149999999999636)
('cbbb', 2.1799999999998363)
('aabb', 2.1900000000000546)
('bcbc', 2.2100000000000364)
('bcbcc', 2.269999999999982)
('aabcc', 2.2800000000002)
('bbcbb', 2.300000000000182)
('aabaa', 2.3600000000001273)
('aabab', 2.3600000000001273)
('bccab', 2.3899999999998727)
('ccbcc', 2.4200000000000728)
('aaabb', 2.449999999999818)
('bbcaa', 2.4700000000002547)
('bccaa', 2.5099999999997635)
('cbaaa', 2.550000000000182)
('cbbcb', 2.5599999999999454)
('aabac', 2.5899999999996908)
('ccbbb', 2.6400000000003274)
('abcac', 2.6400000000003274)
('caaba', 2.680000000000291)
('cabbb', 2.7200000000002547)
('cccbb', 2.7399999999997817)
('ccabb', 2.7800000000002)
('aabca', 2.799999999999727)
('bbaab', 2.8200000000001637)
('bcbab', 2.849999999999909)
('aacab', 2.869999999999891)
('abaac', 2.8900000000003274)
('caacb', 2.930000000000291)
('bbcab', 2.9600000000000364)
('cbaba', 2.980000000000018)
('ccaba', 3.0)
('bbaba', 3.0299999999997453)
('bccca', 3.0799999999999272)
('aaacb', 3.0900000000001455)
('bbccc', 3.130000000000109)
('abccb', 3.150000000000091)
('cabca', 3.2199999999998)
('acbac', 3.230000000000018)
('ccbac', 3.269999999999982)
('cccba', 3.2899999999999636)
('cabbc', 3.3399999999996908)
('acbcc', 3.380000000000109)
('acbab', 3.3799999999996544)
('cbbbc', 3.4299999999998363)
('caabb', 3.430000000000291)
('bbbbc', 3.480000000000018)
('cacbb', 3.480000000000018)
('ccbca', 3.519999999999982)
('bbbca', 3.550000000000182)
('bbcbc', 3.600000000000364)
('cbabc', 3.6100000000001273)
('aaccb', 3.6600000000003092)
('abbaa', 3.6900000000000546)
('cccab', 3.6900000000000546)
('aaabc', 3.7100000000000364)
('cacbc', 3.7399999999997817)
('ccabc', 3.7899999999999636)
('cbbac', 3.8400000000001455)
('bbacc', 3.849999999999909)
('ccbaa', 3.8900000000003274)
('cbcca', 3.8899999999998727)
('accbb', 3.9400000000000546)
('abccc', 3.9700000000002547)
('cbcab', 4.0)
('bcbaa', 4.039999999999964)
('acbbb', 4.039999999999964)
('cbcbb', 4.0900000000001455)
('ababb', 4.109999999999673)
('cabcc', 4.170000000000073)
('bccac', 4.180000000000291)
('caccb', 4.199999999999818)
('acabb', 4.210000000000036)
('abbab', 4.239999999999782)
('ababa', 4.279999999999745)
('aacbb', 4.299999999999727)
('bccba', 4.339999999999691)
('bcaac', 4.300000000000182)
('bbbcb', 4.289999999999964)
('abbca', 4.319999999999709)
('bcbac', 4.329999999999927)
('abacb', 4.389999999999873)
('abcbc', 4.399999999999636)
('acbaa', 4.460000000000036)
('cacab', 4.5)
('bbbbb', 4.4900000000002365)
('ababc', 4.519999999999982)
('bbbcc', 4.559999999999945)
('cbacb', 4.570000000000164)

Time taken to extract lstar-dfa: 399.9888229370117
number of states of the dfa: 185
returned flag: False
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'c'}, 'cbab': {'a': 'ccabc', 'b': 'ba', 'c': 'ccabc'}, 'bcba': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ccabc'}, 'ccabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccab': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ccabc'}, 'cbbc': {'a': 'ba', 'b': 'ccabc', 'c': 'ba'}, 'cbcb': {'a': 'ba', 'b': 'ccabc', 'c': 'ba'}, 'bcbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaa': {'a': 'caaa', 'b': 'aaab', 'c': 'aaac'}, 'aacab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cc': {'a': 'cca', 'b': 'ccb', 'c': 'ccc'}, 'aacb': {'a': 'ba', 'b': 'ccabc', 'c': 'ba'}, 'caaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcca': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ccabc'}, 'aabca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cca': {'a': 'caaa', 'b': 'ccab', 'c': 'caaa'}, 'bbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccc': {'a': 'aaac', 'b': 'cccb', 'c': 'caaa'}, 'bcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbb': {'a': 'ba', 'b': 'ccabc', 'c': 'ccabc'}, 'ababa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabc': {'a': 'ccabc', 'b': 'ba', 'c': 'ccabc'}, 'cacb': {'a': 'ba', 'b': 'ccabc', 'c': 'ccabc'}, 'abaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aab': {'a': 'aaba', 'b': 'ccabc', 'c': 'aabc'}, 'bbca': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ba'}, 'ccaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabc': {'a': 'ccabc', 'b': 'ba', 'c': 'ccabc'}, 'aca': {'a': 'caaa', 'b': 'acab', 'c': 'caaa'}, 'abaa': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'ccbc': {'a': 'ccabc', 'b': 'ba', 'c': 'ccabc'}, 'abab': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ccabc'}, 'acbb': {'a': 'ba', 'b': 'ccabc', 'c': 'ba'}, 'cbba': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'aaac': {'a': 'caaa', 'b': 'ccabc', 'c': 'caaa'}, 'aabac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbb': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'abcc': {'a': 'ba', 'b': 'ccabc', 'c': 'ccabc'}, 'bcaa': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'ccba': {'a': 'ccabc', 'b': 'ba', 'c': 'ccabc'}, 'cccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccca': {'a': 'caaa', 'b': 'ccabc', 'c': 'caaa'}, 'cbcc': {'a': 'ccabc', 'b': 'ba', 'c': 'ba'}, 'bccb': {'a': 'ccabc', 'b': 'ba', 'c': 'ba'}, 'acbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acba': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ccabc'}, 'abccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcb': {'a': 'ba', 'b': 'ccabc', 'c': 'ccabc'}, 'aaacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ab': {'a': 'aba', 'b': 'abb', 'c': 'abc'}, 'aaab': {'a': 'ba', 'b': 'ccabc', 'c': 'ccabc'}, 'accbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abc': {'a': 'abca', 'b': 'abcb', 'c': 'abcc'}, 'caccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbb': {'a': 'ba', 'b': 'ccabc', 'c': 'ba'}, 'aabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacc': {'a': 'caaa', 'b': 'ccabc', 'c': 'caaa'}, 'aaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ababc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bb': {'a': 'bba', 'b': 'bbb', 'c': 'bbc'}, 'caca': {'a': 'caaa', 'b': 'ccabc', 'c': 'caaa'}, 'b': {'a': 'ba', 'b': 'bb', 'c': 'bc'}, 'bbbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abac': {'a': 'ba', 'b': 'ccabc', 'c': 'ba'}, 'bbbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caac': {'a': 'caaa', 'b': 'ccabc', 'c': 'caaa'}, 'bbb': {'a': 'ccabc', 'b': 'bbbb', 'c': 'bbbc'}, 'caaa': {'a': 'caaa', 'b': 'ba', 'c': 'caaa'}, 'abcbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bca': {'a': 'bcaa', 'b': 'ccabc', 'c': 'ccabc'}, 'bbbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcb': {'a': 'bcba', 'b': 'ccabc', 'c': 'bcbc'}, 'bcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caab': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ba'}, 'cbaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abba': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ba'}, 'bccca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaba': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ccabc'}, 'caba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbc': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'cbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacc': {'a': 'caaa', 'b': 'ccabc', 'c': 'caaa'}, 'cba': {'a': 'cbaa', 'b': 'cbab', 'c': 'ccabc'}, 'cccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcc': {'a': 'bcca', 'b': 'bccb', 'c': 'bccc'}, 'cab': {'a': 'ccabc', 'b': 'cabb', 'c': 'cabc'}, 'cbbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbac': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'cabca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcc': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'bbcbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ababb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbab': {'a': 'ccabc', 'b': 'ba', 'c': 'ba'}, 'aba': {'a': 'abaa', 'b': 'abab', 'c': 'abac'}, 'accb': {'a': 'ba', 'b': 'ccabc', 'c': 'ba'}, 'acbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccb': {'a': 'ccba', 'b': 'ccbb', 'c': 'ccbc'}, 'bbbc': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ccabc'}, 'ccbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabb': {'a': 'ba', 'b': 'ccabc', 'c': 'ccabc'}, 'bcbc': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'acab': {'a': 'ba', 'b': 'ccabc', 'c': 'ba'}, 'cbca': {'a': 'ba', 'b': 'ccabc', 'c': 'ba'}, 'caabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caa': {'a': 'caaa', 'b': 'caab', 'c': 'aaac'}, 'aabab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaa': {'a': 'ba', 'b': 'ccabc', 'c': 'ba'}, 'aac': {'a': 'aaac', 'b': 'aacb', 'c': 'aaac'}, 'abbc': {'a': 'ccabc', 'b': 'ba', 'c': 'ba'}, 'aabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abb': {'a': 'abba', 'b': 'ccabc', 'c': 'abbc'}, 'ca': {'a': 'caa', 'b': 'cab', 'c': 'cac'}, 'cacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cac': {'a': 'aaac', 'b': 'cacb', 'c': 'aaac'}, 'aacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bc': {'a': 'bca', 'b': 'bcb', 'c': 'bcc'}, 'bbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccc': {'a': 'ccabc', 'b': 'ba', 'c': 'ba'}, 'abcb': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'aaca': {'a': 'caaa', 'b': 'ccabc', 'c': 'caaa'}, 'bbc': {'a': 'bbca', 'b': 'bbcb', 'c': 'bbcc'}, 'bcbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cb': {'a': 'cba', 'b': 'cbb', 'c': 'cbc'}, 'ac': {'a': 'aca', 'b': 'acb', 'c': 'acc'}, 'cbb': {'a': 'cbba', 'b': 'cbbb', 'c': 'cbbc'}, 'cbc': {'a': 'cbca', 'b': 'cbcb', 'c': 'cbcc'}, 'cbaa': {'a': 'ccabc', 'b': 'ba', 'c': 'ba'}, 'bbccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'c': {'a': 'ca', 'b': 'cb', 'c': 'cc'}, 'abca': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'bccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aa': {'a': 'aaa', 'b': 'aab', 'c': 'aac'}, 'acb': {'a': 'acba', 'b': 'acbb', 'c': 'acbc'}, 'acc': {'a': 'caaa', 'b': 'accb', 'c': 'caaa'}, 'a': {'a': 'aa', 'b': 'ab', 'c': 'ac'}, 'cccb': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ba'}, 'bba': {'a': 'bbaa', 'b': 'bbab', 'c': 'bbac'}}
target  query explanation status  test accuracy rnn score explanation score explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states lstar explanation score lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  false       false   True          100.0      None              None                              None          0.62257          None            None              []          0         0         0          185                    None                                    None             399.988823        False     0.05   0.01
target: F(aUb)
query: false


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.11861586570739746  s
EQ test took  0.0006496906280517578  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.12175440788269043  s
EQ test took  1.07979154586792  s


epsilon= 0.01 delta= 0.1 max_trace_length= 50
query: false
final ltl:  false

Time taken to extract ltl: 1.324615478515625
Interrupted due to time limit
overall guided extraction time took: 402.5899999999997
generated counterexamples were: (format: (counterexample, counterexample generation time))
('', 0.0)
('b', 0.009999999999763531)
('ba', 0.010000000000218279)
('bb', 0.01999999999998181)
('bc', 0.009999999999763531)
('ab', 0.009999999999763531)
('bba', 0.03000000000020009)
('abc', 0.01999999999998181)
('bbb', 0.03000000000020009)
('aba', 0.03000000000020009)
('bca', 0.03000000000020009)
('bcc', 0.03000000000020009)
('cbb', 0.03999999999996362)
('cb', 0.03999999999996362)
('cab', 0.03000000000020009)
('aab', 0.03999999999996362)
('bbc', 0.03999999999996362)
('bcb', 0.03999999999996362)
('abb', 0.03999999999996362)
('acb', 0.0500000000001819)
('ccb', 0.0500000000001819)
('bbac', 0.05999999999994543)
('bccc', 0.05999999999994543)
('caba', 0.05999999999994543)
('bcab', 0.07000000000016371)
('acab', 0.05999999999994543)
('cacb', 0.07000000000016371)
('aaab', 0.06999999999970896)
('abbb', 0.07000000000016371)
('accb', 0.06999999999970896)
('ccbb', 0.08000000000038199)
('bcca', 0.07999999999992724)
('aaba', 0.07999999999992724)
('ccba', 0.07999999999992724)
('caab', 0.07999999999992724)
('ccbc', 0.09000000000014552)
('acbb', 0.09000000000014552)
('acba', 0.09000000000014552)
('bbab', 0.09000000000014552)
('bcba', 0.09999999999990905)
('cccb', 0.09999999999990905)
('abab', 0.1000000000003638)
('bbcc', 0.09999999999990905)
('bbbb', 0.11000000000012733)
('cabc', 0.09999999999990905)
('bcbb', 0.11000000000012733)
('abaa', 0.11999999999989086)
('aabc', 0.11000000000012733)
('abac', 0.11999999999989086)
('bbcb', 0.12000000000034561)
('ccab', 0.12000000000034561)
('bbbc', 0.13000000000010914)
('acbc', 0.13000000000010914)
('bccb', 0.13999999999987267)
('abba', 0.13999999999987267)
('abbc', 0.15000000000009095)
('bcbc', 0.13999999999987267)
('abcb', 0.15000000000009095)
('bbaa', 0.15000000000009095)
('abcc', 0.15000000000009095)
('aabb', 0.15000000000009095)
('aacb', 0.15999999999985448)
('bbba', 0.15999999999985448)
('bcaa', 0.15000000000009095)
('abca', 0.15999999999985448)
('bbca', 0.17000000000007276)
('cabb', 0.17000000000007276)
('bcac', 0.17000000000007276)
('acbbb', 0.17000000000007276)
('bbcaa', 0.169999999999618)
('bccba', 0.18000000000029104)
('bccca', 0.1799999999998363)
('bcbaa', 0.1799999999998363)
('bbaac', 0.19000000000005457)
('aaacb', 0.19000000000005457)
('bccbb', 0.18999999999959982)
('caacb', 0.18999999999959982)
('aaaba', 0.19000000000005457)
('aacba', 0.20000000000027285)
('bccab', 0.1999999999998181)
('bbacb', 0.21000000000003638)
('ccbbb', 0.1999999999998181)
('bcccc', 0.2199999999997999)
('acccb', 0.1999999999998181)
('acaab', 0.21000000000003638)
('abacb', 0.21000000000003638)
('cabac', 0.2300000000000182)
('ccbab', 0.22000000000025466)
('cabbc', 0.22000000000025466)
('abccc', 0.2300000000000182)
('bccaa', 0.2300000000000182)
('bcbcc', 0.2300000000000182)
('aaaab', 0.23999999999978172)
('caaba', 0.24000000000023647)
('bbccc', 0.24000000000023647)
('bbccb', 0.25)
('bbaca', 0.25)
('bbaaa', 0.25)
('cacbc', 0.25)
('abcac', 0.25999999999976353)
('aacbc', 0.25)
('cccbb', 0.25999999999976353)
('bbcbb', 0.25)
('caccb', 0.25999999999976353)
('bbbaa', 0.2600000000002183)
('aabbb', 0.2699999999999818)
('cabba', 0.27999999999974534)
('ccacb', 0.2699999999999818)
('bccac', 0.2800000000002001)
('abbba', 0.2800000000002001)
('cabab', 0.2899999999999636)
('acbaa', 0.2899999999999636)
('bcabb', 0.2899999999999636)
('acbca', 0.2899999999999636)
('bbbba', 0.3000000000001819)
('cacbb', 0.3000000000001819)
('abaab', 0.3000000000001819)
('abcaa', 0.3000000000001819)
('accbb', 0.30999999999994543)
('abbbc', 0.3100000000004002)
('bbaba', 0.31999999999970896)
('acabc', 0.30999999999994543)
('ccbac', 0.3200000000001637)
('bcaaa', 0.30999999999994543)
('abccb', 0.31999999999970896)
('acbcb', 0.3200000000001637)
('bbbbc', 0.32999999999992724)
('aabac', 0.32999999999992724)
('abbac', 0.32999999999992724)
('bcccb', 0.330000000000382)
('ababc', 0.33999999999969077)
('aabcb', 0.3400000000001455)
('cacba', 0.34999999999990905)
('caabb', 0.34999999999990905)
('bcabc', 0.3400000000001455)
('abcbb', 0.36000000000012733)
('accab', 0.34999999999990905)
('aacab', 0.34999999999990905)
('bbcab', 0.36000000000012733)
('aabcc', 0.36000000000012733)
('cacab', 0.36000000000012733)
('ccccb', 0.36999999999989086)
('aacbb', 0.38000000000010914)
('bcacb', 0.3700000000003456)
('acbbc', 0.36999999999989086)
('acbba', 0.36999999999989086)
('bbabc', 0.38999999999987267)
('abaca', 0.38000000000010914)
('acabb', 0.40000000000009095)
('aabaa', 0.38999999999987267)
('abbbb', 0.38999999999987267)
('bcbba', 0.38999999999987267)
('ccaab', 0.3999999999996362)
('abcab', 0.40000000000009095)
('bbcbc', 0.40000000000009095)
('abbca', 0.40000000000009095)
('acbab', 0.42000000000007276)
('bbacc', 0.4099999999998545)
('bcbab', 0.40000000000009095)
('cabca', 0.4099999999998545)
('acbcc', 0.42000000000007276)
('bcbcb', 0.42000000000007276)
('accbc', 0.41000000000030923)
('aabab', 0.4299999999998363)
('aaabb', 0.44000000000005457)
('abbcc', 0.43000000000029104)
('bbcca', 0.4399999999995998)
('cccba', 0.4299999999998363)
('bbcba', 0.44000000000005457)
('ccbba', 0.4499999999998181)
('cabcb', 0.4499999999998181)
('abcca', 0.44000000000005457)
('bbabb', 0.4499999999998181)
('bbbbb', 0.4600000000000364)
('cccab', 0.4600000000000364)
('bcbca', 0.4600000000000364)
('accba', 0.4699999999997999)
('caabc', 0.47000000000025466)
('bcbac', 0.4699999999997999)
('aabba', 0.4699999999997999)
('ccbbc', 0.47000000000025466)
('abaac', 0.4899999999997817)
('abcbc', 0.4899999999997817)
('ccbca', 0.49000000000023647)
('bcbbb', 0.4800000000000182)
('bbaab', 0.5)
('ccbaa', 0.5)
('bcacc', 0.49000000000023647)
('ababa', 0.4899999999997817)
('bbcac', 0.4899999999997817)
('cccbc', 0.5099999999997635)
('aabbc', 0.5)
('aaccb', 0.5100000000002183)
('abaaa', 0.5099999999997635)
('bcaba', 0.5199999999999818)
('ccabc', 0.5300000000002001)
('ccaba', 0.5199999999999818)
('ccbcc', 0.5299999999997453)
('caaab', 0.5300000000002001)
('cabcc', 0.5399999999999636)
('cabbb', 0.5400000000004184)
('bcaab', 0.5399999999999636)
('abbaa', 0.5599999999999454)
('bbbcb', 0.5599999999999454)
('bcaca', 0.5599999999999454)
('acaba', 0.5499999999997272)
('acacb', 0.5500000000001819)
('bcaac', 0.5500000000001819)
('bbbab', 0.5599999999999454)
('bbbcc', 0.5700000000001637)
('abcba', 0.5599999999999454)
('bcbbc', 0.569999999999709)
('abbab', 0.5700000000001637)
('cabaa', 0.569999999999709)
('abbcb', 0.569999999999709)
('ababb', 0.5799999999999272)
('ccabb', 0.5799999999999272)
('aaabc', 0.5799999999999272)
('bbbca', 0.5900000000001455)
('aabca', 0.599999999999909)
('abacc', 0.6100000000001273)
('bbbac', 0.6199999999998909)
('acbac', 0.6099999999996726)
('bccbc', 0.6100000000001273)
('ccbcb', 0.6199999999998909)
('acaacb', 0.6300000000001091)
('cabbac', 0.6400000000003274)
('aabbcb', 0.6399999999998727)
('aaaccb', 0.6300000000001091)
('bcaccc', 0.6199999999998909)
('cacbba', 0.6100000000001273)
('bbcacb', 0.6199999999998909)
('ccbccb', 0.6299999999996544)
('ccbcac', 0.6300000000001091)
('bcbaca', 0.6399999999998727)
('cabcac', 0.6400000000003274)
('ccaacb', 0.6399999999998727)
('abacca', 0.650000000000091)
('bcccbb', 0.6399999999998727)
('bbacba', 0.6599999999998545)
('abaacb', 0.6600000000003092)
('bbaacc', 0.6600000000003092)
('bbbbaa', 0.6499999999996362)
('bcaccb', 0.6700000000000728)
('bbcbca', 0.6599999999998545)
('abbbbc', 0.680000000000291)
('acabca', 0.6799999999998363)
('bcabcc', 0.6700000000000728)
('bcacbc', 0.6899999999995998)
('abccaa', 0.6900000000000546)
('acacbc', 0.6799999999998363)
('abbcac', 0.6799999999998363)
('bcbaac', 0.6900000000000546)
('bccbba', 0.6900000000000546)
('acbbbc', 0.6999999999998181)
('abaaca', 0.6999999999998181)
('abacbc', 0.6999999999998181)
('acbccb', 0.7100000000000364)
('abccca', 0.6999999999998181)
('aabbaa', 0.7199999999997999)
('cccbca', 0.7300000000000182)
('acabbc', 0.6999999999998181)
('bbccca', 0.7200000000002547)
('aaccba', 0.7100000000000364)
('aacccb', 0.7199999999997999)
('cabaac', 0.7200000000002547)
('ccaccb', 0.7300000000000182)
('abcbaa', 0.7300000000000182)
('abacac', 0.7300000000000182)
('aababa', 0.7399999999997817)
('abccab', 0.7399999999997817)
('aabaca', 0.7400000000002365)
('bbbbca', 0.7399999999997817)
('ccabaa', 0.75)
('acbbbb', 0.75)
('cababa', 0.75)
('bcaaca', 0.75)
('acabcb', 0.7600000000002183)
('abcbcc', 0.7600000000002183)
('cabbca', 0.75)
('ccbaac', 0.7699999999999818)
('abbaba', 0.7699999999999818)
('ccbabc', 0.7699999999999818)
('acbbaa', 0.7699999999999818)
('bbccab', 0.7799999999997453)
('abacba', 0.7799999999997453)
('acaaba', 0.7899999999999636)
('abcbbb', 0.8000000000001819)
('acbbba', 0.7899999999999636)
('bccbbb', 0.7899999999999636)
('acacbb', 0.8000000000001819)
('bbbacb', 0.7999999999997272)
('ccbbba', 0.7999999999997272)
('bbbbbc', 0.8000000000001819)
('cabbbc', 0.8099999999999454)
('ccbaab', 0.8099999999999454)
('bbbbcb', 0.8100000000004002)
('bbbbba', 0.8200000000001637)
('aaabcc', 0.8200000000001637)
('bcbbba', 0.819999999999709)
('abcbab', 0.8200000000001637)
('abbcbb', 0.8299999999999272)
('acbabc', 0.849999999999909)
('caabac', 0.830000000000382)
('cacccb', 0.8500000000003638)
('ccbbcc', 0.8400000000001455)
('acbcac', 0.8200000000001637)
('ababac', 0.8600000000001273)
('aababc', 0.8400000000001455)
('bcacca', 0.8500000000003638)
('bbccbb', 0.849999999999909)
('ccbaba', 0.8600000000001273)
('bccaaa', 0.8500000000003638)
('ccbcbb', 0.849999999999909)
('abcaca', 0.8699999999998909)
('aacbbc', 0.8700000000003456)
('acbcca', 0.8799999999996544)
('bbcbbb', 0.8699999999998909)
('bbbcba', 0.8699999999998909)
('caacbb', 0.8800000000001091)
('ababab', 0.8699999999998909)
('bcaacb', 0.8899999999998727)
('bbcbcb', 0.8899999999998727)
('caaaab', 0.900000000000091)
('abbaca', 0.8800000000001091)
('acabcc', 0.900000000000091)
('bbbaaa', 0.9200000000000728)
('bcbabc', 0.8900000000003274)
('bbcccb', 0.900000000000091)
('bbcbaa', 0.9100000000003092)
('bcaabb', 0.900000000000091)
('cccabb', 0.9100000000003092)
('acbccc', 0.9200000000000728)
('accacb', 0.919999999999618)
('abaacc', 0.900000000000091)
('cabaca', 0.9200000000000728)
('bcbacc', 0.9200000000000728)
('abcaac', 0.9200000000000728)
('abbabc', 0.9400000000000546)
('bcabab', 0.9400000000000546)
('cabbba', 0.9400000000000546)
('ccbbcb', 0.9400000000000546)
('aaabaa', 0.9399999999995998)
('aabcba', 0.9499999999998181)
('bbabac', 0.9499999999998181)
('bbbaac', 0.9499999999998181)
('aabcbc', 0.9600000000000364)
('bcbbca', 0.9600000000000364)
('acbaca', 0.9500000000002728)
('bbccac', 0.9600000000000364)
('bbabba', 0.9800000000000182)
('cababc', 0.9900000000002365)
('aacaba', 0.9800000000000182)
('aacabb', 0.9699999999997999)
('bbbbab', 1.0300000000002)
('bbaabc', 1.0100000000002183)
('bbcbcc', 1.0199999999999818)
('bbabab', 1.0199999999999818)
('caabba', 1.0199999999999818)
('bbbbac', 1.0299999999997453)
('aaabca', 1.0300000000002)
('abacbb', 1.0399999999999636)
('cacbaa', 1.0399999999999636)
('aabcca', 1.0399999999999636)
('aacbcc', 1.0399999999999636)
('bcabca', 1.0100000000002183)
('abcabb', 1.0199999999999818)
('bbbabc', 1.0399999999999636)
('bcbcaa', 1.0199999999999818)
('cabcbb', 1.0399999999999636)
('ccaaab', 1.050000000000182)
('cacacb', 1.0399999999999636)
('acaccb', 1.0499999999997272)
('acbacc', 1.0300000000002)
('caacbc', 1.050000000000182)
('acccbb', 1.050000000000182)
('ccbcca', 1.0599999999999454)

Time taken to extract lstar-dfa: 402.57296109199524
number of states of the dfa: 418
returned flag: False
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'c'}, 'aaaa': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaaa'}, 'ccab': {'a': 'ccaba', 'b': 'aacbbc', 'c': 'aacbbc'}, 'aacbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacb': {'a': 'aacbbc', 'b': 'aacbb', 'c': 'aacbc'}, 'bcabc': {'a': 'aacbbc', 'b': 'ba', 'c': 'aacbbc'}, 'bcbcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcca': {'a': 'bccaa', 'b': 'aacbbc', 'c': 'aacbbc'}, 'acabc': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'cca': {'a': 'ccaa', 'b': 'ccab', 'c': 'ccac'}, 'abaacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccc': {'a': 'ccca', 'b': 'cccb', 'c': 'aaaa'}, 'aacbc': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'bcbca': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'bbcccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabc': {'a': 'aacbbc', 'b': 'aabcb', 'c': 'aabcc'}, 'aca': {'a': 'acaa', 'b': 'acab', 'c': 'acac'}, 'abaa': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'abaac'}, 'abab': {'a': 'ababa', 'b': 'aacbbc', 'c': 'aacbbc'}, 'caccc': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaaa'}, 'bbbacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaba': {'a': 'ba', 'b': 'aacbbc', 'c': 'aacbbc'}, 'acbccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcc': {'a': 'abcca', 'b': 'aacbbc', 'c': 'abccc'}, 'abbac': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'accc': {'a': 'aaaaa', 'b': 'acccb', 'c': 'aaaaa'}, 'ccba': {'a': 'ccbaa', 'b': 'ccbab', 'c': 'aacbbc'}, 'acbcc': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'ccca': {'a': 'aaaaa', 'b': 'cccab', 'c': 'aaaaa'}, 'acaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabcbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acba': {'a': 'aacbbc', 'b': 'acbab', 'c': 'acbac'}, 'abacbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcba': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'ba'}, 'abacb': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'acbca': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'acabb': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'abbab': {'a': 'aacbbc', 'b': 'ba', 'c': 'aacbbc'}, 'abbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acabca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbba': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'aabbc': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'abacc': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'abac': {'a': 'abaca', 'b': 'abacb', 'c': 'abacc'}, 'aabbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbb': {'a': 'aacbbc', 'b': 'bcbbb', 'c': 'bcbbc'}, 'caab': {'a': 'caaba', 'b': 'caabb', 'c': 'aacbbc'}, 'acacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbbb': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'abcab': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'bbcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabba': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'cabbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabca': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'ccbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcc': {'a': 'bbcca', 'b': 'bbccb', 'c': 'bbccc'}, 'ccaacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcca': {'a': 'ba', 'b': 'aacbbc', 'c': 'aacbbc'}, 'aabaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbab': {'a': 'bbaba', 'b': 'bbabb', 'c': 'aacbbc'}, 'aba': {'a': 'abaa', 'b': 'abab', 'c': 'abac'}, 'aabcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accb': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'ccb': {'a': 'ccba', 'b': 'ccbb', 'c': 'ccbc'}, 'cacccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aababc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabab': {'a': 'aacbbc', 'b': 'ba', 'c': 'aacbbc'}, 'abaaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbc': {'a': 'abbca', 'b': 'abbcb', 'c': 'aacbbc'}, 'ca': {'a': 'caa', 'b': 'cab', 'c': 'cac'}, 'bbabba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacbb': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'abbcb': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'acbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbbb': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'abcb': {'a': 'abcba', 'b': 'abcbb', 'c': 'abcbc'}, 'ccbcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabcb': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'cbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaac': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaaa'}, 'abcbb': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'bbbbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbabb': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'bccbb': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'ba'}, 'abcabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caacb': {'a': 'ba', 'b': 'aacbbc', 'c': 'aacbbc'}, 'cabaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'a': {'a': 'aa', 'b': 'ab', 'c': 'ac'}, 'abbbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abaacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccc': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaaa'}, 'cababa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caabba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcac': {'a': 'aacbbc', 'b': 'bcacb', 'c': 'bcacc'}, 'ba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbb': {'a': 'bbbba', 'b': 'bbbbb', 'c': 'bbbbc'}, 'ababa': {'a': 'ba', 'b': 'aacbbc', 'c': 'aacbbc'}, 'bcaac': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'ba'}, 'acbbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbca': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'bbcac'}, 'caabac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbc': {'a': 'ccbca', 'b': 'ccbcb', 'c': 'ccbcc'}, 'cacbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcabca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabcb': {'a': 'aacbbc', 'b': 'ba', 'c': 'aacbbc'}, 'bcacca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbcb': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'cccab': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'acbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbb': {'a': 'aacbbc', 'b': 'ba', 'c': 'aacbbc'}, 'ccbaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbac': {'a': 'aacbbc', 'b': 'ba', 'c': 'aacbbc'}, 'abccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcacb': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'bbccac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabcc': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'cacc': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaa'}, 'ababc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaccb': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'bbcbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acaac': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaaa'}, 'bcaba': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'caca': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaa'}, 'bbbbc': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'ba'}, 'bcab': {'a': 'bcaba', 'b': 'aacbbc', 'c': 'bcabc'}, 'bcbacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaa': {'a': 'aaaa', 'b': 'aacbbc', 'c': 'aaaaa'}, 'acbbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcbc': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'bbabac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbcc': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'cabac': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'bccca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaba': {'a': 'aacbbc', 'b': 'aabab', 'c': 'aabac'}, 'aaaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacc': {'a': 'aaaaa', 'b': 'aaccb', 'c': 'aaaa'}, 'cccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbbb': {'a': 'aacbbc', 'b': 'ba', 'c': 'aacbbc'}, 'cab': {'a': 'caba', 'b': 'cabb', 'c': 'cabc'}, 'accac': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaaa'}, 'bcaacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acca': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaa'}, 'abcaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabab': {'a': 'aacbbc', 'b': 'ba', 'c': 'aacbbc'}, 'caacbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcbc': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'aaaba': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'ccbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbc': {'a': 'aacbbc', 'b': 'bbbcb', 'c': 'aacbbc'}, 'bbaabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbaa': {'a': 'ba', 'b': 'aacbbc', 'c': 'aacbbc'}, 'bcbaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acab': {'a': 'aacbbc', 'b': 'acabb', 'c': 'acabc'}, 'bcacc': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'caabb': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'caa': {'a': 'caaa', 'b': 'caab', 'c': 'caac'}, 'aababa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabb': {'a': 'aabba', 'b': 'aacbbc', 'c': 'aabbc'}, 'bbcbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cac': {'a': 'caca', 'b': 'cacb', 'c': 'cacc'}, 'abcbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbaa': {'a': 'aacbbc', 'b': 'ba', 'c': 'aacbbc'}, 'abcaa': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'aacbb': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'bbcacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bc': {'a': 'bca', 'b': 'bcb', 'c': 'bcc'}, 'bbbab': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'bbbabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccc': {'a': 'aacbbc', 'b': 'bcccb', 'c': 'aacbbc'}, 'acccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbc': {'a': 'bbca', 'b': 'bbcb', 'c': 'bbcc'}, 'ccacc': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaaa'}, 'bcbbb': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'abccc': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'acbbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'c': {'a': 'ca', 'b': 'cb', 'c': 'cc'}, 'ababab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaccc': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaaa'}, 'bbbcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acabbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abccaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbac': {'a': 'aacbbc', 'b': 'ba', 'c': 'aacbbc'}, 'acbcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacab': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'ba'}, 'ccbbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaaaa': {'a': 'aaaaa', 'b': 'ba', 'c': 'aaaaa'}, 'bcbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbab': {'a': 'aacbbc', 'b': 'ba', 'c': 'aacbbc'}, 'bcabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcac': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'ccbaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaba': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'bcbbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbb': {'a': 'acbba', 'b': 'acbbb', 'c': 'aacbbc'}, 'aaac': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaa'}, 'aaabc': {'a': 'aacbbc', 'b': 'ba', 'c': 'aacbbc'}, 'aabac': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'acacb': {'a': 'ba', 'b': 'aacbbc', 'c': 'aacbbc'}, 'ccbaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaa': {'a': 'aacbbc', 'b': 'bcaab', 'c': 'bcaac'}, 'bbabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acccb': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'acaab': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'abaca': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'accbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaab': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'abc': {'a': 'abca', 'b': 'abcb', 'c': 'abcc'}, 'cabcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabba': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'ccbb': {'a': 'aacbbc', 'b': 'ccbbb', 'c': 'ccbbc'}, 'cabaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbaa': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'bcaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'b': {'a': 'ba', 'b': 'bb', 'c': 'bc'}, 'bccbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbba': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'accacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbcb': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'bbb': {'a': 'bbba', 'b': 'bbbb', 'c': 'bbbc'}, 'bca': {'a': 'bcaa', 'b': 'bcab', 'c': 'bcac'}, 'bbbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abba': {'a': 'aacbbc', 'b': 'abbab', 'c': 'abbac'}, 'cacbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbb': {'a': 'aacbbc', 'b': 'abbbb', 'c': 'aacbbc'}, 'abcaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acac': {'a': 'aaaaa', 'b': 'acacb', 'c': 'aaaa'}, 'bccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cababc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbac': {'a': 'aacbbc', 'b': 'bbacb', 'c': 'aacbbc'}, 'abaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbca': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'ababb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaab': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'bcbc': {'a': 'bcbca', 'b': 'aacbbc', 'c': 'aacbbc'}, 'cacac': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaaa'}, 'bbaa': {'a': 'aacbbc', 'b': 'bbaab', 'c': 'bbaac'}, 'bbbbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcccb': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'aaabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaca': {'a': 'aaaaa', 'b': 'aacab', 'c': 'aaaaa'}, 'cb': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'aacccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ac': {'a': 'aca', 'b': 'acb', 'c': 'acc'}, 'abccca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaaa': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaaa'}, 'bbccc': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'ba'}, 'bbcbb': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'bcbbc': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'acacc': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaaa'}, 'ccbbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abca': {'a': 'abcaa', 'b': 'abcab', 'c': 'abcac'}, 'bbcba': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'bcbab': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'acc': {'a': 'acca', 'b': 'accb', 'c': 'accc'}, 'aabbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bba': {'a': 'bbaa', 'b': 'bbab', 'c': 'bbac'}, 'bcba': {'a': 'bcbaa', 'b': 'bcbab', 'c': 'bcbac'}, 'aaa': {'a': 'aaaa', 'b': 'aaab', 'c': 'aaac'}, 'ccccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cc': {'a': 'cca', 'b': 'ccb', 'c': 'ccc'}, 'acaacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acaa': {'a': 'aaaaa', 'b': 'acaab', 'c': 'aaaa'}, 'abbaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaba': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'bcabab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbba': {'a': 'bbbaa', 'b': 'bbbab', 'c': 'bbbac'}, 'ccac': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaa'}, 'cabc': {'a': 'cabca', 'b': 'cabcb', 'c': 'aacbbc'}, 'cacb': {'a': 'cacba', 'b': 'cacbb', 'c': 'aacbbc'}, 'abaac': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'abbcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aab': {'a': 'aaba', 'b': 'aabb', 'c': 'aabc'}, 'bcacbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcac': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'bcabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbccca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccb': {'a': 'aacbbc', 'b': 'bccbb', 'c': 'aacbbc'}, 'cccbc': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'bbcb': {'a': 'bbcba', 'b': 'bbcbb', 'c': 'bbcbc'}, 'aaacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ab': {'a': 'aba', 'b': 'abb', 'c': 'abc'}, 'aaab': {'a': 'aaaba', 'b': 'aacbbc', 'c': 'aaabc'}, 'bcaaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccaa': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'acbbb': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'bbccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaabca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaacc': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaaa'}, 'abbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bb': {'a': 'bba', 'b': 'bbb', 'c': 'bbc'}, 'bbbaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caac': {'a': 'aaaaa', 'b': 'caacb', 'c': 'aaaaa'}, 'bcb': {'a': 'bcba', 'b': 'bcbb', 'c': 'bcbc'}, 'bccbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acacbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbc': {'a': 'acbca', 'b': 'aacbbc', 'c': 'acbcc'}, 'caba': {'a': 'cabaa', 'b': 'cabab', 'c': 'cabac'}, 'bbacb': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'bbbac': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'bcbabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acaaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbabab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbc': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'aaaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcc': {'a': 'bcca', 'b': 'bccb', 'c': 'bccc'}, 'bcbbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbccb': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'acabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabaa': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'bbcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaa': {'a': 'aaaa', 'b': 'aacbbc', 'c': 'aaaa'}, 'ababac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacba': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'abcca': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'ba'}, 'bbaac': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'cacacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbab': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'ccbccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabb': {'a': 'cabba', 'b': 'cabbb', 'c': 'cabbc'}, 'aac': {'a': 'aaca', 'b': 'aacb', 'c': 'aacc'}, 'abb': {'a': 'abba', 'b': 'abbb', 'c': 'abbc'}, 'aaccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbacba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaaa': {'a': 'aaaaa', 'b': 'aacbbc', 'c': 'aaaaa'}, 'bbbbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbca': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'cabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acabcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aa': {'a': 'aaa', 'b': 'aab', 'c': 'aac'}, 'acb': {'a': 'acba', 'b': 'acbb', 'c': 'acbc'}, 'aacaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccb': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'cccbc'}, 'ccbbc': {'a': 'ba', 'b': 'aacbbc', 'c': 'aacbbc'}}
target  query explanation status  test accuracy rnn score explanation score explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states lstar explanation score lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  false       false   True          100.0      None              None                              None         1.324615          None            None              []          0         0         0          418                    None                                    None             402.572961        False     0.01    0.1
target: F(aUb)
query: false


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.11179971694946289  s
EQ test took  0.000621795654296875  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.11734533309936523  s
EQ test took  1.3072474002838135  s


epsilon= 0.01 delta= 0.05 max_trace_length= 50
query: false
final ltl:  false

Time taken to extract ltl: 1.5400712490081787
Interrupted due to time limit
overall guided extraction time took: 402.78999999999996
generated counterexamples were: (format: (counterexample, counterexample generation time))
('', 0.0)
('b', 0.01999999999998181)
('ba', 0.02999999999974534)
('bb', 0.03000000000020009)
('bc', 0.03999999999996362)
('cb', 0.03999999999996362)
('ab', 0.0500000000001819)
('abc', 0.05999999999994543)
('cbb', 0.05999999999994543)
('aba', 0.06000000000040018)
('cbc', 0.06999999999970896)
('bca', 0.07000000000016371)
('bbc', 0.07999999999992724)
('bcc', 0.07999999999992724)
('bbb', 0.09000000000014552)
('bba', 0.09000000000014552)
('acb', 0.09999999999990905)
('aab', 0.1000000000003638)
('cba', 0.11000000000012733)
('ccb', 0.11000000000012733)
('abb', 0.11000000000012733)
('bcb', 0.12000000000034561)
('cab', 0.1299999999996544)
('ccbb', 0.14000000000032742)
('aaab', 0.13000000000010914)
('acab', 0.13999999999987267)
('caab', 0.15000000000009095)
('bcca', 0.1499999999996362)
('abbb', 0.15999999999985448)
('acbc', 0.16000000000030923)
('cbaa', 0.17000000000007276)
('bbab', 0.169999999999618)
('ccba', 0.18000000000029104)
('aabb', 0.18000000000029104)
('abbc', 0.19000000000005457)
('acbb', 0.18999999999959982)
('ccab', 0.1999999999998181)
('aaba', 0.21000000000003638)
('bbcc', 0.21000000000003638)
('bbca', 0.22000000000025466)
('bcbb', 0.2199999999997999)
('abaa', 0.2300000000000182)
('bccb', 0.2300000000000182)
('cbbb', 0.2300000000000182)
('bbcb', 0.23999999999978172)
('cabc', 0.24000000000023647)
('cacb', 0.24000000000023647)
('bcaa', 0.25)
('abba', 0.2600000000002183)
('bcab', 0.2699999999999818)
('cbcb', 0.2699999999999818)
('cbab', 0.2800000000002001)
('aabc', 0.27999999999974534)
('bccc', 0.27999999999974534)
('abab', 0.2899999999999636)
('abca', 0.29999999999972715)
('accb', 0.3000000000001819)
('ccbc', 0.30999999999994543)
('bbbb', 0.30999999999994543)
('caba', 0.3200000000001637)
('bbaa', 0.32999999999992724)
('aacb', 0.330000000000382)
('cbcc', 0.33999999999969077)
('cbac', 0.3400000000001455)
('cbbc', 0.33999999999969077)
('cabb', 0.3500000000003638)
('bcbc', 0.36999999999989086)
('acba', 0.36999999999989086)
('cccb', 0.3700000000003456)
('abcb', 0.3900000000003274)
('bbac', 0.38999999999987267)
('bcac', 0.40000000000009095)
('abcc', 0.3900000000003274)
('bbbc', 0.40000000000009095)
('bcba', 0.40000000000009095)
('bbba', 0.41000000000030923)
('cbca', 0.42000000000007276)
('cbba', 0.4299999999998363)
('abac', 0.44000000000005457)
('aabcb', 0.44000000000005457)
('ccbba', 0.45000000000027285)
('aacbc', 0.4499999999998181)
('bccbb', 0.4600000000000364)
('cbbcb', 0.47000000000025466)
('cabac', 0.4699999999997999)
('aabcc', 0.47000000000025466)
('aabab', 0.47999999999956344)
('cbcbb', 0.4800000000000182)
('bccaa', 0.4899999999997817)
('bbaab', 0.5)
('aacab', 0.5)
('cabcc', 0.5)
('bbabb', 0.5099999999997635)
('ccbab', 0.5100000000002183)
('cbbab', 0.5299999999997453)
('cbaab', 0.5399999999999636)
('cbbcc', 0.5299999999997453)
('bcabc', 0.5499999999997272)
('abccc', 0.5500000000001819)
('abcab', 0.5500000000001819)
('cbabb', 0.5599999999999454)
('cbbaa', 0.5599999999999454)
('abcbc', 0.5700000000001637)
('bbccc', 0.5799999999999272)
('cbcba', 0.5799999999999272)
('acbaa', 0.5900000000001455)
('bcbbc', 0.5900000000001455)
('cabab', 0.6100000000001273)
('acaba', 0.6100000000001273)
('ccacb', 0.599999999999909)
('acbbb', 0.6300000000001091)
('bbaba', 0.6300000000001091)
('bbabc', 0.6300000000001091)
('bcabb', 0.6300000000001091)
('bbbab', 0.6400000000003274)
('abcac', 0.6400000000003274)
('acbba', 0.650000000000091)
('aabaa', 0.650000000000091)
('bcaac', 0.6599999999998545)
('cabcb', 0.669999999999618)
('cbcca', 0.669999999999618)
('caaba', 0.680000000000291)
('ccbcb', 0.6900000000000546)
('acbac', 0.6899999999995998)
('cbccc', 0.6799999999998363)
('bbcaa', 0.6900000000000546)
('bbbac', 0.6900000000000546)
('aacba', 0.6999999999998181)
('cbcbc', 0.7000000000002728)
('cbbbc', 0.7100000000000364)
('ababb', 0.7199999999997999)
('aaaba', 0.7100000000000364)
('bcccc', 0.7300000000000182)
('bcbcc', 0.75)
('cacbc', 0.7399999999997817)
('bbbbc', 0.7399999999997817)
('cbccb', 0.7599999999997635)
('bbbbb', 0.7699999999999818)
('abaaa', 0.7699999999999818)
('aaacb', 0.7899999999999636)
('accbb', 0.7799999999997453)
('bccca', 0.7699999999999818)
('abcca', 0.7899999999999636)
('bbcbc', 0.8099999999999454)
('cbcaa', 0.8200000000001637)
('ccccb', 0.8099999999999454)
('ababc', 0.819999999999709)
('ccabc', 0.7999999999997272)
('bbacb', 0.819999999999709)
('abbab', 0.8299999999999272)
('bbbcb', 0.8400000000001455)
('ccbaa', 0.8299999999999272)
('bccac', 0.8299999999999272)
('cabba', 0.849999999999909)
('bbcab', 0.8700000000003456)
('caabb', 0.8899999999998727)
('ababa', 0.8800000000001091)
('aabbb', 0.8899999999998727)
('ccaba', 0.8699999999998909)
('ccbbc', 0.8899999999998727)
('bcbba', 0.900000000000091)
('cbacb', 0.9099999999998545)
('caccb', 0.9100000000003092)
('bbacc', 0.9400000000000546)
('caacb', 0.9399999999995998)
('cbbca', 0.9299999999998363)
('bcbab', 0.9400000000000546)
('bcbcb', 0.9400000000000546)
('bcbac', 0.9600000000000364)
('bcbaa', 0.9400000000000546)
('cbbba', 0.9400000000000546)
('acacb', 0.9400000000000546)
('abaab', 0.9500000000002728)
('accab', 0.9600000000000364)
('abbbc', 0.9600000000000364)
('cabbb', 0.9600000000000364)
('caaab', 0.9800000000000182)
('cabbc', 1.0199999999999818)
('bbaac', 1.0199999999999818)
('ccbca', 1.0100000000002183)
('cabaa', 1.0200000000004366)
('bbaca', 1.0300000000002)
('accbc', 1.0300000000002)
('bcccb', 1.050000000000182)
('bbbaa', 1.050000000000182)
('aaabb', 1.0599999999999454)
('cccbb', 1.050000000000182)
('abacc', 1.0399999999999636)
('aabca', 1.0499999999997272)
('bcbbb', 1.0700000000001637)
('bcaca', 1.0599999999999454)
('abbcb', 1.0599999999999454)
('caabc', 1.0700000000001637)
('cbcab', 1.0799999999999272)
('acbcc', 1.0799999999999272)
('acbcb', 1.099999999999909)
('cabca', 1.0900000000001455)
('acabb', 1.1100000000001273)
('bccbc', 1.099999999999909)
('bccba', 1.1000000000003638)
('ccabb', 1.1199999999998909)
('acbab', 1.1299999999996544)
('abbbb', 1.1300000000001091)
('bbbcc', 1.1400000000003274)
('ccbbb', 1.150000000000091)
('cccbc', 1.1399999999998727)
('ccaab', 1.1499999999996362)
('acbbc', 1.150000000000091)
('bcbca', 1.1600000000003092)
('bbcca', 1.1700000000000728)
('bcaab', 1.2100000000000364)
('bbbba', 1.2300000000000182)
('bbaaa', 1.2300000000000182)
('abbcc', 1.2300000000000182)
('bbcac', 1.25)
('cbaca', 1.2100000000000364)
('bbbca', 1.2199999999998)
('aaaab', 1.2300000000000182)
('bcacb', 1.2400000000002365)
('cacab', 1.2400000000002365)
('cccab', 1.2699999999999818)
('aaabc', 1.2699999999999818)
('cbaba', 1.2699999999999818)
('cbacc', 1.2800000000002)
('aabbc', 1.2799999999997453)
('cacba', 1.2899999999999636)
('cbabc', 1.2999999999997272)
('aabac', 1.300000000000182)
('abcba', 1.3099999999999454)
('abbaa', 1.3100000000004002)
('abacb', 1.3200000000001637)
('cbbbb', 1.330000000000382)
('acabc', 1.3299999999999272)
('bbccb', 1.3399999999996908)
('bcacc', 1.349999999999909)
('ccbac', 1.349999999999909)
('cbcac', 1.3600000000001273)
('aacbb', 1.3699999999998909)
('cbbac', 1.3800000000001091)
('bbcbb', 1.3899999999998727)
('abaac', 1.400000000000091)
('abccb', 1.3899999999998727)
('bcaba', 1.400000000000091)
('cacbb', 1.4200000000000728)
('ccbcc', 1.4099999999998545)
('abbca', 1.430000000000291)
('bbcba', 1.4299999999998363)
('cbaaa', 1.4400000000000546)
('accba', 1.449999999999818)
('bccab', 1.4500000000002728)
('abbac', 1.4400000000000546)
('cccba', 1.4699999999998)
('acccb', 1.449999999999818)
('acaab', 1.4800000000000182)
('abbba', 1.4800000000000182)
('aabba', 1.4899999999997817)
('aaccb', 1.5)
('bcaaa', 1.4899999999997817)
('cbaac', 1.5099999999997635)
('abcaa', 1.5099999999997635)
('abaca', 1.5100000000002183)
('abcbb', 1.5199999999999818)
('acbca', 1.5300000000002)
('caccba', 1.5299999999997453)
('cabbbb', 1.5399999999999636)
('cacbca', 1.550000000000182)
('aabbab', 1.550000000000182)
('aaacbb', 1.5599999999999454)
('cbabcc', 1.5700000000001637)
('bbcbac', 1.5700000000001637)
('aacbca', 1.5700000000001637)
('bbbcac', 1.5799999999999272)
('bcbcba', 1.5900000000001455)
('bbbacc', 1.599999999999909)
('bbaacc', 1.6100000000001273)
('cbcccc', 1.6099999999996726)
('cbaaac', 1.6100000000001273)
('acabab', 1.6200000000003456)
('aabaca', 1.6299999999996544)
('aacbcb', 1.6299999999996544)
('bbcaaa', 1.650000000000091)
('abcaab', 1.6399999999998727)
('aaaaba', 1.6599999999998545)
('aabbbb', 1.6700000000000728)
('bbcbab', 1.6700000000000728)
('cccbcc', 1.6600000000003092)
('cbaaaa', 1.6799999999998363)
('bbbcab', 1.6799999999998363)
('abccbb', 1.6899999999995998)
('bbabbc', 1.7000000000002728)
('abacbc', 1.7100000000000364)
('abbcab', 1.6900000000000546)
('abaacb', 1.699999999999818)
('abcbcb', 1.7100000000000364)
('bccccc', 1.7199999999998)
('cabbcc', 1.7300000000000182)
('accbcc', 1.7300000000000182)
('aacbbc', 1.7300000000000182)
('cbabab', 1.7300000000000182)
('bcccbc', 1.7300000000000182)
('abbaca', 1.7600000000002183)
('abbcbb', 1.7200000000002547)
('abbbca', 1.7600000000002183)
('bbaccc', 1.7800000000002)
('ccbbbb', 1.7699999999999818)
('acbabb', 1.7800000000002)
('acabbc', 1.7999999999997272)
('abbcac', 1.7799999999997453)
('cabacc', 1.7899999999999636)
('bcccca', 1.7999999999997272)
('ccaccb', 1.8099999999999454)
('caabcb', 1.830000000000382)
('abcacc', 1.8200000000001637)

Time taken to extract lstar-dfa: 402.7911548614502
number of states of the dfa: 344
returned flag: False
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'c'}, 'aaaa': {'a': 'cccca', 'b': 'aaaab', 'c': 'cccca'}, 'ccab': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'aacbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcb': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'aacb': {'a': 'aacbbc', 'b': 'aacbb', 'c': 'aacbc'}, 'bcabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcca': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'acabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cca': {'a': 'accc', 'b': 'ccab', 'c': 'ccac'}, 'caaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbabc': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'ccc': {'a': 'accc', 'b': 'cccb', 'c': 'accc'}, 'aacbc': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'ba'}, 'bcbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabc': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'aca': {'a': 'accc', 'b': 'acab', 'c': 'accc'}, 'abaa': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'abaac'}, 'abab': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'cbba': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'bbaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcc': {'a': 'aacbbc', 'b': 'abccb', 'c': 'aacbbc'}, 'abbac': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'bccccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accc': {'a': 'cccca', 'b': 'aacbbc', 'c': 'cccca'}, 'ccba': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'cccca': {'a': 'cccca', 'b': 'ba', 'c': 'cccca'}, 'acbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccca': {'a': 'cccca', 'b': 'aacbbc', 'c': 'cccca'}, 'acaba': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'acba': {'a': 'aacbbc', 'b': 'acbab', 'c': 'aacbbc'}, 'caabcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacb': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'acbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acabb': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'abbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abac': {'a': 'aacbbc', 'b': 'abacb', 'c': 'aacbbc'}, 'bcbb': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'caab': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'caabc'}, 'abbcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbabab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbbb': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'abcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbac': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'cbaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcccc': {'a': 'aacbbc', 'b': 'ba', 'c': 'aacbbc'}, 'abaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcc': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'bbcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbab': {'a': 'aacbbc', 'b': 'bbabb', 'c': 'aacbbc'}, 'aba': {'a': 'abaa', 'b': 'abab', 'c': 'abac'}, 'accb': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'accbc'}, 'ccb': {'a': 'ccba', 'b': 'ccbb', 'c': 'ccbc'}, 'cbccc': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'bbaacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbc': {'a': 'abbca', 'b': 'abbcb', 'c': 'aacbbc'}, 'ca': {'a': 'caa', 'b': 'cab', 'c': 'cac'}, 'cacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbcb': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'aacbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcb': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'abcbc'}, 'abcbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbb': {'a': 'cbba', 'b': 'cbbb', 'c': 'cbbc'}, 'bcbcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbaa': {'a': 'cbaaa', 'b': 'aacbbc', 'c': 'aacbbc'}, 'cbccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbabb': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'bccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'a': {'a': 'aa', 'b': 'ab', 'c': 'ac'}, 'bbbacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abaacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccc': {'a': 'cccca', 'b': 'aacbbc', 'c': 'cccca'}, 'cbcccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcac': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'ba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbb': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'bcaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ababa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbca': {'a': 'bbcaa', 'b': 'aacbbc', 'c': 'aacbbc'}, 'ccbc': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'cacbc': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'cbbb': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'bbcbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbb': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'bbcbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbacc': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'abccb': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'bcacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caccb': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'aabbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacc': {'a': 'cccca', 'b': 'caccb', 'c': 'cccca'}, 'ababc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caca': {'a': 'cccca', 'b': 'aacbbc', 'c': 'cccca'}, 'abbbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcab': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'cabbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caaa': {'a': 'cccca', 'b': 'aacbbc', 'c': 'cccca'}, 'abcbc': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'ccbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabac': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'bccca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaba': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aabac'}, 'aacc': {'a': 'cccca', 'b': 'aacbbc', 'c': 'cccca'}, 'cba': {'a': 'cbaa', 'b': 'cbab', 'c': 'cbac'}, 'bbbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cab': {'a': 'caba', 'b': 'cabb', 'c': 'cabc'}, 'cbaaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acca': {'a': 'cccca', 'b': 'aacbbc', 'c': 'cccca'}, 'cbbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbc': {'a': 'bbbca', 'b': 'aacbbc', 'c': 'aacbbc'}, 'ccbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acab': {'a': 'acaba', 'b': 'acabb', 'c': 'aacbbc'}, 'bcacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caa': {'a': 'accc', 'b': 'caab', 'c': 'accc'}, 'aabb': {'a': 'aabba', 'b': 'aabbb', 'c': 'aacbbc'}, 'aacbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cac': {'a': 'accc', 'b': 'cacb', 'c': 'cacc'}, 'bbbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcaa': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'aacbb': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'bc': {'a': 'bca', 'b': 'bcb', 'c': 'bcc'}, 'bbbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcccca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbaaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccc': {'a': 'aacbbc', 'b': 'bcccb', 'c': 'bcccc'}, 'bbc': {'a': 'bbca', 'b': 'bbcb', 'c': 'bbcc'}, 'ccacc': {'a': 'cccca', 'b': 'aacbbc', 'c': 'cccca'}, 'bcbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'c': {'a': 'ca', 'b': 'cb', 'c': 'cc'}, 'acabbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbc': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'bcbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbabbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbb': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'aaac': {'a': 'cccca', 'b': 'aaacb', 'c': 'cccca'}, 'aaabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabac': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'acacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaa': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'bbabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcc': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'cbccc'}, 'acccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abc': {'a': 'abca', 'b': 'abcb', 'c': 'abcc'}, 'ccacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabba': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'ccbb': {'a': 'aacbbc', 'b': 'ccbbb', 'c': 'aacbbc'}, 'ccabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'b': {'a': 'ba', 'b': 'bb', 'c': 'bc'}, 'bccbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbb': {'a': 'bbba', 'b': 'bbbb', 'c': 'bbbc'}, 'bca': {'a': 'bcaa', 'b': 'bcab', 'c': 'bcac'}, 'bbbca': {'a': 'ba', 'b': 'aacbbc', 'c': 'aacbbc'}, 'cccbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbaba': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'aabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abba': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'abbac'}, 'abbb': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'abbbc'}, 'bbcaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acac': {'a': 'cccca', 'b': 'aacbbc', 'c': 'cccca'}, 'bccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbac': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'bbacc'}, 'abaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbca': {'a': 'ba', 'b': 'aacbbc', 'c': 'aacbbc'}, 'ababb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbc': {'a': 'aacbbc', 'b': 'bcbcb', 'c': 'aacbbc'}, 'bbaa': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'bbaac'}, 'ccaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcccb': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'cbaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaca': {'a': 'cccca', 'b': 'aacbbc', 'c': 'cccca'}, 'cb': {'a': 'cba', 'b': 'cbb', 'c': 'cbc'}, 'cbaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ac': {'a': 'aca', 'b': 'acb', 'c': 'acc'}, 'cbc': {'a': 'cbca', 'b': 'cbcb', 'c': 'cbcc'}, 'bbccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abca': {'a': 'abcaa', 'b': 'aacbbc', 'c': 'aacbbc'}, 'bbcba': {'a': 'ba', 'b': 'aacbbc', 'c': 'aacbbc'}, 'bcbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acc': {'a': 'accc', 'b': 'accb', 'c': 'accc'}, 'aabbb': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'bcaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bba': {'a': 'bbaa', 'b': 'bbab', 'c': 'bbac'}, 'cbab': {'a': 'cbaba', 'b': 'aacbbc', 'c': 'cbabc'}, 'bcba': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'aaa': {'a': 'aaaa', 'b': 'aaab', 'c': 'aaac'}, 'ccccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cc': {'a': 'cca', 'b': 'ccb', 'c': 'ccc'}, 'acaa': {'a': 'cccca', 'b': 'aacbbc', 'c': 'cccca'}, 'caaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbba': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'bbbac'}, 'ccac': {'a': 'cccca', 'b': 'aacbbc', 'c': 'accc'}, 'cabc': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'cacb': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'cacbc'}, 'abaac': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'abbcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aab': {'a': 'aaba', 'b': 'aabb', 'c': 'aabc'}, 'aacba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbcb': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'bccb': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'cccbc': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'bbcb': {'a': 'bbcba', 'b': 'aacbbc', 'c': 'aacbbc'}, 'aaacb': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'ab': {'a': 'aba', 'b': 'abb', 'c': 'abc'}, 'aaab': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'bccaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaaaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbbc': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'cbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bb': {'a': 'bba', 'b': 'bbb', 'c': 'bbc'}, 'acbabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caac': {'a': 'cccca', 'b': 'aacbbc', 'c': 'cccca'}, 'bcb': {'a': 'bcba', 'b': 'bcbb', 'c': 'bcbc'}, 'cbacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbaaa': {'a': 'aacbbc', 'b': 'ba', 'c': 'aacbbc'}, 'aaabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caba': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'cabac'}, 'acbc': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'bbacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbac': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'bcccbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbc': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'aaaab': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'bcc': {'a': 'bcca', 'b': 'bccb', 'c': 'bccc'}, 'bbccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcaa': {'a': 'aacbbc', 'b': 'ba', 'c': 'ba'}, 'abcaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaa': {'a': 'cccca', 'b': 'aacbbc', 'c': 'cccca'}, 'ccbbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acabab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaac': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'acbab': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'cabb': {'a': 'aacbbc', 'b': 'cabbb', 'c': 'cabbc'}, 'cbca': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'aacbbc'}, 'cbbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aac': {'a': 'accc', 'b': 'aacb', 'c': 'accc'}, 'cabacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abb': {'a': 'abba', 'b': 'abbb', 'c': 'abbc'}, 'accbc': {'a': 'ba', 'b': 'ba', 'c': 'aacbbc'}, 'bbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caabc': {'a': 'ba', 'b': 'aacbbc', 'c': 'ba'}, 'aa': {'a': 'aaa', 'b': 'aab', 'c': 'aac'}, 'acb': {'a': 'acba', 'b': 'acbb', 'c': 'acbc'}, 'cccb': {'a': 'aacbbc', 'b': 'aacbbc', 'c': 'cccbc'}, 'ccbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}}
target  query explanation status  test accuracy rnn score explanation score explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states lstar explanation score lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  false       false   True          100.0      None              None                              None         1.540071          None            None              []          0         0         0          344                    None                                    None             402.791155        False     0.01   0.05
target: F(aUb)
query: false


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.12197613716125488  s
EQ test took  0.0006139278411865234  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.12865543365478516  s
EQ test took  1.7785944938659668  s


epsilon= 0.01 delta= 0.01 max_trace_length= 50
query: false
final ltl:  false

Time taken to extract ltl: 2.033715009689331
Interrupted due to time limit
overall guided extraction time took: 401.1700000000001
generated counterexamples were: (format: (counterexample, counterexample generation time))
('', 0.0)
('b', 0.1499999999996362)
('ba', 0.18000000000029104)
('cb', 0.1999999999998181)
('bc', 0.22000000000025466)
('ab', 0.25)
('bb', 0.2899999999999636)
('cba', 0.32999999999992724)
('bbb', 0.34999999999990905)
('aba', 0.33999999999969077)
('bba', 0.36999999999989086)
('cbb', 0.40000000000009095)
('acb', 0.4099999999998545)
('abb', 0.44000000000005457)
('bcc', 0.47000000000025466)
('bbc', 0.49000000000023647)
('bcb', 0.5199999999999818)
('ccb', 0.5300000000002001)
('cbc', 0.5799999999999272)
('bca', 0.599999999999909)
('cab', 0.6199999999998909)
('abc', 0.6900000000000546)
('ccbb', 0.7300000000000182)
('aab', 0.7100000000000364)
('cbac', 0.7399999999997817)
('bbba', 0.7599999999997635)
('aaba', 0.7799999999997453)
('bbbb', 0.8000000000001819)
('abcc', 0.8299999999999272)
('ccba', 0.849999999999909)
('ccbc', 0.8799999999996544)
('caba', 0.9099999999998545)
('bcbc', 0.9400000000000546)
('cabb', 0.9600000000000364)
('acbb', 1.0)
('cbbb', 1.0199999999999818)
('bbab', 1.0300000000002)
('abaa', 1.0599999999999454)
('cbcc', 1.0900000000001455)
('bcab', 1.0899999999996908)
('cbab', 1.1100000000001273)
('bcba', 1.1299999999996544)
('abbc', 1.150000000000091)
('aabb', 1.1700000000000728)
('cbbc', 1.2099999999995816)
('acab', 1.2300000000000182)
('aabc', 1.2699999999999818)
('bccc', 1.2800000000002)
('bccb', 1.3200000000001637)
('bbac', 1.3600000000001273)
('cbca', 1.3599999999996726)
('bcaa', 1.400000000000091)
('aacb', 1.4200000000000728)
('cbba', 1.4400000000000546)
('bcca', 1.5199999999999818)
('cccb', 1.5399999999999636)
('acbc', 1.5399999999999636)
('bbbc', 1.550000000000182)
('bcac', 1.5799999999999272)
('bbcc', 1.599999999999909)
('caab', 1.6399999999998727)
('bbcb', 1.6900000000000546)
('abbb', 1.7300000000000182)
('ccab', 1.7699999999999818)
('abba', 1.8700000000003456)
('acba', 1.900000000000091)
('abac', 1.9400000000000546)
('abcb', 1.949999999999818)
('cbcb', 1.9800000000000182)
('abca', 2.019999999999982)
('abab', 2.0399999999999636)
('cbaa', 2.0299999999997453)
('cabc', 2.0400000000004184)
('bcbb', 2.0799999999999272)
('bbca', 2.1200000000003456)
('bbaa', 2.149999999999636)
('bcbca', 2.1599999999998545)
('bcaba', 2.199999999999818)
('bbabb', 2.2400000000002365)
('cacb', 2.1600000000003092)
('aaab', 2.2100000000000364)
('accb', 2.230000000000018)
('aabba', 2.25)
('cbbaa', 2.2899999999999636)
('acbbc', 2.3299999999999272)
('aabbb', 2.3299999999999272)
('cbaac', 2.380000000000109)
('ababa', 2.450000000000273)
('cbaca', 2.5)
('bbcca', 2.519999999999982)
('caabb', 2.549999999999727)
('abbac', 2.5799999999999272)
('acaab', 2.6100000000001273)
('cccba', 2.649999999999636)
('bcaac', 2.6799999999998363)
('abcca', 2.7100000000000364)
('ccaba', 2.6799999999998363)
('cabab', 2.680000000000291)
('bbbac', 2.7200000000002547)
('cbabc', 2.7400000000002365)
('ababb', 2.769999999999982)
('cbcca', 2.800000000000182)
('abacb', 2.8099999999999454)
('cabbb', 2.849999999999909)
('ccbcb', 2.9400000000000546)
('bcccb', 2.899999999999636)
('bccbb', 2.949999999999818)
('cbcbc', 2.9699999999998)
('bcacc', 3.0)
('bcabc', 3.0300000000002)
('abccc', 3.080000000000382)
('ccbab', 3.0700000000001637)
('abcbc', 3.099999999999909)
('cabbc', 3.1100000000001273)
('aabac', 3.150000000000091)
('cabaa', 3.1799999999998363)
('ccabb', 3.2100000000000364)
('abbcb', 3.2399999999997817)
('acbaa', 3.2600000000002183)
('bcbac', 3.299999999999727)
('cbacb', 3.3099999999999454)
('cbbbb', 3.3400000000001455)
('abcab', 3.3900000000003274)
('acabc', 3.4400000000000546)
('abaaa', 3.4600000000000364)
('acbca', 3.4900000000002365)
('accbc', 3.4900000000002365)
('bcbbc', 3.5599999999999454)
('bccba', 3.5700000000001637)
('cccbb', 3.580000000000382)
('bbaac', 3.6400000000003274)
('cbcba', 3.650000000000091)
('abbca', 3.680000000000291)
('cbcac', 3.6899999999996)
('bbbba', 3.799999999999727)
('abaca', 3.9200000000000728)
('aaabb', 3.949999999999818)
('cbbcc', 3.980000000000018)
('acbba', 4.0)
('cacba', 4.039999999999964)
('abccb', 4.050000000000182)
('bcacb', 4.069999999999709)
('bcccc', 3.980000000000018)
('abbab', 4.0)
('abbaa', 4.040000000000418)
('aacab', 4.050000000000182)
('cccbc', 4.059999999999945)
('cbcab', 4.079999999999927)
('bbaba', 4.110000000000127)
('bbcba', 4.150000000000091)
('cbbab', 4.170000000000073)
('ccbba', 4.230000000000018)
('bccaa', 4.320000000000164)
('cacbb', 4.440000000000055)
('aabaa', 4.460000000000036)
('ccabc', 4.449999999999818)
('bbbca', 4.5099999999997635)
('aaabc', 4.360000000000127)
('acbcc', 4.400000000000091)
('cbbba', 4.450000000000273)
('cacab', 4.480000000000018)
('bbaca', 4.5099999999997635)
('abacc', 4.549999999999727)
('ababc', 4.639999999999873)
('cbccb', 4.710000000000036)
('bbbcc', 4.809999999999945)

Time taken to extract lstar-dfa: 401.172381401062
number of states of the dfa: 183
returned flag: False
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'c'}, 'cbab': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'bcba': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'ccabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccab': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ccabc'}, 'cbbc': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'cbcb': {'a': 'ccabc', 'b': 'ba', 'c': 'ccabc'}, 'bcbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaa': {'a': 'ccaa', 'b': 'aaab', 'c': 'ccaa'}, 'aacab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cc': {'a': 'cca', 'b': 'ccb', 'c': 'ccc'}, 'cbbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acaa': {'a': 'ccaa', 'b': 'ccabc', 'c': 'ccaa'}, 'bcabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcca': {'a': 'ccabc', 'b': 'ba', 'c': 'ba'}, 'ccbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cca': {'a': 'ccaa', 'b': 'ccab', 'c': 'ccaa'}, 'acabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbba': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'cbabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccc': {'a': 'ccaa', 'b': 'cccb', 'c': 'ccaa'}, 'bcac': {'a': 'ba', 'b': 'ccabc', 'c': 'ccabc'}, 'ba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbb': {'a': 'ccabc', 'b': 'ba', 'c': 'ba'}, 'ababa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacb': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ba'}, 'bcaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aab': {'a': 'aaba', 'b': 'aabb', 'c': 'ccabc'}, 'bbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aca': {'a': 'acaa', 'b': 'acab', 'c': 'ccaa'}, 'abaa': {'a': 'ccabc', 'b': 'ba', 'c': 'ba'}, 'ccbc': {'a': 'ba', 'b': 'ccabc', 'c': 'ba'}, 'abab': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ccabc'}, 'acbb': {'a': 'ccabc', 'b': 'ba', 'c': 'ccabc'}, 'cbba': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ba'}, 'aaabc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbb': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ba'}, 'abcc': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ccabc'}, 'abbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcaa': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'ccbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccba': {'a': 'ba', 'b': 'ccabc', 'c': 'ba'}, 'acbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcc': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ba'}, 'bccb': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ba'}, 'acaab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acba': {'a': 'ccabc', 'b': 'ba', 'c': 'ba'}, 'abccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcb': {'a': 'ccabc', 'b': 'ba', 'c': 'ba'}, 'bcacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ab': {'a': 'aba', 'b': 'abb', 'c': 'abc'}, 'aaab': {'a': 'ba', 'b': 'ccabc', 'c': 'ccabc'}, 'bccaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abc': {'a': 'abca', 'b': 'abcb', 'c': 'abcc'}, 'abacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbb': {'a': 'ccabc', 'b': 'ba', 'c': 'ba'}, 'cbcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ababc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbcc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bb': {'a': 'bba', 'b': 'bbb', 'c': 'bbc'}, 'bcaba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caca': {'a': 'ccaa', 'b': 'ccabc', 'c': 'ccaa'}, 'b': {'a': 'ba', 'b': 'bb', 'c': 'bc'}, 'cbbbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbcbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcab': {'a': 'ccabc', 'b': 'ba', 'c': 'ccabc'}, 'abac': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ccabc'}, 'acbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbb': {'a': 'bbba', 'b': 'bbbb', 'c': 'bbbc'}, 'abcbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bca': {'a': 'bcaa', 'b': 'bcab', 'c': 'bcac'}, 'bbbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcb': {'a': 'bcba', 'b': 'bcbb', 'c': 'bcbc'}, 'bcbb': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'caab': {'a': 'ba', 'b': 'ccabc', 'c': 'ba'}, 'aabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abba': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ccabc'}, 'abbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'acbaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aaba': {'a': 'ccabc', 'b': 'ba', 'c': 'ccabc'}, 'acbc': {'a': 'ccabc', 'b': 'ba', 'c': 'ccabc'}, 'caba': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ba'}, 'cbac': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ba'}, 'bbbac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cba': {'a': 'cbaa', 'b': 'cbab', 'c': 'cbac'}, 'cccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcc': {'a': 'bcca', 'b': 'bccb', 'c': 'bccc'}, 'cab': {'a': 'caba', 'b': 'cabb', 'c': 'ccabc'}, 'bccba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbac': {'a': 'ccabc', 'b': 'ba', 'c': 'ba'}, 'abaaa': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ccaa': {'a': 'ccaa', 'b': 'ba', 'c': 'ccaa'}, 'cbcab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbacb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbbba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cabab': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cacba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcc': {'a': 'ccabc', 'b': 'ba', 'c': 'ba'}, 'abcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ababb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbcca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bbab': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ba'}, 'aba': {'a': 'abaa', 'b': 'abab', 'c': 'abac'}, 'bbaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accb': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'ccb': {'a': 'ccba', 'b': 'ccbb', 'c': 'ccbc'}, 'bbbc': {'a': 'ccabc', 'b': 'ba', 'c': 'ba'}, 'bcbc': {'a': 'ccabc', 'b': 'ba', 'c': 'ba'}, 'cabb': {'a': 'ba', 'b': 'ccabc', 'c': 'ccabc'}, 'acab': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'bcacc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbca': {'a': 'ba', 'b': 'ccabc', 'c': 'ccabc'}, 'caabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'caa': {'a': 'ccaa', 'b': 'caab', 'c': 'ccaa'}, 'bbaa': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'aac': {'a': 'acaa', 'b': 'ccabc', 'c': 'ccaa'}, 'abbc': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ba'}, 'bcccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aabb': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ba'}, 'cbaac': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'ca': {'a': 'caa', 'b': 'cab', 'c': 'cac'}, 'abb': {'a': 'abba', 'b': 'ccabc', 'c': 'abbc'}, 'cacbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abbcb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'accbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cac': {'a': 'acaa', 'b': 'cacb', 'c': 'ccaa'}, 'bc': {'a': 'bca', 'b': 'bcb', 'c': 'bcc'}, 'bccc': {'a': 'ba', 'b': 'ccabc', 'c': 'ccabc'}, 'abcb': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'aaca': {'a': 'ccaa', 'b': 'ccabc', 'c': 'ccaa'}, 'bbc': {'a': 'ccabc', 'b': 'bbcb', 'c': 'bbcc'}, 'bbaca': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cb': {'a': 'cba', 'b': 'cbb', 'c': 'cbc'}, 'ac': {'a': 'aca', 'b': 'acb', 'c': 'acc'}, 'cbb': {'a': 'cbba', 'b': 'cbbb', 'c': 'cbbc'}, 'cbc': {'a': 'cbca', 'b': 'cbcb', 'c': 'cbcc'}, 'cbaa': {'a': 'ba', 'b': 'ba', 'c': 'ccabc'}, 'abccc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bcbbc': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'cbccb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'c': {'a': 'ca', 'b': 'cb', 'c': 'cc'}, 'bbabb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'bccbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'abca': {'a': 'ba', 'b': 'ccabc', 'c': 'ba'}, 'bbcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'aa': {'a': 'aaa', 'b': 'aab', 'c': 'aac'}, 'acb': {'a': 'acba', 'b': 'acbb', 'c': 'acbc'}, 'acc': {'a': 'ccaa', 'b': 'accb', 'c': 'ccaa'}, 'aabbb': {'a': 'ba', 'b': 'ba', 'c': 'ba'}, 'a': {'a': 'aa', 'b': 'ab', 'c': 'ac'}, 'cccb': {'a': 'ccabc', 'b': 'ccabc', 'c': 'ccabc'}, 'bba': {'a': 'bbaa', 'b': 'bbab', 'c': 'bbac'}, 'cbcba': {'a': 'ba', 'b': 'ba', 'c': 'ba'}}
target  query explanation status  test accuracy rnn score explanation score explanation score on ground truth  extraction time revised delta revised epsilon counterexamples train size test size ltl_depth lstar_states lstar explanation score lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  false       false   True          100.0      None              None                              None         2.033715          None            None              []          0         0         0          183                    None                                    None             401.172381        False     0.01   0.01
target: F(aUb)
query: F(a)


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.12456345558166504  s
EQ test took  0.0006413459777832031  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.1190192699432373  s
EQ test took  0.022392749786376953  s
new counterexample: ba  should be accepted by implementation


positive traces---> 
['ba']


negative traces---> 
['']



1  iteration complete



start formula depth: 1
Before normalization: x1
Learning formula with depth 0
learned LTL formula: b
Learning took:  0.14854001998901367  s
EQ test took  0.014065980911254883  s
new counterexample: b  should be rejected by implementation


positive traces---> 
['ba']


negative traces---> 
['', 'b']



2  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (X x0)
Learning formula with depth 1
learned LTL formula: (X a)
Learning took:  0.18118977546691895  s
EQ test took  0.017599821090698242  s
new counterexample: ab  should be accepted by implementation


positive traces---> 
['ba', 'ab']


negative traces---> 
['', 'b']



3  iteration complete



start formula depth: 2
Before normalization: (F x0)
Learning formula with depth 1
learned LTL formula: (F a)
Learning took:  0.17923378944396973  s
EQ test took  0.10387873649597168  s
new counterexample: a  should be rejected by implementation


positive traces---> 
['ba', 'ab']


negative traces---> 
['', 'b', 'a']



4  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (X (! x2))
Learning formula with depth 2
learned LTL formula: (X (~ c))
Learning took:  0.2866477966308594  s
EQ test took  0.026439189910888672  s
new counterexample: bca  should be accepted by implementation


positive traces---> 
['ba', 'ab', 'bca']


negative traces---> 
['', 'b', 'a']



5  iteration complete



start formula depth: 3
Before normalization: (X (x2 -> x2))
Learning formula with depth 1
learned LTL formula: (X true)
Learning took:  0.2898561954498291  s
EQ test took  0.08243298530578613  s
new counterexample: cb  should be rejected by implementation


positive traces---> 
['ba', 'ab', 'bca']


negative traces---> 
['', 'b', 'a', 'cb']



6  iteration complete



start formula depth: 3
increasing formula depth to  4
increasing formula depth to  5
Before normalization: ((! (G x0)) & (F x0))
Learning formula with depth 3
learned LTL formula: ((F a) & (~ (G a)))
Learning took:  1.2471466064453125  s
No positive counterexample found
EQ test took  0.17868351936340332  s
new counterexample: ac  should be rejected by implementation


positive traces---> 
['ba', 'ab', 'bca']


negative traces---> 
['', 'b', 'a', 'cb', 'ac']



7  iteration complete



start formula depth: 5
Before normalization: ((F x0) & (F x1))
Learning formula with depth 2
learned LTL formula: ((F a) & (F b))
Learning took:  0.9197089672088623  s
EQ test took  0.2680222988128662  s


epsilon= 0.1 delta= 0.1 max_trace_length= 50
query: F(a)
final ltl:  ((F a) & (F b))

Time taken to extract ltl: 4.221991062164307
Interrupted due to time limit
overall guided extraction time took: 401.5800000000004
generated counterexamples were: (format: (counterexample, counterexample generation time))
('', 0.0)
('aba', 0.0)
('b', 0.06000000000040018)
('cb', 0.10999999999967258)
('bb', 0.12000000000034561)
('bc', 0.13999999999987267)
('bcb', 0.15000000000009095)
('cbb', 0.17000000000007276)
('ccb', 0.18999999999959982)
('cbc', 0.21000000000003638)
('bbc', 0.2300000000000182)
('bcc', 0.25)
('bbb', 0.2899999999999636)
('bcbb', 0.2899999999999636)
('cbcc', 0.30999999999994543)
('bccb', 0.32999999999992724)
('bbcb', 0.3400000000001455)
('bccc', 0.36999999999989086)
('cbbb', 0.36000000000012733)
('cbcb', 0.4099999999998545)
('bbbb', 0.44000000000005457)
('cccb', 0.4499999999998181)
('ccbc', 0.4600000000000364)
('bcbc', 0.4800000000000182)
('cbbc', 0.5299999999997453)
('bbcc', 0.5300000000002001)
('ccbb', 0.5500000000001819)
('bbbc', 0.5500000000001819)
('bcccb', 0.5900000000001455)
('bbbbc', 0.6099999999996726)
('ccbbb', 0.6300000000001091)
('cbbbc', 0.6600000000003092)
('ccbcc', 0.6700000000000728)
('cccbb', 0.680000000000291)
('cbcbc', 0.7000000000002728)
('cbccb', 0.7300000000000182)
('bbcbb', 0.75)
('bccbc', 0.7599999999997635)
('ccbbc', 0.7800000000002001)
('bcbbb', 0.7899999999999636)
('bbbcc', 0.8299999999999272)
('bcbbc', 0.8399999999996908)
('bbccc', 0.8600000000001273)
('ccbcb', 0.8999999999996362)
('bbbcb', 0.9099999999998545)
('bbbbb', 0.9099999999998545)
('bcccc', 0.919999999999618)
('bbccb', 0.9299999999998363)
('bccbb', 0.9400000000000546)
('cbccc', 0.9900000000002365)
('ccccb', 1.0)
('bcbcb', 0.9900000000002365)
('cbbcc', 1.050000000000182)
('cccbc', 1.0799999999999272)
('bbcbc', 1.0900000000001455)
('cbbbb', 1.099999999999909)
('cbcbb', 1.1199999999998909)
('bcbcc', 1.1200000000003456)
('cccbbb', 1.1700000000000728)
('cbbcb', 1.1700000000000728)
('bcbbcc', 1.2100000000000364)
('cbbccc', 1.2200000000002547)
('bcbbcb', 1.2300000000000182)
('ccbbcc', 1.2199999999998)
('bccbcc', 1.2699999999999818)
('bbcccc', 1.2699999999999818)
('bbcbcc', 1.300000000000182)
('bccccc', 1.3299999999999272)
('cbccbb', 1.3200000000001637)
('ccbbbc', 1.3899999999998727)
('cccbcb', 1.3800000000001091)
('bbbccb', 1.3800000000001091)
('bbcbbb', 1.4400000000000546)
('cbcbcb', 1.4600000000000364)
('cbbccb', 1.449999999999818)
('cbbcbb', 1.4600000000000364)
('cccccb', 1.5299999999997453)
('bbcbbc', 1.550000000000182)
('cbbbbb', 1.4899999999997817)
('cbcbbc', 1.5700000000001637)
('cccbcc', 1.5900000000001455)
('ccbbcb', 1.599999999999909)
('bbbbcc', 1.6100000000001273)
('bbbbcb', 1.6100000000001273)
('cbcbbb', 1.669999999999618)
('bbcccb', 1.6799999999998363)
('cbbbcc', 1.7100000000000364)
('bcbcbb', 1.7000000000002728)
('ccbbbb', 1.7100000000000364)
('bbbbbc', 1.7899999999999636)
('bcbccc', 1.7699999999999818)
('ccccbb', 1.7699999999999818)
('ccbccc', 1.8400000000001455)
('cbcbcc', 1.8399999999996908)
('bbccbb', 1.8400000000001455)
('bcbbbb', 1.900000000000091)
('bcccbb', 1.930000000000291)
('cbbbcb', 1.8899999999998727)
('bcccbc', 1.8900000000003274)
('bcbcbc', 1.949999999999818)
('cbbbbc', 1.9500000000002728)
('cbcccc', 1.9400000000000546)
('bbbcbc', 2.0)
('ccccbc', 2.019999999999982)
('bbbbbb', 2.0599999999999454)
('cbbcbc', 2.069999999999709)
('bccbbc', 2.0900000000001455)
('bbcbcb', 2.0799999999999272)
('ccbccb', 2.1399999999998727)
('cbccbc', 2.1100000000001273)
('ccbcbc', 2.150000000000091)
('cccbbc', 2.199999999999818)
('bccbbb', 2.25)
('bbbccc', 2.300000000000182)
('bccbcb', 2.2899999999999636)
('bccccb', 2.2899999999999636)
('bcbbbc', 2.299999999999727)
('cbcccb', 2.3600000000001273)
('bcbccb', 2.2899999999999636)
('ccbcbb', 2.3299999999999272)
('bbccbc', 2.330000000000382)
('bbbcbb', 2.399999999999636)
('cbcbccc', 2.369999999999891)
('cccccbb', 2.4299999999998363)
('cbcccbb', 2.450000000000273)
('cbccccc', 2.4600000000000364)
('bcbccbb', 2.4900000000002365)
('bccbccb', 2.5099999999997635)
('bcbcccb', 2.4899999999997817)
('bccbbbb', 2.5399999999999636)
('bbccbbc', 2.569999999999709)
('ccbcbbc', 2.6100000000001273)
('bbbbcbb', 2.5899999999996908)
('bbbbcbc', 2.5799999999999272)
('bbccccc', 2.650000000000091)
('cbbccbb', 2.650000000000091)
('cbbccbc', 2.700000000000273)
('bcbcbbb', 2.7199999999998)
('cbbbbbb', 2.6799999999998363)
('cbcbbbc', 2.730000000000018)
('bcbcbcb', 2.7599999999997635)
('cbccbbb', 2.75)
('cccccbc', 2.800000000000182)
('bccccbb', 2.8299999999999272)
('bcbbbcc', 2.8399999999996908)
('bcbbbbb', 2.830000000000382)
('ccbbcbb', 2.9099999999998545)
('bbcbbcc', 2.9700000000002547)
('ccccbbb', 2.9299999999998363)
('cccbcbb', 3.0099999999997635)
('bbcbccb', 2.9600000000000364)
('cbbcbcb', 3.0)
('cbbbccb', 2.980000000000018)
('bcccbcc', 3.0599999999999454)
('bcbbcbb', 3.0599999999999454)
('cbbcccb', 3.0799999999999272)
('cbcbbbb', 3.099999999999909)
('bcccbbb', 3.0899999999996908)
('cbbbbcb', 3.150000000000091)
('cbbbcbb', 3.1399999999998727)
('ccbcccc', 3.1599999999998545)
('bcbcbbc', 3.1799999999998363)
('bbbbccc', 3.180000000000291)
('cbcbccb', 3.2799999999997453)
('cccbbcc', 3.230000000000018)
('bcbbcbc', 3.3100000000004)
('cbccbcc', 3.349999999999909)
('bcbbbcb', 3.4099999999998545)
('bbbbbcc', 3.419999999999618)
('ccbccbb', 3.4299999999998363)
('cbbbbcc', 3.389999999999418)
('bbccbbb', 3.4200000000000728)
('cbbcbbc', 3.480000000000473)
('cbbcbbb', 3.430000000000291)
('bccbcbb', 3.4899999999997817)
('ccbbcbc', 3.5)
('bbbcbcb', 3.519999999999527)
('ccbbbbb', 3.469999999999345)
('cbcbcbc', 3.589999999999236)
('bbbcbbb', 3.5299999999997453)
('bcccccc', 3.649999999999636)
('bbccccb', 3.639999999999418)
('cccbbcb', 3.699999999999818)
('ccbbbcc', 3.699999999999818)
('cccbbbc', 3.6899999999996)
('bcbccbc', 3.7100000000000364)
('bbbccbb', 3.75)
('cbbbccc', 3.769999999999527)
('cbccbcb', 3.6799999999993815)
('ccccbbc', 3.780000000000655)
('bccccbc', 3.850000000000364)
('ccbcccb', 3.860000000000582)
('bcccbbc', 3.8900000000003274)
('bbcbbbc', 3.949999999999818)
('ccccbcc', 3.930000000000291)
('bccbbcb', 3.9899999999997817)
('bbccbcb', 3.9399999999996)
('bbcbcbc', 3.9399999999996)

Time taken to extract lstar-dfa: 401.58736300468445
number of states of the dfa: 204
returned flag: False
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'c'}, 'bcbcbc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'cbbccbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cccc': {'a': 'a', 'b': 'ccccb', 'c': 'ccccc'}, 'cbbc': {'a': 'ab', 'b': 'cbbcb', 'c': 'cbbcc'}, 'cbcb': {'a': 'ab', 'b': 'cbcbb', 'c': 'cbcbc'}, 'ccccb': {'a': 'ab', 'b': 'ccccbb', 'c': 'ccccbc'}, 'bcbbcbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cc': {'a': 'a', 'b': 'ccb', 'c': 'ccc'}, 'bccbcbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcbbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcccbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbcccc': {'a': 'ab', 'b': 'ab', 'c': 'cbbccbb'}, 'bcccbbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbcbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bccccbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bccccb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'bcbcbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccc': {'a': 'a', 'b': 'cccb', 'c': 'cccc'}, 'bbbbcc': {'a': 'ab', 'b': 'ab', 'c': 'cbbccbb'}, 'bcbcccb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbbb': {'a': 'ab', 'b': 'bbbbb', 'c': 'bbbbc'}, 'cbcbcc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'cbcbbb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'bbcccb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbbcbc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'cccccb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'cbbbcbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbc': {'a': 'ab', 'b': 'ccbcb', 'c': 'ccbcc'}, 'bbccbbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbccccb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bccccbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbb': {'a': 'ab', 'b': 'cbbbb', 'c': 'cbbbc'}, 'cbbcbbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbcbbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bccccc': {'a': 'ab', 'b': 'ab', 'c': 'cbbccbb'}, 'bbbbbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cccbcb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'ccbcb': {'a': 'ab', 'b': 'ccbcbb', 'c': 'cbbccbb'}, 'cbbbbb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'cbbccbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbbcbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbcbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcbcb': {'a': 'ab', 'b': 'bcbcbb', 'c': 'bcbcbc'}, 'cccbbb': {'a': 'ab', 'b': 'ab', 'c': 'cbbccbb'}, 'bbbccbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbcbcb': {'a': 'ab', 'b': 'ab', 'c': 'cbbccbb'}, 'cbcc': {'a': 'ab', 'b': 'cbccb', 'c': 'cbccc'}, 'bccb': {'a': 'ab', 'b': 'bccbb', 'c': 'bccbc'}, 'cccbc': {'a': 'ab', 'b': 'cccbcb', 'c': 'cbbccbb'}, 'bbbbbc': {'a': 'ab', 'b': 'ab', 'c': 'cbbccbb'}, 'bbcb': {'a': 'ab', 'b': 'bbcbb', 'c': 'bbcbc'}, 'bbcbccb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ab': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbbbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcbcbbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cccbcbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbbcc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'bccbbc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'bbccbb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'ccbcbbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbb': {'a': 'ab', 'b': 'ccbbb', 'c': 'ccbbc'}, 'cbcbbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbbcb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'bbccccc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbcbcbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbccbc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'cbcbb': {'a': 'ab', 'b': 'cbcbbb', 'c': 'cbbccbb'}, 'bbcbcc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'ccccc': {'a': 'a', 'b': 'cccccb', 'c': 'a'}, 'bbbccb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'cccbbc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'bbccbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbcc': {'a': 'ab', 'b': 'cbbccb', 'c': 'cbbccc'}, 'bb': {'a': 'ab', 'b': 'bbb', 'c': 'bbc'}, 'cbccbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbcccb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbcccbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'b': {'a': 'ab', 'b': 'bb', 'c': 'bc'}, 'cbbbb': {'a': 'ab', 'b': 'cbbbbb', 'c': 'cbbbbc'}, 'cbcbc': {'a': 'ab', 'b': 'cbcbcb', 'c': 'cbcbcc'}, 'bbbbc': {'a': 'ab', 'b': 'bbbbcb', 'c': 'bbbbcc'}, 'bccbc': {'a': 'ab', 'b': 'bccbcb', 'c': 'bccbcc'}, 'cbcbbbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cccbbbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bccbbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bccbccb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcccbb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'bbbcb': {'a': 'ab', 'b': 'bbbcbb', 'c': 'bbbcbc'}, 'bbcbbb': {'a': 'ab', 'b': 'ab', 'c': 'cbbccbb'}, 'cbbbbc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'bbb': {'a': 'ab', 'b': 'bbbb', 'c': 'bbbc'}, 'bccbbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cccbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcb': {'a': 'ab', 'b': 'bcbb', 'c': 'bcbc'}, 'bbbbccc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcbb': {'a': 'ab', 'b': 'bcbbb', 'c': 'bcbbc'}, 'cbccbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbcc': {'a': 'ab', 'b': 'ccbccb', 'c': 'ccbccc'}, 'bcbbbb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'ccbbb': {'a': 'ab', 'b': 'ccbbbb', 'c': 'ccbbbc'}, 'bcbbbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbbcbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cccbbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bccbcc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'bcbccc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'bcccc': {'a': 'ab', 'b': 'bccccb', 'c': 'bccccc'}, 'bccbcb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'cccbb': {'a': 'ab', 'b': 'cccbbb', 'c': 'cccbbc'}, 'bbbbb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'bbbbbc'}, 'bcccbc': {'a': 'ab', 'b': 'ab', 'c': 'cbbccbb'}, 'ccbccc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'cbcbbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbbbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbcbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbcbbc': {'a': 'ab', 'b': 'ab', 'c': 'cbbccbb'}, 'bcc': {'a': 'ab', 'b': 'bccb', 'c': 'bccc'}, 'cbbcb': {'a': 'ab', 'b': 'cbbcbb', 'c': 'cbbcbc'}, 'bbccb': {'a': 'ab', 'b': 'bbccbb', 'c': 'bbccbc'}, 'ccccbb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'bbbccc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbbbcb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'ccccbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbcccc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcbcbb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'ccbbbb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'cccbbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbcbc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'ccbbbc': {'a': 'ab', 'b': 'ab', 'c': 'cbbccbb'}, 'cbccccc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcbcbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbcc': {'a': 'ab', 'b': 'bbccb', 'c': 'bbccc'}, 'bbcbc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'bbcbcc'}, 'ccbbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'aba': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbbccc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcbbbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcbbbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccb': {'a': 'ab', 'b': 'ccbb', 'c': 'ccbc'}, 'ccbccb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'bcbbcbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bccbbb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'bbbc': {'a': 'ab', 'b': 'bbbcb', 'c': 'bbbcc'}, 'cbccc': {'a': 'ab', 'b': 'cbcccb', 'c': 'cbcccc'}, 'bbccbc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'cbccbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbcccc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'ccbbbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbcccb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'bcbc': {'a': 'ab', 'b': 'bcbcb', 'c': 'bcbcc'}, 'bcccccc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbccb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'cbcbccb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbbc': {'a': 'ab', 'b': 'cbbbcb', 'c': 'cbbbcc'}, 'bcbbbc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'bcccb': {'a': 'ab', 'b': 'bcccbb', 'c': 'bcccbc'}, 'bcbccbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbbbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbcbb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'cccccbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bc': {'a': 'ab', 'b': 'bcb', 'c': 'bcc'}, 'bbbcc': {'a': 'ab', 'b': 'bbbccb', 'c': 'cbbccbb'}, 'bcbbcb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'bcbccbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbbbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bccc': {'a': 'ab', 'b': 'bcccb', 'c': 'bcccc'}, 'cbbccc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'bcccbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbcbb': {'a': 'ab', 'b': 'ab', 'c': 'cbbccbb'}, 'bbc': {'a': 'ab', 'b': 'bbcb', 'c': 'bbcc'}, 'bbccbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcbcc': {'a': 'ab', 'b': 'bcbccb', 'c': 'bcbccc'}, 'cccccbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbcbbbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cb': {'a': 'ab', 'b': 'cbb', 'c': 'cbc'}, 'bbbbcbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbccbb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'bbbcbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbb': {'a': 'ab', 'b': 'cbbb', 'c': 'cbbc'}, 'cbc': {'a': 'ab', 'b': 'cbcb', 'c': 'cbcc'}, 'ccbbcbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbbbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccccbc': {'a': 'ab', 'b': 'ab', 'c': 'cbbccbb'}, 'bcbbb': {'a': 'ab', 'b': 'bcbbbb', 'c': 'bcbbbc'}, 'bbbbcbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbccc': {'a': 'ab', 'b': 'cbbccbb', 'c': 'bbcccc'}, 'cbccb': {'a': 'ab', 'b': 'cbccbb', 'c': 'cbccbc'}, 'bbcbb': {'a': 'ab', 'b': 'bbcbbb', 'c': 'bbcbbc'}, 'bcbbc': {'a': 'ab', 'b': 'bcbbcb', 'c': 'cbbccbb'}, 'bbcbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'c': {'a': 'a', 'b': 'cb', 'c': 'cc'}, 'bbbcbb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'ab'}, 'cbbbccb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbbcb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'bccbb': {'a': 'ab', 'b': 'bccbbb', 'c': 'bccbbc'}, 'ccccbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccccbbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbcccb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcbccb': {'a': 'ab', 'b': 'cbbccbb', 'c': 'cbbccbb'}, 'a': {'a': 'a', 'b': 'ab', 'c': 'a'}, 'cccb': {'a': 'ab', 'b': 'cccbb', 'c': 'cccbc'}, 'cbcbccc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbccbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbbc': {'a': 'ab', 'b': 'ccbbcb', 'c': 'cbbccbb'}}
Explanation matches RNN: 100.0
RNN matches ground truth: 100.0
Explanation matches ground truth: 100.0
Lstar matches RNN: 100.0
Lstar matches ground truth: 100.0
target query      explanation status  test accuracy  rnn score  explanation score  explanation score on ground truth  extraction time revised delta revised epsilon                counterexamples train size test size ltl_depth lstar_states  lstar explanation score  lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  F(a)  ((F a) & (F b))   True          100.0      100.0              100.0                              100.0         4.221991          None            None  [, ba, b, ab, a, bca, cb, ac]          0         0         2          204                    100.0                                    100.0             401.587363        False      0.1    0.1
target: F(aUb)
query: F(a)


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.12332344055175781  s
EQ test took  0.0006334781646728516  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.12675881385803223  s
EQ test took  0.02094888687133789  s
new counterexample: ba  should be accepted by implementation


positive traces---> 
['ba']


negative traces---> 
['']



1  iteration complete



start formula depth: 1
Before normalization: x1
Learning formula with depth 0
learned LTL formula: b
Learning took:  0.14639687538146973  s
EQ test took  0.014247655868530273  s
new counterexample: b  should be rejected by implementation


positive traces---> 
['ba']


negative traces---> 
['', 'b']



2  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (X x0)
Learning formula with depth 1
learned LTL formula: (X a)
Learning took:  0.17103314399719238  s
EQ test took  0.01878499984741211  s
new counterexample: ab  should be accepted by implementation


positive traces---> 
['ba', 'ab']


negative traces---> 
['', 'b']



3  iteration complete



start formula depth: 2
Before normalization: (F x0)
Learning formula with depth 1
learned LTL formula: (F a)
Learning took:  0.14704084396362305  s
EQ test took  0.09400439262390137  s
new counterexample: a  should be rejected by implementation


positive traces---> 
['ba', 'ab']


negative traces---> 
['', 'b', 'a']



4  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (X (! x2))
Learning formula with depth 2
learned LTL formula: (X (~ c))
Learning took:  0.2767038345336914  s
EQ test took  0.0260469913482666  s
new counterexample: bca  should be accepted by implementation


positive traces---> 
['ba', 'ab', 'bca']


negative traces---> 
['', 'b', 'a']



5  iteration complete



start formula depth: 3
Before normalization: (X (x2 -> x2))
Learning formula with depth 1
learned LTL formula: (X true)
Learning took:  0.27330470085144043  s
EQ test took  0.07732582092285156  s
new counterexample: cb  should be rejected by implementation


positive traces---> 
['ba', 'ab', 'bca']


negative traces---> 
['', 'b', 'a', 'cb']



6  iteration complete



start formula depth: 3
increasing formula depth to  4
increasing formula depth to  5
Before normalization: ((! (G x0)) & (F x0))
Learning formula with depth 3
learned LTL formula: ((F a) & (~ (G a)))
Learning took:  1.16117525100708  s
No positive counterexample found
EQ test took  0.18647003173828125  s
new counterexample: ca  should be rejected by implementation


positive traces---> 
['ba', 'ab', 'bca']


negative traces---> 
['', 'b', 'a', 'cb', 'ca']



7  iteration complete



start formula depth: 5
Before normalization: ((F x0) & (x0 U x1))
Learning formula with depth 2
learned LTL formula: ((a U b) & (F a))
Learning took:  0.8432023525238037  s
EQ test took  0.15427684783935547  s
new counterexample: cba  should be accepted by implementation


positive traces---> 
['ba', 'ab', 'bca', 'cba']


negative traces---> 
['', 'b', 'a', 'cb', 'ca']



8  iteration complete



start formula depth: 5
Before normalization: ((F x0) & ((F x0) U x1))
Learning formula with depth 3
learned LTL formula: ((F a) & ((F a) U b))
Learning took:  0.9537956714630127  s
No negative counterexample found
EQ test took  0.2771294116973877  s
new counterexample: aacb  should be accepted by implementation


positive traces---> 
['ba', 'ab', 'bca', 'cba', 'aacb']


negative traces---> 
['', 'b', 'a', 'cb', 'ca']



9  iteration complete



start formula depth: 5
Before normalization: ((F x1) & (F x0))
Learning formula with depth 2
learned LTL formula: ((F a) & (F b))
Learning took:  1.251129150390625  s
EQ test took  0.32562875747680664  s


epsilon= 0.1 delta= 0.05 max_trace_length= 50
query: F(a)
final ltl:  ((F a) & (F b))

Time taken to extract ltl: 6.685145616531372
overall guided extraction time took: 15.270000000000437
generated counterexamples were: (format: (counterexample, counterexample generation time))
('', 0.0)
('abc', 0.020000000000436557)
('b', 0.13000000000010914)
('cb', 0.17999999999938154)
('bb', 0.27000000000043656)
('bc', 0.3000000000001819)
('bcc', 0.3599999999996726)
('ccb', 0.3900000000003274)
('bbb', 0.4000000000005457)
('cbc', 0.46999999999934516)
('bbc', 0.4899999999997817)
('cbb', 0.5500000000001819)
('bcb', 0.5900000000001455)
('bbbc', 0.6299999999991996)
('ccbb', 0.6200000000008004)
('cccb', 0.589999999999236)
('bbbb', 0.6700000000000728)
('ccbc', 0.7300000000004729)
('cccbb', 0.7399999999997817)
('ccccb', 0.7599999999993088)
('ccccbc', 0.8000000000001819)
('cccccb', 0.8299999999999272)
('cccbc', 0.8599999999996726)
('ccccbb', 0.8800000000001091)
('ccccccb', 0.9800000000004729)
('cccccbb', 0.9299999999993815)
<IPython.core.display.Image object>

Time taken to extract lstar-dfa: 15.27699327468872
number of states of the dfa: 34
returned flag: True
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'c'}, 'abc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccc': {'a': 'a', 'b': 'ccccb', 'c': 'ccccc'}, 'ccccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cc': {'a': 'a', 'b': 'ccb', 'c': 'ccc'}, 'ccbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bcc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccccbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccccc': {'a': 'a', 'b': 'cccccb', 'c': 'cccccc'}, 'cccccc': {'a': 'a', 'b': 'ccbb', 'c': 'a'}, 'bc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccc': {'a': 'a', 'b': 'cccb', 'c': 'cccc'}, 'bb': {'a': 'abc', 'b': 'bbb', 'c': 'abc'}, 'bbbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'b': {'a': 'abc', 'b': 'bb', 'c': 'bc'}, 'bbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccccbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccccccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccccbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bcb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'c': {'a': 'a', 'b': 'cb', 'c': 'cc'}, 'bbbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'a': {'a': 'a', 'b': 'abc', 'c': 'a'}, 'cccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ab': {'a': 'abc', 'b': 'abc', 'c': 'abc'}}
Explanation matches RNN: 100.0
RNN matches ground truth: 100.0
Explanation matches ground truth: 100.0
Lstar matches RNN: 100.0
Lstar matches ground truth: 100.0
target query      explanation status  test accuracy  rnn score  explanation score  explanation score on ground truth  extraction time revised delta revised epsilon                           counterexamples train size test size ltl_depth lstar_states  lstar explanation score  lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  F(a)  ((F a) & (F b))   True          100.0      100.0              100.0                              100.0         6.685146          None            None  [, ba, b, ab, a, bca, cb, ca, cba, aacb]          0         0         2           34                    100.0                                    100.0              15.276993         True      0.1   0.05
target: F(aUb)
query: F(a)


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.12662577629089355  s
EQ test took  0.0006401538848876953  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.1095283031463623  s
EQ test took  0.03171372413635254  s
new counterexample: ba  should be accepted by implementation


positive traces---> 
['ba']


negative traces---> 
['']



1  iteration complete



start formula depth: 1
Before normalization: x1
Learning formula with depth 0
learned LTL formula: b
Learning took:  0.13731122016906738  s
EQ test took  0.01922440528869629  s
new counterexample: b  should be rejected by implementation


positive traces---> 
['ba']


negative traces---> 
['', 'b']



2  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (X x0)
Learning formula with depth 1
learned LTL formula: (X a)
Learning took:  0.17011356353759766  s
EQ test took  0.025584697723388672  s
new counterexample: ab  should be accepted by implementation


positive traces---> 
['ba', 'ab']


negative traces---> 
['', 'b']



3  iteration complete



start formula depth: 2
Before normalization: (F x0)
Learning formula with depth 1
learned LTL formula: (F a)
Learning took:  0.1731715202331543  s
EQ test took  0.12593436241149902  s
new counterexample: a  should be rejected by implementation


positive traces---> 
['ba', 'ab']


negative traces---> 
['', 'b', 'a']



4  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (X (! x2))
Learning formula with depth 2
learned LTL formula: (X (~ c))
Learning took:  0.2714195251464844  s
EQ test took  0.03913593292236328  s
new counterexample: bca  should be accepted by implementation


positive traces---> 
['ba', 'ab', 'bca']


negative traces---> 
['', 'b', 'a']



5  iteration complete



start formula depth: 3
Before normalization: (X (x2 -> x2))
Learning formula with depth 1
learned LTL formula: (X true)
Learning took:  0.2786865234375  s
EQ test took  0.07362103462219238  s
new counterexample: ca  should be rejected by implementation


positive traces---> 
['ba', 'ab', 'bca']


negative traces---> 
['', 'b', 'a', 'ca']



6  iteration complete



start formula depth: 3
increasing formula depth to  4
increasing formula depth to  5
Before normalization: ((X (x1 -> x1)) & (F x1))
Learning formula with depth 2
learned LTL formula: ((X true) & (F b))
Learning took:  1.1545922756195068  s
No positive counterexample found
EQ test took  0.20446157455444336  s
new counterexample: bc  should be rejected by implementation


positive traces---> 
['ba', 'ab', 'bca']


negative traces---> 
['', 'b', 'a', 'ca', 'bc']



7  iteration complete



start formula depth: 5
Before normalization: ((! x2) & (F (X (! x2))))
Learning formula with depth 4
learned LTL formula: ((~ c) & (F (X (~ c))))
Learning took:  0.7847323417663574  s
EQ test took  0.032953500747680664  s
new counterexample: cab  should be accepted by implementation


positive traces---> 
['ba', 'ab', 'bca', 'cab']


negative traces---> 
['', 'b', 'a', 'ca', 'bc']



8  iteration complete



start formula depth: 5
Before normalization: ((F x1) & (F x0))
Learning formula with depth 2
learned LTL formula: ((F a) & (F b))
Learning took:  0.9265885353088379  s
EQ test took  0.3500399589538574  s


epsilon= 0.1 delta= 0.01 max_trace_length= 50
query: F(a)
final ltl:  ((F a) & (F b))

Time taken to extract ltl: 5.049762010574341
Interrupted due to time limit
overall guided extraction time took: 402.09000000000015
generated counterexamples were: (format: (counterexample, counterexample generation time))
('', 0.0)
('aba', 0.08999999999923602)
('b', 0.9600000000000364)
('bb', 1.3100000000004002)
('bc', 1.6499999999996362)
('cb', 1.889999999999418)
('bcb', 2.100000000000364)
('cbb', 2.2899999999999636)
('bbb', 2.4600000000000364)
('bbc', 2.7100000000000364)
('cbc', 2.8400000000001455)
('bcc', 3.0600000000004)
('ccb', 3.2899999999999636)
('bcbc', 3.5)
('cbbb', 3.660000000000764)
('bbbc', 3.7999999999992724)
('ccbc', 3.9400000000005093)
('bccc', 4.25)
('bcbb', 4.470000000000255)
('cbbc', 4.699999999999818)
('cbcb', 4.8400000000001455)
('ccbb', 4.980000000000473)
('bbbb', 5.350000000000364)
('cccb', 5.369999999999891)
('bbcb', 5.579999999999927)
('cbcc', 5.880000000000109)
('bccb', 6.069999999999709)
('bbcc', 6.269999999999527)
('bccbc', 6.510000000000218)
('bcbcc', 6.5700000000006185)
('ccbcc', 6.930000000000291)
('cbbcb', 7.1899999999996)
('bcccc', 7.300000000000182)
('cbbbb', 7.4099999999998545)
('bbbcc', 7.5700000000006185)
('ccbbb', 7.850000000000364)
('cbcbb', 7.919999999999163)
('bccbb', 8.320000000000618)
('ccbcb', 8.36999999999989)
('bcbbb', 8.600000000000364)
('cbcbc', 8.859999999999673)
('ccbbc', 8.969999999999345)
('bcccb', 9.199999999999818)
('bbccc', 9.430000000000291)
('cbbcc', 9.529999999999745)
('cbbbc', 9.699999999999818)
('cbccb', 9.899999999999636)
('ccccb', 10.220000000000255)
('cccbb', 10.300000000000182)
('bbbbc', 10.579999999999927)
('cbccc', 10.729999999999563)
('bcbcb', 10.829999999999927)
('bbbcb', 11.1899999999996)
('bbcbc', 11.409999999999854)
('bcbbc', 11.659999999999854)
('cccbc', 11.800000000000182)
('bbccb', 12.030000000000655)
('bbbbb', 12.230000000000473)
('bbcbb', 12.420000000000073)
('ccbcbb', 12.579999999999927)

Time taken to extract lstar-dfa: 402.11446237564087
number of states of the dfa: 65
returned flag: False
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'c'}, 'cbbbc': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bbcbb': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'cccc': {'a': 'a', 'b': 'cbbbc', 'c': 'a'}, 'cbbc': {'a': 'aba', 'b': 'cbbbc', 'c': 'cbbbc'}, 'cbcb': {'a': 'aba', 'b': 'cbbbc', 'c': 'cbbbc'}, 'bcccc': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'ccccb': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'cc': {'a': 'a', 'b': 'ccb', 'c': 'ccc'}, 'bcccb': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'ccbb': {'a': 'aba', 'b': 'cbbbc', 'c': 'cbbbc'}, 'cccbb': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bbbbb': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bcc': {'a': 'aba', 'b': 'bccb', 'c': 'bccc'}, 'cbbcb': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'cbcbb': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bbccb': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bc': {'a': 'aba', 'b': 'bcb', 'c': 'bcc'}, 'bbbcc': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'ccc': {'a': 'a', 'b': 'cccb', 'c': 'cccc'}, 'cbbcc': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bb': {'a': 'aba', 'b': 'bbb', 'c': 'bbc'}, 'bccc': {'a': 'aba', 'b': 'cbbbc', 'c': 'cbbbc'}, 'bbbb': {'a': 'aba', 'b': 'cbbbc', 'c': 'cbbbc'}, 'b': {'a': 'aba', 'b': 'bb', 'c': 'bc'}, 'cbbbb': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'cbcbc': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bbc': {'a': 'aba', 'b': 'bbcb', 'c': 'bbcc'}, 'bccbc': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bcbcc': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bbbbc': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'ccbc': {'a': 'aba', 'b': 'cbbbc', 'c': 'cbbbc'}, 'cb': {'a': 'aba', 'b': 'cbb', 'c': 'cbc'}, 'cbb': {'a': 'aba', 'b': 'cbbb', 'c': 'cbbc'}, 'cbc': {'a': 'aba', 'b': 'cbcb', 'c': 'cbcc'}, 'bbcc': {'a': 'aba', 'b': 'cbbbc', 'c': 'cbbbc'}, 'bbcbc': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'cbbb': {'a': 'aba', 'b': 'cbbbc', 'c': 'cbbbc'}, 'bbbcb': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bbb': {'a': 'aba', 'b': 'bbbb', 'c': 'bbbc'}, 'aba': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bcbbb': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bcb': {'a': 'aba', 'b': 'bcbb', 'c': 'bcbc'}, 'ccbcb': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bcbb': {'a': 'aba', 'b': 'cbbbc', 'c': 'cbbbc'}, 'ccb': {'a': 'aba', 'b': 'ccbb', 'c': 'ccbc'}, 'bbccc': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'c': {'a': 'a', 'b': 'cb', 'c': 'cc'}, 'cbccb': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'ccbcc': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bcbbc': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bbbc': {'a': 'aba', 'b': 'cbbbc', 'c': 'cbbbc'}, 'ccbbb': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bccbb': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'cbccc': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bcbcb': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'cbcc': {'a': 'aba', 'b': 'cbbbc', 'c': 'cbbbc'}, 'bccb': {'a': 'aba', 'b': 'cbbbc', 'c': 'cbbbc'}, 'cccbc': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'bcbc': {'a': 'aba', 'b': 'cbbbc', 'c': 'cbbbc'}, 'a': {'a': 'a', 'b': 'aba', 'c': 'a'}, 'bbcb': {'a': 'aba', 'b': 'cbbbc', 'c': 'cbbbc'}, 'cccb': {'a': 'aba', 'b': 'cbbbc', 'c': 'cbbbc'}, 'ab': {'a': 'aba', 'b': 'aba', 'c': 'aba'}, 'ccbbc': {'a': 'aba', 'b': 'aba', 'c': 'aba'}}
Explanation matches RNN: 100.0
RNN matches ground truth: 100.0
Explanation matches ground truth: 100.0
Lstar matches RNN: 100.0
Lstar matches ground truth: 100.0
target query      explanation status  test accuracy  rnn score  explanation score  explanation score on ground truth  extraction time revised delta revised epsilon                     counterexamples train size test size ltl_depth lstar_states  lstar explanation score  lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  F(a)  ((F a) & (F b))   True          100.0      100.0              100.0                              100.0         5.049762          None            None  [, ba, b, ab, a, bca, ca, bc, cab]          0         0         2           65                    100.0                                    100.0             402.114462        False      0.1   0.01
target: F(aUb)
query: F(a)


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.11179447174072266  s
EQ test took  0.0007007122039794922  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.12680673599243164  s
EQ test took  0.0308535099029541  s
new counterexample: ab  should be accepted by implementation


positive traces---> 
['ab']


negative traces---> 
['']



1  iteration complete



start formula depth: 1
Before normalization: x0
Learning formula with depth 0
learned LTL formula: a
Learning took:  0.1361229419708252  s
EQ test took  0.014789581298828125  s
new counterexample: a  should be rejected by implementation


positive traces---> 
['ab']


negative traces---> 
['', 'a']



2  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (X x1)
Learning formula with depth 1
learned LTL formula: (X b)
Learning took:  0.17789721488952637  s
EQ test took  0.018111228942871094  s
new counterexample: ba  should be accepted by implementation


positive traces---> 
['ab', 'ba']


negative traces---> 
['', 'a']



3  iteration complete



start formula depth: 2
Before normalization: (F x1)
Learning formula with depth 1
learned LTL formula: (F b)
Learning took:  0.16642498970031738  s
EQ test took  0.22115421295166016  s
new counterexample: b  should be rejected by implementation


positive traces---> 
['ab', 'ba']


negative traces---> 
['', 'a', 'b']



4  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (X (x1 -> x1))
Learning formula with depth 1
learned LTL formula: (X true)
Learning took:  0.26549696922302246  s
No positive counterexample found
EQ test took  0.1045076847076416  s
new counterexample: cb  should be rejected by implementation


positive traces---> 
['ab', 'ba']


negative traces---> 
['', 'a', 'b', 'cb']



5  iteration complete



start formula depth: 3
increasing formula depth to  4
Before normalization: ((! x2) & (X (! x2)))
Learning formula with depth 3
learned LTL formula: ((~ c) & (X (~ c)))
Learning took:  0.5239362716674805  s
EQ test took  0.035733699798583984  s
new counterexample: bca  should be accepted by implementation


positive traces---> 
['ab', 'ba', 'bca']


negative traces---> 
['', 'a', 'b', 'cb']



6  iteration complete



start formula depth: 4
increasing formula depth to  5
Before normalization: ((F x0) & (! (G x0)))
Learning formula with depth 3
learned LTL formula: ((F a) & (~ (G a)))
Learning took:  1.01582670211792  s
EQ test took  0.3138561248779297  s
new counterexample: ac  should be rejected by implementation


positive traces---> 
['ab', 'ba', 'bca']


negative traces---> 
['', 'a', 'b', 'cb', 'ac']



7  iteration complete



start formula depth: 5
Before normalization: ((! x2) & ((! x2) U (X (! x2))))
Learning formula with depth 4
learned LTL formula: ((~ c) & ((~ c) U (X (~ c))))
Learning took:  0.9179303646087646  s
EQ test took  0.047890663146972656  s
new counterexample: cab  should be accepted by implementation


positive traces---> 
['ab', 'ba', 'bca', 'cab']


negative traces---> 
['', 'a', 'b', 'cb', 'ac']



8  iteration complete



start formula depth: 5
Before normalization: ((F x0) & ((F x0) U x1))
Learning formula with depth 3
learned LTL formula: ((F a) & ((F a) U b))
Learning took:  1.1894254684448242  s
No negative counterexample found
EQ test took  0.45136380195617676  s
new counterexample: acb  should be accepted by implementation


positive traces---> 
['ab', 'ba', 'bca', 'cab', 'acb']


negative traces---> 
['', 'a', 'b', 'cb', 'ac']



9  iteration complete



start formula depth: 5
Before normalization: ((F x0) & (F x1))
Learning formula with depth 2
learned LTL formula: ((F a) & (F b))
Learning took:  1.1061110496520996  s
EQ test took  0.5999696254730225  s


epsilon= 0.05 delta= 0.1 max_trace_length= 50
query: F(a)
final ltl:  ((F a) & (F b))

Time taken to extract ltl: 7.592779159545898
overall guided extraction time took: 5.869999999999891
generated counterexamples were: (format: (counterexample, counterexample generation time))
('', 0.0)
('abc', 0.010000000000218279)
('b', 0.07999999999992724)
('cb', 0.06999999999970896)
('bc', 0.11000000000058208)
('bb', 0.13000000000010914)
('cbc', 0.1499999999996362)
('cbb', 0.13000000000010914)
('ccb', 0.17000000000007276)
('bcc', 0.21000000000003638)
('bbc', 0.25)
('bbb', 0.25)
('bcb', 0.26999999999952706)
('ccbc', 0.3099999999994907)
('bcbb', 0.3100000000004002)
('bcbc', 0.3000000000001819)
('ccbb', 0.3100000000004002)
('cccb', 0.32999999999992724)
('ccccb', 0.3499999999994543)
('cccbb', 0.38000000000010914)
('cccbc', 0.36999999999989086)
('cccccb', 0.37999999999919964)
('ccccbb', 0.42000000000007276)
<IPython.core.display.Image object>

Time taken to extract lstar-dfa: 5.8692467212677
number of states of the dfa: 30
returned flag: True
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'c'}, 'abc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccc': {'a': 'a', 'b': 'ccccb', 'c': 'ccccc'}, 'ccccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cc': {'a': 'a', 'b': 'ccb', 'c': 'ccc'}, 'ccbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bcc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccccbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccccc': {'a': 'a', 'b': 'ccbb', 'c': 'a'}, 'bc': {'a': 'abc', 'b': 'bcb', 'c': 'abc'}, 'ccc': {'a': 'a', 'b': 'cccb', 'c': 'cccc'}, 'bb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'b': {'a': 'abc', 'b': 'bb', 'c': 'bc'}, 'bbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bcb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bcbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'c': {'a': 'a', 'b': 'cb', 'c': 'cc'}, 'cccbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bcbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'a': {'a': 'a', 'b': 'abc', 'c': 'a'}, 'cccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ab': {'a': 'abc', 'b': 'abc', 'c': 'abc'}}
Explanation matches RNN: 100.0
RNN matches ground truth: 100.0
Explanation matches ground truth: 100.0
Lstar matches RNN: 100.0
Lstar matches ground truth: 100.0
target query      explanation status  test accuracy  rnn score  explanation score  explanation score on ground truth  extraction time revised delta revised epsilon                          counterexamples train size test size ltl_depth lstar_states  lstar explanation score  lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  F(a)  ((F a) & (F b))   True          100.0      100.0              100.0                              100.0         7.592779          None            None  [, ab, a, ba, b, cb, bca, ac, cab, acb]          0         0         2           30                    100.0                                    100.0               5.869247         True     0.05    0.1
target: F(aUb)
query: F(a)


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.13150954246520996  s
EQ test took  0.0006244182586669922  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.12404990196228027  s
EQ test took  0.03760361671447754  s
new counterexample: ab  should be accepted by implementation


positive traces---> 
['ab']


negative traces---> 
['']



1  iteration complete



start formula depth: 1
Before normalization: x0
Learning formula with depth 0
learned LTL formula: a
Learning took:  0.1391277313232422  s
EQ test took  0.021970510482788086  s
new counterexample: a  should be rejected by implementation


positive traces---> 
['ab']


negative traces---> 
['', 'a']



2  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (X x1)
Learning formula with depth 1
learned LTL formula: (X b)
Learning took:  0.17432355880737305  s
EQ test took  0.033084869384765625  s
new counterexample: ba  should be accepted by implementation


positive traces---> 
['ab', 'ba']


negative traces---> 
['', 'a']



3  iteration complete



start formula depth: 2
Before normalization: (F x1)
Learning formula with depth 1
learned LTL formula: (F b)
Learning took:  0.1692795753479004  s
EQ test took  0.20871591567993164  s
new counterexample: b  should be rejected by implementation


positive traces---> 
['ab', 'ba']


negative traces---> 
['', 'a', 'b']



4  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (X (x1 -> x1))
Learning formula with depth 1
learned LTL formula: (X true)
Learning took:  0.2766454219818115  s
No positive counterexample found
EQ test took  0.12267422676086426  s
new counterexample: bc  should be rejected by implementation


positive traces---> 
['ab', 'ba']


negative traces---> 
['', 'a', 'b', 'bc']



5  iteration complete



start formula depth: 3
Before normalization: (X (! x2))
Learning formula with depth 2
learned LTL formula: (X (~ c))
Learning took:  0.27483153343200684  s
EQ test took  0.04432511329650879  s
new counterexample: bca  should be accepted by implementation


positive traces---> 
['ab', 'ba', 'bca']


negative traces---> 
['', 'a', 'b', 'bc']



6  iteration complete



start formula depth: 3
increasing formula depth to  4
Before normalization: (X (! (G x2)))
Learning formula with depth 3
learned LTL formula: (X (~ (G c)))
Learning took:  0.5847179889678955  s
EQ test took  0.1990957260131836  s
new counterexample: aa  should be rejected by implementation


positive traces---> 
['ab', 'ba', 'bca']


negative traces---> 
['', 'a', 'b', 'bc', 'aa']



7  iteration complete



start formula depth: 4
increasing formula depth to  5
Before normalization: ((((! x0) U x0) U (! x0)) & ((! x0) U x0))
Learning formula with depth 3
learned LTL formula: ((F a) & ((F a) U (~ a)))
Learning took:  1.2234232425689697  s
No positive counterexample found
EQ test took  0.38303446769714355  s
new counterexample: ca  should be rejected by implementation


positive traces---> 
['ab', 'ba', 'bca']


negative traces---> 
['', 'a', 'b', 'bc', 'aa', 'ca']



8  iteration complete



start formula depth: 5
Before normalization: ((F x0) & (F x1))
Learning formula with depth 2
learned LTL formula: ((F a) & (F b))
Learning took:  0.8837220668792725  s
EQ test took  0.5895071029663086  s


epsilon= 0.05 delta= 0.05 max_trace_length= 50
query: F(a)
final ltl:  ((F a) & (F b))

Time taken to extract ltl: 5.63544225692749
Interrupted due to time limit
overall guided extraction time took: 403.5100000000002
generated counterexamples were: (format: (counterexample, counterexample generation time))
('', 0.0)
('aba', 0.010000000000218279)
('b', 0.17000000000007276)
('bc', 0.21000000000003638)
('bb', 0.21999999999934516)
('cb', 0.3000000000001819)
('cbb', 0.3400000000001455)
('bbb', 0.36999999999989086)
('bcb', 0.410000000000764)
('bcc', 0.46999999999934516)
('ccb', 0.4900000000006912)
('cbc', 0.5199999999995271)
('bbc', 0.5600000000004002)
('bbbc', 0.5999999999994543)
('bbcc', 0.6400000000003274)
('ccbc', 0.7000000000007276)
('bcbc', 0.7599999999993088)
('cbcc', 0.7899999999999636)
('bccc', 0.7899999999999636)
('bcbb', 0.8699999999998909)
('cccb', 0.9099999999998545)
('bccb', 0.9199999999991633)
('bbcb', 0.9099999999998545)
('cbbc', 0.9899999999997817)
('bbbb', 1.0600000000004002)
('cbcb', 1.0999999999994543)
('ccbb', 1.1499999999996362)
('cbbb', 1.1700000000000728)
('bbbbb', 1.2100000000000364)
('bcbbb', 1.2199999999993452)
('cbbcb', 1.3099999999994907)
('ccbcc', 1.360000000000582)
('ccbcb', 1.3699999999998909)
('cbccb', 1.4400000000005093)
('cccbb', 1.4399999999995998)
('bbcbb', 1.5099999999993088)
('cbbbb', 1.5100000000002183)
('bbbcc', 1.589999999999236)
('cbcbc', 1.6199999999998909)
('bcbcc', 1.569999999999709)
('bcccc', 1.6599999999998545)
('bbccb', 1.680000000000291)
('bbccc', 1.7899999999999636)
('bcbbc', 1.7700000000004366)
('bbbbc', 1.819999999999709)
('bccbb', 1.8499999999994543)
('bccbc', 1.8999999999996362)
('bcbcb', 1.9399999999995998)
('cbcbb', 1.9799999999995634)
('ccbbc', 2.0)
('cbccc', 2.0800000000008367)
('cbbbc', 2.110000000000582)
('bbbcb', 2.119999999999891)
('cbbcc', 2.199999999999818)
('bbcbc', 2.269999999999527)
('ccccb', 2.319999999999709)
('cccbc', 2.259999999999309)
('bcccb', 2.3299999999999272)
('ccbbb', 2.339999999999236)
('ccbbbc', 2.3599999999996726)
('cccbcc', 2.449999999999818)
('cbcbbc', 2.4600000000000364)
('cccbcb', 2.5)
('cbbccb', 2.550000000000182)
('bcbbcb', 2.639999999999418)
('ccbbcc', 2.6899999999996)
('bbbbbb', 2.7399999999997817)
('bccbbb', 2.7799999999997453)
('bccbcc', 2.8400000000001455)
('cbccbc', 2.880000000000109)
('cccccb', 2.880000000000109)
('bbbbcb', 2.930000000000291)
('cbcccb', 2.969999999999345)
('bccbbc', 3.0100000000002183)
('bbccbc', 3.0499999999992724)
('cbcbbb', 3.0900000000001455)
('cbbcbc', 3.119999999999891)
('bcccbb', 3.2200000000002547)
('bbcbcb', 3.25)
('ccccbb', 3.2899999999999636)
('ccbcbc', 3.2999999999992724)
('bcbccc', 3.3400000000001455)
('ccbbbb', 3.399999999999636)
('bcbccb', 3.4200000000000728)
('bcbbbb', 3.4399999999996)
('bccccc', 3.5)
('cccbbc', 3.550000000000182)
('bbbcbc', 3.5600000000004)
('bbccbb', 3.6099999999996726)
('ccbccc', 3.630000000000109)
('bbcbcc', 3.699999999999818)
('bbcccc', 3.7600000000002183)
('cbbbbb', 3.7899999999999636)
('bbbcbb', 3.8599999999996726)
('bbcbbb', 3.869999999999891)
('cbccbb', 3.9399999999996)
('bbbbbc', 3.9200000000000728)
('bbcccb', 3.949999999999818)
('bbbccb', 4.0)
('cbbccc', 4.059999999999491)
('bccccb', 4.0600000000004)
('cccbbb', 4.149999999999636)
('cbcbcb', 4.210000000000036)
('cbcbcc', 4.260000000000218)
('bcbcbb', 4.260000000000218)
('bbbccc', 4.319999999999709)
('cbbbcb', 4.350000000000364)
('ccccbc', 4.369999999999891)
('cbbcbb', 4.350000000000364)
('ccbccb', 4.4299999999993815)
('bbbbcc', 4.460000000000036)
('cbcccc', 4.489999999999782)
('bcbcbc', 4.490000000000691)
('bcccbc', 4.5700000000006185)
('ccbcbb', 4.650000000000546)
('ccbbcb', 4.739999999999782)
('cbbbbc', 4.710000000000036)
('bcbbcc', 4.6599999999998545)
('bccbcb', 4.690000000000509)
('cbbbcc', 4.770000000000437)
('bbcbbc', 4.760000000000218)
('bcbbbc', 4.779999999999745)
('bcbbbbc', 4.800000000000182)
('bbbcbcb', 4.880000000000109)
('bcbbcbc', 4.9099999999998545)
('bbbcbcc', 4.960000000000036)
('bbbbbcb', 4.990000000000691)
('bcccbcb', 5.029999999999745)
('ccbbbbb', 5.079999999999927)
('bbbccbc', 5.109999999999673)
('bbcbbbb', 5.130000000000109)
('cbbbbcb', 5.1599999999998545)
('ccccbcc', 5.220000000000255)
('bccccbb', 5.25)
('cbbbcbb', 5.289999999999964)
('ccbccbb', 5.319999999999709)
('bbbbcbb', 5.390000000000327)
('bbcbccb', 5.430000000000291)
('cccbccc', 5.479999999999563)
('cbcbccc', 5.489999999999782)

Time taken to extract lstar-dfa: 403.5050630569458
number of states of the dfa: 146
returned flag: False
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'c'}, 'bcbcbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cccc': {'a': 'a', 'b': 'ccccb', 'c': 'ccccc'}, 'cbbc': {'a': 'ab', 'b': 'cbbcb', 'c': 'cbbcc'}, 'cbcb': {'a': 'ab', 'b': 'cbcbb', 'c': 'cbcbc'}, 'ccccb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'ccccbc'}, 'cc': {'a': 'a', 'b': 'ccb', 'c': 'ccc'}, 'bcbbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbcccc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bccccb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'ab'}, 'bcbbbbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccc': {'a': 'a', 'b': 'cccb', 'c': 'cccc'}, 'bbbbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbbb': {'a': 'ab', 'b': 'bbbbb', 'c': 'bbbbc'}, 'cbcbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbcbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbcccb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbbcbc': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'cccccb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbbcbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbc': {'a': 'ab', 'b': 'ccbcb', 'c': 'ccbcc'}, 'bccccbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbb': {'a': 'ab', 'b': 'cbbbb', 'c': 'cbbbc'}, 'bccccc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cccbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbcb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'cbbbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbcbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcccbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcbcb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'cccbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbbcbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbcbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbcc': {'a': 'ab', 'b': 'cbccb', 'c': 'cbccc'}, 'bccb': {'a': 'ab', 'b': 'bccbb', 'c': 'bccbc'}, 'cccbc': {'a': 'ab', 'b': 'bcbcbc', 'c': 'cccbcc'}, 'bbbbbc': {'a': 'ab', 'b': 'bcbcbc', 'c': 'ab'}, 'bbcb': {'a': 'ab', 'b': 'bbcbb', 'c': 'bbcbc'}, 'bbcbccb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbbbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ab': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bccbbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbccbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbb': {'a': 'ab', 'b': 'ccbbb', 'c': 'ccbbc'}, 'cbcbbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbbcb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'ab'}, 'bbcbbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbccbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbcbb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'ccccc': {'a': 'a', 'b': 'bcbcbc', 'c': 'a'}, 'bbcbcc': {'a': 'ab', 'b': 'bcbcbc', 'c': 'ab'}, 'bbbccb': {'a': 'ab', 'b': 'ab', 'c': 'bcbcbc'}, 'cccbbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbcc': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bb': {'a': 'ab', 'b': 'bbb', 'c': 'bbc'}, 'b': {'a': 'ab', 'b': 'bb', 'c': 'bc'}, 'cbbbb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'cbbbbc'}, 'cbcbc': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bbbbc': {'a': 'ab', 'b': 'bbbbcb', 'c': 'bcbcbc'}, 'bccbc': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bcccbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbbcb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bbbcbc'}, 'bbcbbb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'ab'}, 'cbbbbc': {'a': 'ab', 'b': 'bcbcbc', 'c': 'ab'}, 'bbb': {'a': 'ab', 'b': 'bbbb', 'c': 'bbbc'}, 'cccbcc': {'a': 'ab', 'b': 'ab', 'c': 'bcbcbc'}, 'bcb': {'a': 'ab', 'b': 'bcbb', 'c': 'bcbc'}, 'bcbb': {'a': 'ab', 'b': 'bcbbb', 'c': 'bcbbc'}, 'ccbcc': {'a': 'ab', 'b': 'ccbccb', 'c': 'bcbcbc'}, 'bcbbbb': {'a': 'ab', 'b': 'ab', 'c': 'bcbcbc'}, 'ccbbb': {'a': 'ab', 'b': 'ccbbbb', 'c': 'bcbcbc'}, 'bbbcbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bccbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcbccc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcccc': {'a': 'ab', 'b': 'bccccb', 'c': 'bcbcbc'}, 'bbbccbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bccbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbbbb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bbbbbc'}, 'cccbb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bcccbc': {'a': 'ab', 'b': 'bcbcbc', 'c': 'ab'}, 'ccbccc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbbccc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcc': {'a': 'ab', 'b': 'bccb', 'c': 'bccc'}, 'cbbcb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bbccb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'ccccbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbcbbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbbbcb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'ab'}, 'ccccbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbbbbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbbbb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'ab'}, 'bcbcbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbcbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbbbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbcc': {'a': 'ab', 'b': 'bbccb', 'c': 'bbccc'}, 'bbcbc': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bbcbcc'}, 'ccbbcc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'aba': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccb': {'a': 'ab', 'b': 'ccbb', 'c': 'ccbc'}, 'ccbccb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'ab'}, 'bcbbcbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bccbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbbc': {'a': 'ab', 'b': 'bbbcb', 'c': 'bbbcc'}, 'cbccc': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bbccbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbcccc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbcccb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcbc': {'a': 'ab', 'b': 'bcbcb', 'c': 'bcbcc'}, 'cbbccb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbbc': {'a': 'ab', 'b': 'cbbbcb', 'c': 'bcbcbc'}, 'bcbbbc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bcccb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bcccbc'}, 'cbbbbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbbcbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bc': {'a': 'ab', 'b': 'bcb', 'c': 'bcc'}, 'bbbcc': {'a': 'ab', 'b': 'bbbccb', 'c': 'bcbcbc'}, 'bcbbcb': {'a': 'ab', 'b': 'ab', 'c': 'bcbcbc'}, 'bccc': {'a': 'ab', 'b': 'bcccb', 'c': 'bcccc'}, 'cbbccc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbcbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbc': {'a': 'ab', 'b': 'bbcb', 'c': 'bbcc'}, 'bcbcc': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'cb': {'a': 'ab', 'b': 'cbb', 'c': 'cbc'}, 'cbccbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbb': {'a': 'ab', 'b': 'cbbb', 'c': 'cbbc'}, 'cccbccc': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'cbc': {'a': 'ab', 'b': 'cbcb', 'c': 'cbcc'}, 'ccbbbbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccccbc': {'a': 'ab', 'b': 'ab', 'c': 'bcbcbc'}, 'bcbbb': {'a': 'ab', 'b': 'bcbbbb', 'c': 'bcbcbc'}, 'bbbbcbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bbccc': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'cbccb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bbcbb': {'a': 'ab', 'b': 'bbcbbb', 'c': 'bcbcbc'}, 'bcbbc': {'a': 'ab', 'b': 'bcbbcb', 'c': 'bcbcbc'}, 'bbcbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'c': {'a': 'a', 'b': 'cb', 'c': 'cc'}, 'bbbcbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbbcb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'bccbb': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bcbcbc'}, 'bcbccb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'a': {'a': 'a', 'b': 'ab', 'c': 'a'}, 'cccb': {'a': 'ab', 'b': 'cccbb', 'c': 'cccbc'}, 'ccbccbb': {'a': 'ab', 'b': 'ab', 'c': 'ab'}, 'ccbbc': {'a': 'ab', 'b': 'bcbcbc', 'c': 'bcbcbc'}}
Explanation matches RNN: 100.0
RNN matches ground truth: 100.0
Explanation matches ground truth: 100.0
Lstar matches RNN: 100.0
Lstar matches ground truth: 100.0
target query      explanation status  test accuracy  rnn score  explanation score  explanation score on ground truth  extraction time revised delta revised epsilon                    counterexamples train size test size ltl_depth lstar_states  lstar explanation score  lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  F(a)  ((F a) & (F b))   True          100.0      100.0              100.0                              100.0         5.635442          None            None  [, ab, a, ba, b, bc, bca, aa, ca]          0         0         2          146                    100.0                                    100.0             403.505063        False     0.05   0.05
target: F(aUb)
query: F(a)


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.1208200454711914  s
EQ test took  0.0006487369537353516  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.12122678756713867  s
EQ test took  0.04886651039123535  s
new counterexample: ab  should be accepted by implementation


positive traces---> 
['ab']


negative traces---> 
['']



1  iteration complete



start formula depth: 1
Before normalization: x0
Learning formula with depth 0
learned LTL formula: a
Learning took:  0.13654565811157227  s
EQ test took  0.02805924415588379  s
new counterexample: a  should be rejected by implementation


positive traces---> 
['ab']


negative traces---> 
['', 'a']



2  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (X x1)
Learning formula with depth 1
learned LTL formula: (X b)
Learning took:  0.17639422416687012  s
EQ test took  0.02686166763305664  s
new counterexample: ba  should be accepted by implementation


positive traces---> 
['ab', 'ba']


negative traces---> 
['', 'a']



3  iteration complete



start formula depth: 2
Before normalization: (F x1)
Learning formula with depth 1
learned LTL formula: (F b)
Learning took:  0.1722276210784912  s
EQ test took  0.24588322639465332  s
new counterexample: b  should be rejected by implementation


positive traces---> 
['ab', 'ba']


negative traces---> 
['', 'a', 'b']



4  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (X (x1 -> x1))
Learning formula with depth 1
learned LTL formula: (X true)
Learning took:  0.28322386741638184  s
No positive counterexample found
EQ test took  0.13473010063171387  s
new counterexample: cc  should be rejected by implementation


positive traces---> 
['ab', 'ba']


negative traces---> 
['', 'a', 'b', 'cc']



5  iteration complete



start formula depth: 3
Before normalization: (X (! x2))
Learning formula with depth 2
learned LTL formula: (X (~ c))
Learning took:  0.2788197994232178  s
EQ test took  0.046640872955322266  s
new counterexample: acb  should be accepted by implementation


positive traces---> 
['ab', 'ba', 'acb']


negative traces---> 
['', 'a', 'b', 'cc']



6  iteration complete



start formula depth: 3
increasing formula depth to  4
Before normalization: ((! x2) U (X (! x2)))
Learning formula with depth 3
learned LTL formula: ((~ c) U (X (~ c)))
Learning took:  0.6178569793701172  s
EQ test took  0.03333711624145508  s
new counterexample: aa  should be rejected by implementation


positive traces---> 
['ab', 'ba', 'acb']


negative traces---> 
['', 'a', 'b', 'cc', 'aa']



7  iteration complete



start formula depth: 4
increasing formula depth to  5
Before normalization: ((F x0) & (F (! x0)))
Learning formula with depth 3
learned LTL formula: ((F a) & (F (~ a)))
Learning took:  1.1498417854309082  s
No positive counterexample found
EQ test took  0.428499698638916  s
new counterexample: ac  should be rejected by implementation


positive traces---> 
['ab', 'ba', 'acb']


negative traces---> 
['', 'a', 'b', 'cc', 'aa', 'ac']



8  iteration complete



start formula depth: 5
Before normalization: ((! (G x1)) & (F x1))
Learning formula with depth 3
learned LTL formula: ((F b) & (~ (G b)))
Learning took:  0.8921360969543457  s
No positive counterexample found
EQ test took  0.46524930000305176  s
new counterexample: cb  should be rejected by implementation


positive traces---> 
['ab', 'ba', 'acb']


negative traces---> 
['', 'a', 'b', 'cc', 'aa', 'ac', 'cb']



9  iteration complete



start formula depth: 5
Before normalization: ((x1 U x0) & (F x1))
Learning formula with depth 2
learned LTL formula: ((b U a) & (F b))
Learning took:  1.0399184226989746  s
EQ test took  0.43053483963012695  s
new counterexample: cba  should be accepted by implementation


positive traces---> 
['ab', 'ba', 'acb', 'cba']


negative traces---> 
['', 'a', 'b', 'cc', 'aa', 'ac', 'cb']



10  iteration complete



start formula depth: 5
Before normalization: ((F x1) & ((F x1) U x0))
Learning formula with depth 3
learned LTL formula: ((F b) & ((F b) U a))
Learning took:  1.154085397720337  s
No negative counterexample found
EQ test took  0.6386713981628418  s
new counterexample: bca  should be accepted by implementation


positive traces---> 
['ab', 'ba', 'acb', 'cba', 'bca']


negative traces---> 
['', 'a', 'b', 'cc', 'aa', 'ac', 'cb']



11  iteration complete



start formula depth: 5
Before normalization: ((F x1) & (F x0))
Learning formula with depth 2
learned LTL formula: ((F a) & (F b))
Learning took:  1.2045323848724365  s
EQ test took  0.8064894676208496  s


epsilon= 0.05 delta= 0.01 max_trace_length= 50
query: F(a)
final ltl:  ((F a) & (F b))

Time taken to extract ltl: 10.699208974838257
overall guided extraction time took: 189.48999999999978
generated counterexamples were: (format: (counterexample, counterexample generation time))
('', 0.0)
('abc', 0.0999999999994543)
('b', 1.0299999999997453)
('cb', 1.1500000000005457)
('bb', 1.550000000000182)
('bc', 1.8400000000001455)
('cbb', 2.069999999999709)
('ccb', 1.9500000000007276)
('cbc', 2.4099999999998545)
('bbc', 2.5700000000006185)
('bcc', 2.6899999999996)
('bbb', 3.0900000000001455)
('bcb', 3.149999999999636)
('bccc', 3.5200000000004366)
('bbcb', 3.639999999999418)
('ccbb', 3.630000000000109)
('bbcc', 3.769999999999527)
('bccb', 3.930000000000291)
('cccb', 4.069999999999709)
('ccbc', 4.380000000000109)
('ccccb', 4.399999999999636)
('cccbb', 4.5900000000001455)
('cccbc', 4.819999999999709)
('ccccbc', 4.949999999999818)
('cccccb', 5.1599999999998545)
('ccccbb', 5.389999999999418)
('ccccccb', 5.4099999999998545)
('ccccccbc', 5.680000000000291)
('cccccbc', 5.75)
('cccccbb', 5.739999999999782)
('baaaacccaaccacacccc', 6.170000000000073)
('bcccc', 6.139999999999418)
('bcccb', 6.25)
('bccccc', 6.490000000000691)
('bccccb', 6.5600000000004)
('bcccccb', 6.759999999999309)
('bcccccc', 7.020000000000437)
('cccccccb', 7.260000000000218)
('bccccccc', 7.509999999999309)
('ccccccbb', 7.5900000000001455)
('bccccccb', 7.920000000000073)

Time taken to extract lstar-dfa: 189.48449277877808
number of states of the dfa: 70
returned flag: True
transitions:->
{'': {'a': 'baaaacccaaccacacccc', 'b': 'b', 'c': 'c'}, 'abc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'baaaaccc': {'a': 'baaaaccca', 'b': 'abc', 'c': 'baaaaccca'}, 'cccc': {'a': 'baaaacccaaccacacccc', 'b': 'ccccb', 'c': 'ccccc'}, 'baaaacccaaccacaccc': {'a': 'baaaacccaaccacacccc', 'b': 'abc', 'c': 'baaaacccaaccacacccc'}, 'bcccc': {'a': 'bcccca', 'b': 'abc', 'c': 'bccccc'}, 'ccccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'baaaacccaaccacacccc': {'a': 'baaaacccaaccacacccc', 'b': 'abc', 'c': 'baaaacccaaccacacccc'}, 'cc': {'a': 'baaaacccaaccacacccc', 'b': 'ccb', 'c': 'ccc'}, 'bcccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'baaaac': {'a': 'baaaaca', 'b': 'abc', 'c': 'baaaacc'}, 'ccbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'baaaacccaa': {'a': 'baaaacccaa', 'b': 'abc', 'c': 'baaaacccaac'}, 'baaaacccaacca': {'a': 'baaaacccaaccac', 'b': 'abc', 'c': 'baaaacccaaccac'}, 'bcc': {'a': 'ba', 'b': 'abc', 'c': 'bccc'}, 'ccccbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'baaaacccaaccac': {'a': 'baaaacccaaccaca', 'b': 'abc', 'c': 'baaaacccaaccaca'}, 'ccccc': {'a': 'baaaacccaaccacacccc', 'b': 'cccccb', 'c': 'cccccc'}, 'cccccc': {'a': 'baaaacccaaccacacccc', 'b': 'ccccccb', 'c': 'ccccccc'}, 'ccccccc': {'a': 'baaaacccaaccacacccc', 'b': 'bcccb', 'c': 'baaaacccaaccacacccc'}, 'baa': {'a': 'baaa', 'b': 'abc', 'c': 'baaa'}, 'cccccbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bc': {'a': 'ba', 'b': 'abc', 'c': 'bcc'}, 'baaaa': {'a': 'bcccca', 'b': 'abc', 'c': 'baaaac'}, 'bccccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bcccccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bcccca': {'a': 'baaaac', 'b': 'abc', 'c': 'baaaaca'}, 'ccc': {'a': 'baaaacccaaccacacccc', 'b': 'cccb', 'c': 'cccc'}, 'cccccccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bb': {'a': 'abc', 'b': 'abc', 'c': 'bbc'}, 'bccc': {'a': 'baaa', 'b': 'abc', 'c': 'bcccc'}, 'ba': {'a': 'baa', 'b': 'abc', 'c': 'ba'}, 'baaaacaa': {'a': 'baaaaccc', 'b': 'abc', 'c': 'baaaaccc'}, 'ccccccbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'b': {'a': 'ba', 'b': 'bb', 'c': 'bc'}, 'baaa': {'a': 'baaaa', 'b': 'abc', 'c': 'bcccca'}, 'bbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccccbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccccccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'baaaacccaaccacacc': {'a': 'baaaacccaaccacaccc', 'b': 'abc', 'c': 'baaaacccaaccacaccc'}, 'cbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bbcc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'baaaaca': {'a': 'baaaacaa', 'b': 'abc', 'c': 'baaaacaa'}, 'bccccccc': {'a': 'baaaaccc', 'b': 'abc', 'c': 'baaaaccca'}, 'ccccccbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'baaaacccaaccacac': {'a': 'baaaacccaaccacacc', 'b': 'abc', 'c': 'baaaacccaaccacacc'}, 'ccccbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'baaaacccaacc': {'a': 'baaaacccaacca', 'b': 'abc', 'c': 'baaaacccaacca'}, 'bccccc': {'a': 'baaaaca', 'b': 'abc', 'c': 'bcccccc'}, 'bcb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'c': {'a': 'baaaacccaaccacacccc', 'b': 'cb', 'c': 'cc'}, 'baaaaccca': {'a': 'baaaacccaa', 'b': 'abc', 'c': 'baaaacccaa'}, 'baaaacc': {'a': 'baaaacaa', 'b': 'abc', 'c': 'baaaaccc'}, 'baaaacccaac': {'a': 'baaaacccaac', 'b': 'abc', 'c': 'baaaacccaacc'}, 'baaaacccaaccaca': {'a': 'baaaacccaaccacac', 'b': 'abc', 'c': 'baaaacccaaccacac'}, 'bccccccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'a': {'a': 'baaaacccaaccacacccc', 'b': 'abc', 'c': 'baaaacccaaccacacccc'}, 'bbcb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ab': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bcccccc': {'a': 'baaaacaa', 'b': 'abc', 'c': 'bccccccc'}}
Explanation matches RNN: 100.0
RNN matches ground truth: 100.0
Explanation matches ground truth: 100.0
Lstar matches RNN: 100.0
Lstar matches ground truth: 100.0
target query      explanation status  test accuracy  rnn score  explanation score  explanation score on ground truth  extraction time revised delta revised epsilon                                  counterexamples train size test size ltl_depth lstar_states  lstar explanation score  lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  F(a)  ((F a) & (F b))   True          100.0      100.0              100.0                              100.0        10.699209          None            None  [, ab, a, ba, b, cc, acb, aa, ac, cb, cba, bca]          0         0         2           70                    100.0                                    100.0             189.484493         True     0.05   0.01
target: F(aUb)
query: F(a)


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.11569690704345703  s
EQ test took  0.0006480216979980469  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.11792564392089844  s
EQ test took  0.13434076309204102  s
new counterexample: ba  should be accepted by implementation


positive traces---> 
['ba']


negative traces---> 
['']



1  iteration complete



start formula depth: 1
Before normalization: x1
Learning formula with depth 0
learned LTL formula: b
Learning took:  0.1478872299194336  s
EQ test took  0.06399703025817871  s
new counterexample: b  should be rejected by implementation


positive traces---> 
['ba']


negative traces---> 
['', 'b']



2  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (X x0)
Learning formula with depth 1
learned LTL formula: (X a)
Learning took:  0.1683962345123291  s
EQ test took  0.06741738319396973  s
new counterexample: ab  should be accepted by implementation


positive traces---> 
['ba', 'ab']


negative traces---> 
['', 'b']



3  iteration complete



start formula depth: 2
Before normalization: (F x0)
Learning formula with depth 1
learned LTL formula: (F a)
Learning took:  0.17211341857910156  s
EQ test took  0.853384256362915  s
new counterexample: a  should be rejected by implementation


positive traces---> 
['ba', 'ab']


negative traces---> 
['', 'b', 'a']



4  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (X (! x2))
Learning formula with depth 2
learned LTL formula: (X (~ c))
Learning took:  0.27089881896972656  s
EQ test took  0.1283705234527588  s
new counterexample: acb  should be accepted by implementation


positive traces---> 
['ba', 'ab', 'acb']


negative traces---> 
['', 'b', 'a']



5  iteration complete



start formula depth: 3
Before normalization: (X (x2 -> x2))
Learning formula with depth 1
learned LTL formula: (X true)
Learning took:  0.26688170433044434  s
EQ test took  0.5479097366333008  s
new counterexample: bb  should be rejected by implementation


positive traces---> 
['ba', 'ab', 'acb']


negative traces---> 
['', 'b', 'a', 'bb']



6  iteration complete



start formula depth: 3
increasing formula depth to  4
increasing formula depth to  5
Before normalization: (((! x0) U x0) & (x0 U (! x0)))
Learning formula with depth 3
learned LTL formula: ((F a) & (a U (~ a)))
Learning took:  1.0892348289489746  s
No positive counterexample found
EQ test took  1.5730795860290527  s
new counterexample: ca  should be rejected by implementation


positive traces---> 
['ba', 'ab', 'acb']


negative traces---> 
['', 'b', 'a', 'bb', 'ca']



7  iteration complete



start formula depth: 5
Before normalization: ((x1 U (! x1)) & ((! x1) U x1))
Learning formula with depth 3
learned LTL formula: ((F b) & (b U (~ b)))
Learning took:  0.7950661182403564  s
No positive counterexample found
EQ test took  1.7049455642700195  s
new counterexample: bc  should be rejected by implementation


positive traces---> 
['ba', 'ab', 'acb']


negative traces---> 
['', 'b', 'a', 'bb', 'ca', 'bc']



8  iteration complete



start formula depth: 5
Before normalization: ((F x0) & (F x1))
Learning formula with depth 2
learned LTL formula: ((F a) & (F b))
Learning took:  0.8826417922973633  s
EQ test took  2.67350435256958  s


epsilon= 0.01 delta= 0.1 max_trace_length= 50
query: F(a)
final ltl:  ((F a) & (F b))

Time taken to extract ltl: 11.788190841674805
overall guided extraction time took: 5.420000000000073
generated counterexamples were: (format: (counterexample, counterexample generation time))
('', 0.0)
('abc', 0.010000000000218279)
('b', 0.05999999999949068)
('cb', 0.06000000000040018)
('bc', 0.11999999999989086)
('bb', 0.13999999999941792)
('bcc', 0.14000000000032742)
('ccb', 0.17999999999938154)
('bcb', 0.18000000000029104)
('cbb', 0.21000000000003638)
('bbc', 0.23000000000047294)
('bbb', 0.2600000000002183)
('cbc', 0.28000000000065484)
('bbbc', 0.2899999999999636)
('bbcb', 0.2899999999999636)
('bbcc', 0.3100000000004002)
('ccbb', 0.3099999999994907)
('bbbb', 0.3400000000001455)
('ccbc', 0.32999999999992724)
('cccb', 0.3499999999994543)
('cccbc', 0.36999999999989086)
('ccccb', 0.4099999999998545)
<IPython.core.display.Image object>

Time taken to extract lstar-dfa: 5.417252779006958
number of states of the dfa: 28
returned flag: True
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'c'}, 'abc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccc': {'a': 'a', 'b': 'ccccb', 'c': 'a'}, 'ccccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cc': {'a': 'a', 'b': 'ccb', 'c': 'ccc'}, 'ccbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bcc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccc': {'a': 'a', 'b': 'cccb', 'c': 'cccc'}, 'bb': {'a': 'abc', 'b': 'bbb', 'c': 'bbc'}, 'bbbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'b': {'a': 'abc', 'b': 'bb', 'c': 'bc'}, 'bbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bbcc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bcb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'c': {'a': 'a', 'b': 'cb', 'c': 'cc'}, 'bbbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'a': {'a': 'a', 'b': 'abc', 'c': 'a'}, 'bbcb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ab': {'a': 'abc', 'b': 'abc', 'c': 'abc'}}
Explanation matches RNN: 100.0
RNN matches ground truth: 100.0
Explanation matches ground truth: 100.0
Lstar matches RNN: 100.0
Lstar matches ground truth: 100.0
target query      explanation status  test accuracy  rnn score  explanation score  explanation score on ground truth  extraction time revised delta revised epsilon                    counterexamples train size test size ltl_depth lstar_states  lstar explanation score  lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  F(a)  ((F a) & (F b))   True          100.0      100.0              100.0                              100.0        11.788191          None            None  [, ba, b, ab, a, acb, bb, ca, bc]          0         0         2           28                    100.0                                    100.0               5.417253         True     0.01    0.1
target: F(aUb)
query: F(a)


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.1293940544128418  s
EQ test took  0.0006272792816162109  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.13700127601623535  s
EQ test took  0.1629047393798828  s
new counterexample: ab  should be accepted by implementation


positive traces---> 
['ab']


negative traces---> 
['']



1  iteration complete



start formula depth: 1
Before normalization: x0
Learning formula with depth 0
learned LTL formula: a
Learning took:  0.14481616020202637  s
EQ test took  0.06622076034545898  s
new counterexample: a  should be rejected by implementation


positive traces---> 
['ab']


negative traces---> 
['', 'a']



2  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (X x1)
Learning formula with depth 1
learned LTL formula: (X b)
Learning took:  0.16529130935668945  s
EQ test took  0.07375955581665039  s
new counterexample: ba  should be accepted by implementation


positive traces---> 
['ab', 'ba']


negative traces---> 
['', 'a']



3  iteration complete



start formula depth: 2
Before normalization: (F x1)
Learning formula with depth 1
learned LTL formula: (F b)
Learning took:  0.181992769241333  s
EQ test took  0.9746565818786621  s
new counterexample: b  should be rejected by implementation


positive traces---> 
['ab', 'ba']


negative traces---> 
['', 'a', 'b']



4  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (X (x1 -> x1))
Learning formula with depth 1
learned LTL formula: (X true)
Learning took:  0.27156877517700195  s
No positive counterexample found
EQ test took  0.532968282699585  s
new counterexample: ca  should be rejected by implementation


positive traces---> 
['ab', 'ba']


negative traces---> 
['', 'a', 'b', 'ca']



5  iteration complete



start formula depth: 3
increasing formula depth to  4
Before normalization: ((! x2) & (X (! x2)))
Learning formula with depth 3
learned LTL formula: ((~ c) & (X (~ c)))
Learning took:  0.4996054172515869  s
EQ test took  0.1615743637084961  s
new counterexample: cba  should be accepted by implementation


positive traces---> 
['ab', 'ba', 'cba']


negative traces---> 
['', 'a', 'b', 'ca']



6  iteration complete



start formula depth: 4
increasing formula depth to  5
Before normalization: ((X (! x2)) U ((X (! x2)) & (! x2)))
Learning formula with depth 4
learned LTL formula: ((X (~ c)) U ((~ c) & (X (~ c))))
Learning took:  0.9809315204620361  s
EQ test took  0.10548663139343262  s
new counterexample: aa  should be rejected by implementation


positive traces---> 
['ab', 'ba', 'cba']


negative traces---> 
['', 'a', 'b', 'ca', 'aa']



7  iteration complete



start formula depth: 5
Before normalization: ((F x0) & ((F x0) U x1))
Learning formula with depth 3
learned LTL formula: ((F a) & ((F a) U b))
Learning took:  0.9536817073822021  s
EQ test took  2.33026123046875  s
new counterexample: acb  should be accepted by implementation


positive traces---> 
['ab', 'ba', 'cba', 'acb']


negative traces---> 
['', 'a', 'b', 'ca', 'aa']



8  iteration complete



start formula depth: 5
Before normalization: ((X (x1 -> x1)) & ((x1 -> x1) U x1))
Learning formula with depth 2
learned LTL formula: ((X true) & (F b))
Learning took:  0.9358198642730713  s
EQ test took  1.8817760944366455  s
new counterexample: bb  should be rejected by implementation


positive traces---> 
['ab', 'ba', 'cba', 'acb']


negative traces---> 
['', 'a', 'b', 'ca', 'aa', 'bb']



9  iteration complete



start formula depth: 5
Before normalization: ((F x0) & (F x1))
Learning formula with depth 2
learned LTL formula: ((F a) & (F b))
Learning took:  1.0531055927276611  s
EQ test took  3.1348674297332764  s


epsilon= 0.01 delta= 0.05 max_trace_length= 50
query: F(a)
final ltl:  ((F a) & (F b))

Time taken to extract ltl: 14.892710208892822
overall guided extraction time took: 13.360000000000582
generated counterexamples were: (format: (counterexample, counterexample generation time))
('', 0.0)
('abc', 0.010000000000218279)
('b', 0.14000000000032742)
('cb', 0.15999999999985448)
('bc', 0.2600000000002183)
('bb', 0.31999999999970896)
('bbb', 0.3499999999994543)
('cbb', 0.38000000000010914)
('ccb', 0.38000000000010914)
('cbc', 0.46999999999934516)
('bcc', 0.5100000000002183)
('bcb', 0.5100000000002183)
('bbc', 0.6199999999998909)
('bcbc', 0.6099999999996726)
('cbcc', 0.6400000000003274)
('bcbb', 0.6700000000000728)
('ccbb', 0.6799999999993815)
('cbcb', 0.7100000000000364)
('ccbc', 0.7399999999997817)
('cccb', 0.7800000000006548)
('cccbb', 0.8200000000006185)
('ccccb', 0.7999999999992724)
('cccbc', 0.8400000000001455)
('ccccbb', 0.8899999999994179)
<IPython.core.display.Image object>

Time taken to extract lstar-dfa: 13.354709386825562
number of states of the dfa: 30
returned flag: True
transitions:->
{'': {'a': 'a', 'b': 'b', 'c': 'c'}, 'abc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccc': {'a': 'a', 'b': 'ccccb', 'c': 'a'}, 'cbcb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cc': {'a': 'a', 'b': 'ccb', 'c': 'ccc'}, 'ccbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bcc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccccbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bc': {'a': 'abc', 'b': 'bcb', 'c': 'abc'}, 'ccc': {'a': 'a', 'b': 'cccb', 'c': 'cccc'}, 'bb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'b': {'a': 'abc', 'b': 'bb', 'c': 'bc'}, 'bbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cb': {'a': 'abc', 'b': 'abc', 'c': 'cbc'}, 'cbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bcb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bcbb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'c': {'a': 'a', 'b': 'cb', 'c': 'cc'}, 'cbcc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'cccbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'bcbc': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'a': {'a': 'a', 'b': 'abc', 'c': 'a'}, 'cccb': {'a': 'abc', 'b': 'abc', 'c': 'abc'}, 'ab': {'a': 'abc', 'b': 'abc', 'c': 'abc'}}
Explanation matches RNN: 100.0
RNN matches ground truth: 100.0
Explanation matches ground truth: 100.0
Lstar matches RNN: 100.0
Lstar matches ground truth: 100.0
target query      explanation status  test accuracy  rnn score  explanation score  explanation score on ground truth  extraction time revised delta revised epsilon                         counterexamples train size test size ltl_depth lstar_states  lstar explanation score  lstar explanation score on ground truth  lstar extraction time lstar_status  epsilon  delta
F(aUb)  F(a)  ((F a) & (F b))   True          100.0      100.0              100.0                              100.0         14.89271          None            None  [, ab, a, ba, b, ca, cba, aa, acb, bb]          0         0         2           30                    100.0                                    100.0              13.354709         True     0.01   0.05
target: F(aUb)
query: F(a)


positive traces---> 
[]


negative traces---> 
[]



Learning formula with depth 0
learned LTL formula: true
Learning took:  0.1243886947631836  s
EQ test took  0.0006771087646484375  s
new counterexample:   should be rejected by implementation


positive traces---> 
[]


negative traces---> 
['']



0  iteration complete



Learning formula with depth 0
learned LTL formula: false
Learning took:  0.1281416416168213  s
EQ test took  0.20888781547546387  s
new counterexample: ab  should be accepted by implementation


positive traces---> 
['ab']


negative traces---> 
['']



1  iteration complete



start formula depth: 1
Before normalization: x0
Learning formula with depth 0
learned LTL formula: a
Learning took:  0.14279437065124512  s
EQ test took  0.09084868431091309  s
new counterexample: a  should be rejected by implementation


positive traces---> 
['ab']


negative traces---> 
['', 'a']



2  iteration complete



start formula depth: 1
increasing formula depth to  2
Before normalization: (X x1)
Learning formula with depth 1
learned LTL formula: (X b)
Learning took:  0.1688227653503418  s
EQ test took  0.09044122695922852  s
new counterexample: ba  should be accepted by implementation


positive traces---> 
['ab', 'ba']


negative traces---> 
['', 'a']



3  iteration complete



start formula depth: 2
Before normalization: (F x1)
Learning formula with depth 1
learned LTL formula: (F b)
Learning took:  0.17239689826965332  s
EQ test took  1.2191524505615234  s
new counterexample: b  should be rejected by implementation


positive traces---> 
['ab', 'ba']


negative traces---> 
['', 'a', 'b']



4  iteration complete



start formula depth: 2
increasing formula depth to  3
Before normalization: (X (x1 -> x1))
Learning formula with depth 1
learned LTL formula: (X true)
Learning took:  0.26679563522338867  s
No positive counterexample found
EQ test took  0.7028520107269287  s
new counterexample: ac  should be rejected by implementation


positive traces---> 
['ab', 'ba']


negative traces---> 
['', 'a', 'b', 'ac']



5  iteration complete



start formula depth: 3
Before normalization: (X (! x2))
Learning formula with depth 2
learned LTL formula: (X (~ c))
Learning took:  0.24745464324951172  s
EQ test took  0.18048667907714844  s
new counterexample: bca  should be accepted by implementation


positive traces---> 
['ab', 'ba', 'bca']


negative traces---> 
['', 'a', 'b', 'ac']



6  iteration complete



start formula depth: 3
increasing formula depth to  4
Before normalization: (X (x2 U (! x2)))
Learning formula with depth 3
learned LTL formula: (X (c U (~ c)))
Learning took:  0.5624027252197266  s
EQ test took  1.1171002388000488  s
new counterexample: cb  should be rejected by implementation


positive traces---> 
['ab', 'ba', 'bca']


negative traces---> 
['', 'a', 'b', 'ac', 'cb']



7  iteration complete



start formula depth: 4
increasing formula depth to  5
Before normalization: ((F x0) & (x0 U x1))
Learning formula with depth 2
learned LTL formula: ((a U b) & (F a))
Learning took:  1.2105634212493896  s
EQ test took  1.461247444152832  s
new counterexample: acb  should be accepted by implementation


positive traces---> 
['ab', 'ba', 'bca', 'acb']


negative traces---> 
['', 'a', 'b', 'ac', 'cb']



8  iteration complete



start formula depth: 5
Before normalization: ((F x1) & (F x0))
Learning formula with depth 2
learned LTL formula: ((F a) & (F b))
Learning took:  1.0841951370239258  s
EQ test took  3.4368889331817627  s
new counterexample: aacbbbcbcbaaccccccacaaacaaaccaacccccaac  should be rejected by implementation


positive traces---> 
['ab', 'ba', 'bca', 'acb']


negative traces---> 
['', 'a', 'b', 'ac', 'cb', 'aacbbbcbcbaaccccccacaaacaaaccaacccccaac']



9  iteration complete



start formula depth: 5
increasing formula depth to  6
Before normalization: ((F x0) & (((F x0) -> x0) U x1))
Learning formula with depth 4
learned LTL formula: ((F a) & (((F a) -> a) U b))
Learning took:  40.25956702232361  s
EQ test took  2.05492901802063  s
new counterexample: cba  should be accepted by implementation


positive traces---> 
['ab', 'ba', 'bca', 'acb', 'cba']


negative traces---> 
['', 'a', 'b', 'ac', 'cb', 'aacbbbcbcbaaccccccacaaacaaaccaacccccaac']



10  iteration complete



start formula depth: 6
increasing formula depth to  7
Before normalization: ((F x0) & ((! (X x0)) U x1))
Learning formula with depth 4
learned LTL formula: ((F a) & ((~ (X a)) U b))
Learning took:  124.06371712684631  s
EQ test took  2.0212924480438232  s
new counterexample: baccccaaccaccaaaacc  should be rejected by implementation


positive traces---> 
['ab', 'ba', 'bca', 'acb', 'cba']


negative traces---> 
['', 'a', 'b', 'ac', 'cb', 'aacbbbcbcbaaccccccacaaacaaaccaacccccaac', 'baccccaaccaccaaaacc']



11  iteration complete



start formula depth: 7
Before normalization: (((! (F x2)) & (X (! (F x2)))) | (X (X (! (F x2)))))
Learning formula with depth 5
learned LTL formula: (((~ (F c)) & (X (~ (F c)))) | (X (X (~ (F c)))))
Learning took:  64.69155263900757  s
EQ test took  0.2515370845794678  s
new counterexample: abc  should be accepted by implementation


positive traces---> 
['ab', 'ba', 'bca', 'acb', 'cba', 'abc']


negative traces---> 
['', 'a', 'b', 'ac', 'cb', 'aacbbbcbcbaaccccccacaaacaaaccaacccccaac', 'baccccaaccaccaaaacc']



12  iteration complete





epsilon= 0.01 delta= 0.01 max_trace_length= 50
query: F(a)
final ltl:  (((~ (F c)) & (X (~ (F c)))) | (X (X (~ (F c)))))
incomplete formula
Number of samples: 1362
Number of counterexamples returned: 299
